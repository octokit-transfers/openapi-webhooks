/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = T | U extends object
  ? (Without<T, U> & U) | (Without<U, T> & T)
  : T | U;
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
  ? OneOf<[XOR<A, B>, ...Rest]>
  : never;

export type paths = Record<string, never>;

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    root: {
      /** Format: uri-template */
      current_user_url: string;
      /** Format: uri-template */
      current_user_authorizations_html_url: string;
      /** Format: uri-template */
      authorizations_url: string;
      /** Format: uri-template */
      code_search_url: string;
      /** Format: uri-template */
      commit_search_url: string;
      /** Format: uri-template */
      emails_url: string;
      /** Format: uri-template */
      emojis_url: string;
      /** Format: uri-template */
      events_url: string;
      /** Format: uri-template */
      feeds_url: string;
      /** Format: uri-template */
      followers_url: string;
      /** Format: uri-template */
      following_url: string;
      /** Format: uri-template */
      gists_url: string;
      /** Format: uri-template */
      hub_url: string;
      /** Format: uri-template */
      issue_search_url: string;
      /** Format: uri-template */
      issues_url: string;
      /** Format: uri-template */
      keys_url: string;
      /** Format: uri-template */
      label_search_url: string;
      /** Format: uri-template */
      notifications_url: string;
      /** Format: uri-template */
      organization_url: string;
      /** Format: uri-template */
      organization_repositories_url: string;
      /** Format: uri-template */
      organization_teams_url: string;
      /** Format: uri-template */
      public_gists_url: string;
      /** Format: uri-template */
      rate_limit_url: string;
      /** Format: uri-template */
      repository_url: string;
      /** Format: uri-template */
      repository_search_url: string;
      /** Format: uri-template */
      current_user_repositories_url: string;
      /** Format: uri-template */
      starred_url: string;
      /** Format: uri-template */
      starred_gists_url: string;
      /** Format: uri-template */
      topic_search_url?: string;
      /** Format: uri-template */
      user_url: string;
      /** Format: uri-template */
      user_organizations_url: string;
      /** Format: uri-template */
      user_repositories_url: string;
      /** Format: uri-template */
      user_search_url: string;
    };
    "global-hook": {
      type?: string;
      id?: number;
      name?: string;
      active?: boolean;
      events?: string[];
      config?: {
        url?: string;
        content_type?: string;
        insecure_ssl?: string;
        secret?: string;
      };
      updated_at?: string;
      created_at?: string;
      url?: string;
      ping_url?: string;
    };
    "global-hook-2": {
      type?: string;
      id?: number;
      name?: string;
      active?: boolean;
      events?: string[];
      config?: {
        url?: string;
        content_type?: string;
        insecure_ssl?: string;
      };
      updated_at?: string;
      created_at?: string;
      url?: string;
      ping_url?: string;
    };
    "public-key-full": {
      id: number;
      key: string;
      user_id: OneOf<[number, null]>;
      repository_id: OneOf<[number, null]>;
      url: string;
      title: string;
      read_only: boolean;
      verified: boolean;
      /** Format: date-time */
      created_at: string;
    };
    "ldap-mapping-team": {
      ldap_dn?: string;
      id?: number;
      node_id?: string;
      url?: string;
      html_url?: string;
      name?: string;
      slug?: string;
      description?: OneOf<[string, null]>;
      privacy?: string;
      permission?: string;
      members_url?: string;
      repositories_url?: string;
      parent?: null;
    };
    /**
     * Ldap Private User
     * @description Ldap Private User
     */
    "ldap-mapping-user": {
      ldap_dn?: string;
      login: string;
      id: number;
      node_id: string;
      /** Format: uri */
      avatar_url: string;
      gravatar_id: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      /** Format: uri */
      subscriptions_url: string;
      /** Format: uri */
      organizations_url: string;
      /** Format: uri */
      repos_url: string;
      events_url: string;
      /** Format: uri */
      received_events_url: string;
      type: string;
      site_admin: boolean;
      name: OneOf<[string, null]>;
      company: OneOf<[string, null]>;
      blog: OneOf<[string, null]>;
      location: OneOf<[string, null]>;
      /** Format: email */
      email: OneOf<[string, null]>;
      hireable: OneOf<[boolean, null]>;
      bio: OneOf<[string, null]>;
      twitter_username?: OneOf<[string, null]>;
      public_repos: number;
      public_gists: number;
      followers: number;
      following: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      private_gists: number;
      total_private_repos: number;
      owned_private_repos: number;
      disk_usage: number;
      collaborators: number;
      two_factor_authentication: boolean;
      plan?: {
        collaborators: number;
        name: string;
        space: number;
        private_repos: number;
      };
      /** Format: date-time */
      suspended_at?: string;
      business_plus?: boolean;
    };
    /**
     * Organization Simple
     * @description A GitHub organization.
     */
    "organization-simple": {
      login: string;
      id: number;
      node_id: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      repos_url: string;
      /** Format: uri */
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: OneOf<[string, null]>;
    };
    "pre-receive-environment": {
      id?: number;
      name?: string;
      image_url?: string;
      url?: string;
      html_url?: string;
      default_environment?: boolean;
      created_at?: string;
      hooks_count?: number;
      download?: {
        url?: string;
        state?: string;
        downloaded_at?: OneOf<[string, null]>;
        message?: OneOf<[string, null]>;
      };
    };
    "pre-receive-environment-download-status": {
      url?: string;
      state?: string;
      downloaded_at?: OneOf<[string, null]>;
      message?: OneOf<[string, null]>;
    };
    "pre-receive-hook": {
      id?: number;
      name?: string;
      enforcement?: string;
      script?: string;
      script_repository?: {
        id?: number;
        full_name?: string;
        url?: string;
        html_url?: string;
      };
      environment?: {
        id?: number;
        name?: string;
        image_url?: string;
        url?: string;
        html_url?: string;
        default_environment?: boolean;
        created_at?: string;
        hooks_count?: number;
        download?: {
          url?: string;
          state?: string;
          downloaded_at?: OneOf<[string, null]>;
          message?: OneOf<[string, null]>;
        };
      };
      allow_downstream_configuration?: boolean;
    };
    /**
     * Simple User
     * @description A GitHub user.
     */
    "simple-user": {
      name?: OneOf<[string, null]>;
      email?: OneOf<[string, null]>;
      login: string;
      id: number;
      node_id: string;
      /** Format: uri */
      avatar_url: string;
      gravatar_id: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      /** Format: uri */
      subscriptions_url: string;
      /** Format: uri */
      organizations_url: string;
      /** Format: uri */
      repos_url: string;
      events_url: string;
      /** Format: uri */
      received_events_url: string;
      type: string;
      site_admin: boolean;
      starred_at?: string;
    };
    /**
     * App Permissions
     * @description The permissions granted to the user-to-server access token.
     * @example {
     *   "contents": "read",
     *   "issues": "read",
     *   "deployments": "write",
     *   "single_file": "read"
     * }
     */
    "app-permissions": {
      /**
       * @description The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
       * @enum {string}
       */
      actions?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
       * @enum {string}
       */
      administration?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for checks on code.
       * @enum {string}
       */
      checks?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
       * @enum {string}
       */
      contents?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for deployments and deployment statuses.
       * @enum {string}
       */
      deployments?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for managing repository environments.
       * @enum {string}
       */
      environments?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
       * @enum {string}
       */
      issues?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
       * @enum {string}
       */
      metadata?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for packages published to GitHub Packages.
       * @enum {string}
       */
      packages?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
       * @enum {string}
       */
      pages?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
       * @enum {string}
       */
      pull_requests?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage the post-receive hooks for a repository.
       * @enum {string}
       */
      repository_hooks?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage repository projects, columns, and cards.
       * @enum {string}
       */
      repository_projects?: "read" | "write" | "admin";
      /**
       * @description The level of permission to grant the access token to view and manage secret scanning alerts.
       * @enum {string}
       */
      secret_scanning_alerts?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage repository secrets.
       * @enum {string}
       */
      secrets?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to view and manage security events like code scanning alerts.
       * @enum {string}
       */
      security_events?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage just a single file.
       * @enum {string}
       */
      single_file?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for commit statuses.
       * @enum {string}
       */
      statuses?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage Dependabot alerts.
       * @enum {string}
       */
      vulnerability_alerts?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to update GitHub Actions workflow files.
       * @enum {string}
       */
      workflows?: "write";
      /**
       * @description The level of permission to grant the access token for organization teams and members.
       * @enum {string}
       */
      members?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage access to an organization.
       * @enum {string}
       */
      organization_administration?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage the post-receive hooks for an organization.
       * @enum {string}
       */
      organization_hooks?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
       * @enum {string}
       */
      organization_personal_access_tokens?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
       * @enum {string}
       */
      organization_personal_access_token_requests?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for viewing an organization's plan.
       * @enum {string}
       */
      organization_plan?: "read";
      /**
       * @description The level of permission to grant the access token to manage organization projects and projects beta (where available).
       * @enum {string}
       */
      organization_projects?: "read" | "write" | "admin";
      /**
       * @description The level of permission to grant the access token for organization packages published to GitHub Packages.
       * @enum {string}
       */
      organization_packages?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage organization secrets.
       * @enum {string}
       */
      organization_secrets?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
       * @enum {string}
       */
      organization_self_hosted_runners?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to view and manage users blocked by the organization.
       * @enum {string}
       */
      organization_user_blocking?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage team discussions and related comments.
       * @enum {string}
       */
      team_discussions?: "read" | "write";
    };
    /** Scoped Installation */
    "scoped-installation": {
      permissions: components["schemas"]["app-permissions"];
      /**
       * @description Describe whether all repositories have been selected or there's a selection involved
       * @enum {string}
       */
      repository_selection: "all" | "selected";
      single_file_name: OneOf<[string, null]>;
      has_multiple_single_files?: boolean;
      single_file_paths?: string[];
      /** Format: uri */
      repositories_url: string;
      account: components["schemas"]["simple-user"];
    };
    /**
     * Authorization
     * @description The authorization for an OAuth app, GitHub App, or a Personal Access Token.
     */
    authorization: {
      id: number;
      /** Format: uri */
      url: string;
      /** @description A list of scopes that this authorization is in. */
      scopes: OneOf<[string[], null]>;
      token: string;
      token_last_eight: OneOf<[string, null]>;
      hashed_token: OneOf<[string, null]>;
      app: {
        client_id: string;
        name: string;
        /** Format: uri */
        url: string;
      };
      note: OneOf<[string, null]>;
      /** Format: uri */
      note_url: OneOf<[string, null]>;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      created_at: string;
      fingerprint: OneOf<[string, null]>;
      user?: null | components["schemas"]["simple-user"];
      installation?: null | components["schemas"]["scoped-installation"];
      /** Format: date-time */
      expires_at: OneOf<[string, null]>;
    };
    /**
     * GitHub app
     * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    integration: {
      /** @description Unique identifier of the GitHub app */
      id: number;
      /** @description The slug name of the GitHub app */
      slug?: string;
      node_id: string;
      owner: null | components["schemas"]["simple-user"];
      /** @description The name of the GitHub app */
      name: string;
      description: OneOf<[string, null]>;
      /** Format: uri */
      external_url: string;
      /** Format: uri */
      html_url: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /**
       * @description The set of permissions for the GitHub app
       * @example {
       *   "issues": "read",
       *   "deployments": "write"
       * }
       */
      permissions: {
        issues?: string;
        checks?: string;
        metadata?: string;
        contents?: string;
        deployments?: string;
        [key: string]: string | undefined;
      };
      /** @description The list of events for the GitHub app */
      events: string[];
      /** @description The number of installations associated with the GitHub app */
      installations_count?: number;
      client_id?: string;
      client_secret?: string;
      webhook_secret?: OneOf<[string, null]>;
      pem?: string;
    };
    /**
     * Basic Error
     * @description Basic Error
     */
    "basic-error": {
      message?: string;
      documentation_url?: string;
      url?: string;
      status?: string;
    };
    /**
     * Validation Error Simple
     * @description Validation Error Simple
     */
    "validation-error-simple": {
      message: string;
      documentation_url: string;
      errors?: string[];
    };
    /**
     * Format: uri
     * @description The URL to which the payloads will be delivered.
     */
    "webhook-config-url": string;
    /** @description The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    "webhook-config-content-type": string;
    /** @description If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.5/webhooks/event-payloads/#delivery-headers). */
    "webhook-config-secret": string;
    "webhook-config-insecure-ssl": string | number;
    /**
     * Webhook Configuration
     * @description Configuration object of the webhook
     */
    "webhook-config": {
      url?: components["schemas"]["webhook-config-url"];
      content_type?: components["schemas"]["webhook-config-content-type"];
      secret?: components["schemas"]["webhook-config-secret"];
      insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
    };
    /**
     * Simple webhook delivery
     * @description Delivery made by a webhook, without request and response information.
     */
    "hook-delivery-item": {
      /** @description Unique identifier of the webhook delivery. */
      id: number;
      /** @description Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event). */
      guid: string;
      /**
       * Format: date-time
       * @description Time when the webhook delivery occurred.
       */
      delivered_at: string;
      /** @description Whether the webhook delivery is a redelivery. */
      redelivery: boolean;
      /** @description Time spent delivering. */
      duration: number;
      /** @description Describes the response returned after attempting the delivery. */
      status: string;
      /** @description Status code received when delivery was made. */
      status_code: number;
      /** @description The event that triggered the delivery. */
      event: string;
      /** @description The type of activity for the event that triggered the delivery. */
      action: OneOf<[string, null]>;
      /** @description The id of the GitHub App installation associated with this event. */
      installation_id: OneOf<[number, null]>;
      /** @description The id of the repository associated with this event. */
      repository_id: OneOf<[number, null]>;
    };
    /**
     * Scim Error
     * @description Scim Error
     */
    "scim-error": {
      message?: OneOf<[string, null]>;
      documentation_url?: OneOf<[string, null]>;
      detail?: OneOf<[string, null]>;
      status?: number;
      scimType?: OneOf<[string, null]>;
      schemas?: string[];
    };
    /**
     * Validation Error
     * @description Validation Error
     */
    "validation-error": {
      message: string;
      documentation_url: string;
      errors?: {
        resource?: string;
        field?: string;
        message?: string;
        code: string;
        index?: number;
        value?:
          | OneOf<[string, null]>
          | OneOf<[number, null]>
          | OneOf<[string[], null]>;
      }[];
    };
    /**
     * Webhook delivery
     * @description Delivery made by a webhook.
     */
    "hook-delivery": {
      /** @description Unique identifier of the delivery. */
      id: number;
      /** @description Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event). */
      guid: string;
      /**
       * Format: date-time
       * @description Time when the delivery was delivered.
       */
      delivered_at: string;
      /** @description Whether the delivery is a redelivery. */
      redelivery: boolean;
      /** @description Time spent delivering. */
      duration: number;
      /** @description Description of the status of the attempted delivery */
      status: string;
      /** @description Status code received when delivery was made. */
      status_code: number;
      /** @description The event that triggered the delivery. */
      event: string;
      /** @description The type of activity for the event that triggered the delivery. */
      action: OneOf<[string, null]>;
      /** @description The id of the GitHub App installation associated with this event. */
      installation_id: OneOf<[number, null]>;
      /** @description The id of the repository associated with this event. */
      repository_id: OneOf<[number, null]>;
      /** @description The URL target of the delivery. */
      url?: string;
      request: {
        /** @description The request headers sent with the webhook delivery. */
        headers: OneOf<
          [
            {
              [key: string]: unknown | undefined;
            },
            null
          ]
        >;
        /** @description The webhook payload. */
        payload: OneOf<
          [
            {
              [key: string]: unknown | undefined;
            },
            null
          ]
        >;
      };
      response: {
        /** @description The response headers received when the delivery was made. */
        headers: OneOf<
          [
            {
              [key: string]: unknown | undefined;
            },
            null
          ]
        >;
        /** @description The response payload received. */
        payload: OneOf<[string, null]>;
      };
    };
    /**
     * Enterprise
     * @description An enterprise on GitHub.
     */
    enterprise: {
      /** @description A short description of the enterprise. */
      description?: OneOf<[string, null]>;
      /** Format: uri */
      html_url: string;
      /**
       * Format: uri
       * @description The enterprise's website URL.
       */
      website_url?: OneOf<[string, null]>;
      /** @description Unique identifier of the enterprise */
      id: number;
      node_id: string;
      /** @description The name of the enterprise. */
      name: string;
      /** @description The slug url identifier for the enterprise. */
      slug: string;
      /** Format: date-time */
      created_at: OneOf<[string, null]>;
      /** Format: date-time */
      updated_at: OneOf<[string, null]>;
      /** Format: uri */
      avatar_url: string;
    };
    /**
     * Integration Installation Request
     * @description Request to install an integration on a target
     */
    "integration-installation-request": {
      /** @description Unique identifier of the request installation. */
      id: number;
      node_id?: string;
      account:
        | components["schemas"]["simple-user"]
        | components["schemas"]["enterprise"];
      requester: components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
    };
    /**
     * Installation
     * @description Installation
     */
    installation: {
      /** @description The ID of the installation. */
      id: number;
      account: OneOf<
        [
          null,
          (
            | components["schemas"]["simple-user"]
            | components["schemas"]["enterprise"]
          )
        ]
      >;
      /**
       * @description Describe whether all repositories have been selected or there's a selection involved
       * @enum {string}
       */
      repository_selection: "all" | "selected";
      /** Format: uri */
      access_tokens_url: string;
      /** Format: uri */
      repositories_url: string;
      /** Format: uri */
      html_url: string;
      app_id: number;
      /** @description The ID of the user or organization this token is being scoped to. */
      target_id: number;
      target_type: string;
      permissions: components["schemas"]["app-permissions"];
      events: string[];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      single_file_name: OneOf<[string, null]>;
      has_multiple_single_files?: boolean;
      single_file_paths?: string[];
      app_slug: string;
      suspended_by: null | components["schemas"]["simple-user"];
      /** Format: date-time */
      suspended_at: OneOf<[string, null]>;
      contact_email?: OneOf<[string, null]>;
    };
    /**
     * License Simple
     * @description License Simple
     */
    "license-simple": {
      key: string;
      name: string;
      /** Format: uri */
      url: OneOf<[string, null]>;
      spdx_id: OneOf<[string, null]>;
      node_id: string;
      /** Format: uri */
      html_url?: string;
    };
    /**
     * Repository
     * @description A repository on GitHub.
     */
    repository: {
      /** @description Unique identifier of the repository */
      id: number;
      node_id: string;
      /** @description The name of the repository. */
      name: string;
      full_name: string;
      license: null | components["schemas"]["license-simple"];
      organization?: null | components["schemas"]["simple-user"];
      forks: number;
      permissions?: {
        admin: boolean;
        pull: boolean;
        triage?: boolean;
        push: boolean;
        maintain?: boolean;
      };
      owner: components["schemas"]["simple-user"];
      /**
       * @description Whether the repository is private or public.
       * @default false
       */
      private: boolean;
      /** Format: uri */
      html_url: string;
      description: OneOf<[string, null]>;
      fork: boolean;
      /** Format: uri */
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /** Format: uri */
      contributors_url: string;
      /** Format: uri */
      deployments_url: string;
      /** Format: uri */
      downloads_url: string;
      /** Format: uri */
      events_url: string;
      /** Format: uri */
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      /** Format: uri */
      languages_url: string;
      /** Format: uri */
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url: string;
      /** Format: uri */
      stargazers_url: string;
      statuses_url: string;
      /** Format: uri */
      subscribers_url: string;
      /** Format: uri */
      subscription_url: string;
      /** Format: uri */
      tags_url: string;
      /** Format: uri */
      teams_url: string;
      trees_url: string;
      clone_url: string;
      /** Format: uri */
      mirror_url: OneOf<[string, null]>;
      /** Format: uri */
      hooks_url: string;
      /** Format: uri */
      svn_url: string;
      /** Format: uri */
      homepage: OneOf<[string, null]>;
      language: OneOf<[string, null]>;
      forks_count: number;
      stargazers_count: number;
      watchers_count: number;
      /** @description The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0. */
      size: number;
      /** @description The default branch of the repository. */
      default_branch: string;
      open_issues_count: number;
      /**
       * @description Whether this repository acts as a template that can be used to generate new repositories.
       * @default false
       */
      is_template?: boolean;
      topics?: string[];
      /**
       * @description Whether issues are enabled.
       * @default true
       */
      has_issues: boolean;
      /**
       * @description Whether projects are enabled.
       * @default true
       */
      has_projects: boolean;
      /**
       * @description Whether the wiki is enabled.
       * @default true
       */
      has_wiki: boolean;
      has_pages: boolean;
      /**
       * @description Whether downloads are enabled.
       * @default true
       */
      has_downloads: boolean;
      /**
       * @description Whether the repository is archived.
       * @default false
       */
      archived: boolean;
      /** @description Returns whether or not this repository disabled. */
      disabled: boolean;
      /**
       * @description The repository visibility: public, private, or internal.
       * @default public
       */
      visibility?: string;
      /** Format: date-time */
      pushed_at: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: OneOf<[string, null]>;
      /** Format: date-time */
      updated_at: OneOf<[string, null]>;
      /**
       * @description Whether to allow rebase merges for pull requests.
       * @default true
       */
      allow_rebase_merge?: boolean;
      template_repository?: OneOf<
        [
          {
            id?: number;
            node_id?: string;
            name?: string;
            full_name?: string;
            owner?: {
              login?: string;
              id?: number;
              node_id?: string;
              avatar_url?: string;
              gravatar_id?: string;
              url?: string;
              html_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              starred_url?: string;
              subscriptions_url?: string;
              organizations_url?: string;
              repos_url?: string;
              events_url?: string;
              received_events_url?: string;
              type?: string;
              site_admin?: boolean;
            };
            private?: boolean;
            html_url?: string;
            description?: string;
            fork?: boolean;
            url?: string;
            archive_url?: string;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            deployments_url?: string;
            downloads_url?: string;
            events_url?: string;
            forks_url?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            languages_url?: string;
            merges_url?: string;
            milestones_url?: string;
            notifications_url?: string;
            pulls_url?: string;
            releases_url?: string;
            ssh_url?: string;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_url?: string;
            subscription_url?: string;
            tags_url?: string;
            teams_url?: string;
            trees_url?: string;
            clone_url?: string;
            mirror_url?: string;
            hooks_url?: string;
            svn_url?: string;
            homepage?: string;
            language?: string;
            forks_count?: number;
            stargazers_count?: number;
            watchers_count?: number;
            size?: number;
            default_branch?: string;
            open_issues_count?: number;
            is_template?: boolean;
            topics?: string[];
            has_issues?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            has_pages?: boolean;
            has_downloads?: boolean;
            archived?: boolean;
            disabled?: boolean;
            visibility?: string;
            pushed_at?: string;
            created_at?: string;
            updated_at?: string;
            permissions?: {
              admin?: boolean;
              maintain?: boolean;
              push?: boolean;
              triage?: boolean;
              pull?: boolean;
            };
            allow_rebase_merge?: boolean;
            temp_clone_token?: string;
            allow_squash_merge?: boolean;
            allow_auto_merge?: boolean;
            delete_branch_on_merge?: boolean;
            allow_update_branch?: boolean;
            allow_merge_commit?: boolean;
            subscribers_count?: number;
            network_count?: number;
          },
          null
        ]
      >;
      temp_clone_token?: string;
      /**
       * @description Whether to allow squash merges for pull requests.
       * @default true
       */
      allow_squash_merge?: boolean;
      /**
       * @description Whether to allow Auto-merge to be used on pull requests.
       * @default false
       */
      allow_auto_merge?: boolean;
      /**
       * @description Whether to delete head branches when pull requests are merged
       * @default false
       */
      delete_branch_on_merge?: boolean;
      /**
       * @description Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
       * @default false
       */
      allow_update_branch?: boolean;
      /**
       * @description Whether to allow merge commits for pull requests.
       * @default true
       */
      allow_merge_commit?: boolean;
      /** @description Whether to allow forking this repo */
      allow_forking?: boolean;
      subscribers_count?: number;
      network_count?: number;
      open_issues: number;
      watchers: number;
      master_branch?: string;
      starred_at?: string;
      /** @description Whether anonymous git access is enabled for this repository */
      anonymous_access_enabled?: boolean;
    };
    /**
     * Installation Token
     * @description Authentication token for a GitHub App installed on a user or org.
     */
    "installation-token": {
      token: string;
      expires_at: string;
      permissions?: components["schemas"]["app-permissions"];
      /** @enum {string} */
      repository_selection?: "all" | "selected";
      repositories?: components["schemas"]["repository"][];
      single_file?: string;
      has_multiple_single_files?: boolean;
      single_file_paths?: string[];
    };
    /**
     * Application Grant
     * @description The authorization associated with an OAuth Access.
     */
    "application-grant": {
      id: number;
      /** Format: uri */
      url: string;
      app: {
        client_id: string;
        name: string;
        /** Format: uri */
        url: string;
      };
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      scopes: string[];
      user?: null | components["schemas"]["simple-user"];
    };
    /**
     * Code Of Conduct
     * @description Code Of Conduct
     */
    "code-of-conduct": {
      key: string;
      name: string;
      /** Format: uri */
      url: string;
      body?: string;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
    };
    /** @description The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see "[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.5/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)." */
    "announcement-message": OneOf<[string, null]>;
    /**
     * Format: date-time
     * @description The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.
     */
    "announcement-expiration": OneOf<[string, null]>;
    /**
     * Enterprise Announcement
     * @description Enterprise global announcement
     */
    announcement: {
      announcement: components["schemas"]["announcement-message"];
      expires_at?: components["schemas"]["announcement-expiration"];
    };
    "license-info": {
      seats?: string | number;
      seats_used?: number;
      seats_available?: string | number;
      kind?: string;
      days_until_expiration?: number;
      expire_at?: string;
    };
    /** Repository Enterprise Stats */
    "enterprise-repository-overview": {
      total_repos: number;
      root_repos: number;
      fork_repos: number;
      org_repos: number;
      total_pushes: number;
      total_wikis: number;
    };
    /** Hooks Enterprise Stats */
    "enterprise-hook-overview": {
      total_hooks: number;
      active_hooks: number;
      inactive_hooks: number;
    };
    /** Enterprise Pages Stats */
    "enterprise-page-overview": {
      total_pages: number;
    };
    /** Enterprise Organization Stats */
    "enterprise-organization-overview": {
      total_orgs: number;
      disabled_orgs: number;
      total_teams: number;
      total_team_members: number;
    };
    /** Enterprise User Stats */
    "enterprise-user-overview": {
      total_users: number;
      admin_users: number;
      suspended_users: number;
    };
    /** Enterprise Pull Request Stats */
    "enterprise-pull-request-overview": {
      total_pulls: number;
      merged_pulls: number;
      mergeable_pulls: number;
      unmergeable_pulls: number;
    };
    /** Enterprise Issue Stats */
    "enterprise-issue-overview": {
      total_issues: number;
      open_issues: number;
      closed_issues: number;
    };
    /** Enterprise Milestone Stats */
    "enterprise-milestone-overview": {
      total_milestones: number;
      open_milestones: number;
      closed_milestones: number;
    };
    /** Enterprise Gist Stats */
    "enterprise-gist-overview": {
      total_gists: number;
      private_gists: number;
      public_gists: number;
    };
    /** Enterprise Comment Stats */
    "enterprise-comment-overview": {
      total_commit_comments: number;
      total_gist_comments: number;
      total_issue_comments: number;
      total_pull_request_comments: number;
    };
    "enterprise-overview": {
      repos?: components["schemas"]["enterprise-repository-overview"];
      hooks?: components["schemas"]["enterprise-hook-overview"];
      pages?: components["schemas"]["enterprise-page-overview"];
      orgs?: components["schemas"]["enterprise-organization-overview"];
      users?: components["schemas"]["enterprise-user-overview"];
      pulls?: components["schemas"]["enterprise-pull-request-overview"];
      issues?: components["schemas"]["enterprise-issue-overview"];
      milestones?: components["schemas"]["enterprise-milestone-overview"];
      gists?: components["schemas"]["enterprise-gist-overview"];
      comments?: components["schemas"]["enterprise-comment-overview"];
    };
    "actions-cache-usage-org-enterprise": {
      /** @description The count of active caches across all repositories of an enterprise or an organization. */
      total_active_caches_count: number;
      /** @description The total size in bytes of all active cache items across all repositories of an enterprise or an organization. */
      total_active_caches_size_in_bytes: number;
    };
    /**
     * Actions cache usage policy for an enterprise
     * @description GitHub Actions cache usage policy for an enterprise.
     */
    "actions-cache-usage-policy-enterprise": {
      /** @description For repositories in an enterprise, the default size limit for the sum of all caches in a repository, in gigabytes. */
      repo_cache_size_limit_in_gb?: number;
      /** @description For repositories in an enterprise, the maximum value that can be set as the limit for the sum of all caches in a repository, in gigabytes. */
      max_repo_cache_size_limit_in_gb?: number;
    };
    /**
     * @description The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.
     * @enum {string}
     */
    "enabled-organizations": "all" | "none" | "selected";
    /**
     * @description The permissions policy that controls the actions that are allowed to run.
     * @enum {string}
     */
    "allowed-actions": "all" | "local_only" | "selected";
    /** @description The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
    "selected-actions-url": string;
    "actions-enterprise-permissions": {
      enabled_organizations: components["schemas"]["enabled-organizations"];
      /** @description The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`. */
      selected_organizations_url?: string;
      allowed_actions?: components["schemas"]["allowed-actions"];
      selected_actions_url?: components["schemas"]["selected-actions-url"];
    };
    "selected-actions": {
      /** @description Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization. */
      github_owned_allowed: boolean;
      /** @description Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`. */
      patterns_allowed: string[];
    };
    "runner-groups-enterprise": {
      id: number;
      name: string;
      visibility: string;
      default: boolean;
      selected_organizations_url?: string;
      runners_url: string;
      allows_public_repositories: boolean;
      /**
       * @description If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
       * @default false
       */
      workflow_restrictions_read_only?: boolean;
      /**
       * @description If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
       * @default false
       */
      restricted_to_workflows?: boolean;
      /** @description List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
      selected_workflows?: string[];
    };
    /**
     * Self hosted runner label
     * @description A label for a self hosted runner
     */
    "runner-label": {
      /** @description Unique identifier of the label. */
      id?: number;
      /** @description Name of the label. */
      name: string;
      /**
       * @description The type of label. Read-only labels are applied automatically when the runner is configured.
       * @enum {string}
       */
      type?: "read-only" | "custom";
    };
    /**
     * Self hosted runners
     * @description A self hosted runner
     */
    runner: {
      /** @description The id of the runner. */
      id: number;
      /** @description The name of the runner. */
      name: string;
      /** @description The Operating System of the runner. */
      os: string;
      /** @description The status of the runner. */
      status: string;
      busy: boolean;
      labels: components["schemas"]["runner-label"][];
    };
    /**
     * Runner Application
     * @description Runner Application
     */
    "runner-application": {
      os: string;
      architecture: string;
      download_url: string;
      filename: string;
      /** @description A short lived bearer token used to download the runner, if needed. */
      temp_download_token?: string;
      sha256_checksum?: string;
    };
    /**
     * Authentication Token
     * @description Authentication Token
     */
    "authentication-token": {
      /** @description The token used for authentication */
      token: string;
      /**
       * Format: date-time
       * @description The time this token expires
       */
      expires_at: string;
      permissions?: Record<string, never>;
      /** @description The repositories this token has access to */
      repositories?: components["schemas"]["repository"][];
      single_file?: OneOf<[string, null]>;
      /**
       * @description Describe whether all repositories have been selected or there's a selection involved
       * @enum {string}
       */
      repository_selection?: "all" | "selected";
    };
    "audit-log-event": {
      /** @description The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
      "@timestamp"?: number;
      /** @description The name of the action that was performed, for example `user.login` or `repo.create`. */
      action?: string;
      active?: boolean;
      active_was?: boolean;
      /** @description The actor who performed the action. */
      actor?: string;
      /** @description The id of the actor who performed the action. */
      actor_id?: number;
      actor_location?: {
        country_name?: string;
      };
      data?: {
        [key: string]: unknown | undefined;
      };
      org_id?: number;
      user_id?: number;
      business_id?: number;
      /** @description The username of the account being blocked. */
      blocked_user?: string;
      business?: string;
      config?: Record<string, never>[];
      config_was?: Record<string, never>[];
      content_type?: string;
      operation_type?: string;
      /** @description The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
      created_at?: number;
      deploy_key_fingerprint?: string;
      /** @description A unique identifier for an audit event. */
      _document_id?: string;
      emoji?: string;
      events?: Record<string, never>[];
      events_were?: Record<string, never>[];
      explanation?: string;
      fingerprint?: string;
      hook_id?: number;
      limited_availability?: boolean;
      message?: string;
      name?: string;
      old_user?: string;
      openssh_public_key?: string;
      org?: string;
      previous_visibility?: string;
      read_only?: boolean;
      /** @description The name of the repository. */
      repo?: string;
      /** @description The name of the repository. */
      repository?: string;
      repository_public?: boolean;
      target_login?: string;
      team?: string;
      /** @description The type of protocol (for example, HTTP or SSH) used to transfer Git data. */
      transport_protocol?: number;
      /** @description A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data. */
      transport_protocol_name?: string;
      /** @description The user that was affected by the action performed (if available). */
      user?: string;
      /** @description The repository visibility, for example `public` or `private`. */
      visibility?: string;
    };
    /** @description The security alert number. */
    readonly "alert-number": number;
    /**
     * Format: date-time
     * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly "alert-created-at": string;
    /**
     * Format: date-time
     * @description The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly "alert-updated-at": string;
    /**
     * Format: uri
     * @description The REST API URL of the alert resource.
     */
    readonly "alert-url": string;
    /**
     * Format: uri
     * @description The GitHub URL of the alert resource.
     */
    readonly "alert-html-url": string;
    /**
     * @description Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.
     * @enum {string}
     */
    "secret-scanning-alert-state": "open" | "resolved";
    /**
     * @description **Required when the `state` is `resolved`.** The reason for resolving the alert.
     * @enum {string|null}
     */
    "secret-scanning-alert-resolution":
      | "false_positive"
      | "wont_fix"
      | "revoked"
      | "used_in_tests"
      | ""
      | null;
    /**
     * Simple Repository
     * @description A GitHub repository.
     */
    "simple-repository": {
      /** @description A unique identifier of the repository. */
      id: number;
      /** @description The GraphQL identifier of the repository. */
      node_id: string;
      /** @description The name of the repository. */
      name: string;
      /** @description The full, globally unique, name of the repository. */
      full_name: string;
      owner: components["schemas"]["simple-user"];
      /** @description Whether the repository is private. */
      private: boolean;
      /**
       * Format: uri
       * @description The URL to view the repository on GitHub.com.
       */
      html_url: string;
      /** @description The repository description. */
      description: OneOf<[string, null]>;
      /** @description Whether the repository is a fork. */
      fork: boolean;
      /**
       * Format: uri
       * @description The URL to get more information about the repository from the GitHub API.
       */
      url: string;
      /** @description A template for the API URL to download the repository as an archive. */
      archive_url: string;
      /** @description A template for the API URL to list the available assignees for issues in the repository. */
      assignees_url: string;
      /** @description A template for the API URL to create or retrieve a raw Git blob in the repository. */
      blobs_url: string;
      /** @description A template for the API URL to get information about branches in the repository. */
      branches_url: string;
      /** @description A template for the API URL to get information about collaborators of the repository. */
      collaborators_url: string;
      /** @description A template for the API URL to get information about comments on the repository. */
      comments_url: string;
      /** @description A template for the API URL to get information about commits on the repository. */
      commits_url: string;
      /** @description A template for the API URL to compare two commits or refs. */
      compare_url: string;
      /** @description A template for the API URL to get the contents of the repository. */
      contents_url: string;
      /**
       * Format: uri
       * @description A template for the API URL to list the contributors to the repository.
       */
      contributors_url: string;
      /**
       * Format: uri
       * @description The API URL to list the deployments of the repository.
       */
      deployments_url: string;
      /**
       * Format: uri
       * @description The API URL to list the downloads on the repository.
       */
      downloads_url: string;
      /**
       * Format: uri
       * @description The API URL to list the events of the repository.
       */
      events_url: string;
      /**
       * Format: uri
       * @description The API URL to list the forks of the repository.
       */
      forks_url: string;
      /** @description A template for the API URL to get information about Git commits of the repository. */
      git_commits_url: string;
      /** @description A template for the API URL to get information about Git refs of the repository. */
      git_refs_url: string;
      /** @description A template for the API URL to get information about Git tags of the repository. */
      git_tags_url: string;
      /** @description A template for the API URL to get information about issue comments on the repository. */
      issue_comment_url: string;
      /** @description A template for the API URL to get information about issue events on the repository. */
      issue_events_url: string;
      /** @description A template for the API URL to get information about issues on the repository. */
      issues_url: string;
      /** @description A template for the API URL to get information about deploy keys on the repository. */
      keys_url: string;
      /** @description A template for the API URL to get information about labels of the repository. */
      labels_url: string;
      /**
       * Format: uri
       * @description The API URL to get information about the languages of the repository.
       */
      languages_url: string;
      /**
       * Format: uri
       * @description The API URL to merge branches in the repository.
       */
      merges_url: string;
      /** @description A template for the API URL to get information about milestones of the repository. */
      milestones_url: string;
      /** @description A template for the API URL to get information about notifications on the repository. */
      notifications_url: string;
      /** @description A template for the API URL to get information about pull requests on the repository. */
      pulls_url: string;
      /** @description A template for the API URL to get information about releases on the repository. */
      releases_url: string;
      /**
       * Format: uri
       * @description The API URL to list the stargazers on the repository.
       */
      stargazers_url: string;
      /** @description A template for the API URL to get information about statuses of a commit. */
      statuses_url: string;
      /**
       * Format: uri
       * @description The API URL to list the subscribers on the repository.
       */
      subscribers_url: string;
      /**
       * Format: uri
       * @description The API URL to subscribe to notifications for this repository.
       */
      subscription_url: string;
      /**
       * Format: uri
       * @description The API URL to get information about tags on the repository.
       */
      tags_url: string;
      /**
       * Format: uri
       * @description The API URL to list the teams on the repository.
       */
      teams_url: string;
      /** @description A template for the API URL to create or retrieve a raw Git tree of the repository. */
      trees_url: string;
      /**
       * Format: uri
       * @description The API URL to list the hooks on the repository.
       */
      hooks_url: string;
    };
    "organization-secret-scanning-alert": {
      number?: components["schemas"]["alert-number"];
      created_at?: components["schemas"]["alert-created-at"];
      updated_at?: null | components["schemas"]["alert-updated-at"];
      url?: components["schemas"]["alert-url"];
      html_url?: components["schemas"]["alert-html-url"];
      /**
       * Format: uri
       * @description The REST API URL of the code locations for this alert.
       */
      locations_url?: string;
      state?: components["schemas"]["secret-scanning-alert-state"];
      resolution?: components["schemas"]["secret-scanning-alert-resolution"];
      /**
       * Format: date-time
       * @description The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      resolved_at?: OneOf<[string, null]>;
      resolved_by?: null | components["schemas"]["simple-user"];
      /** @description The type of secret that secret scanning detected. */
      secret_type?: string;
      /**
       * @description User-friendly name for the detected secret, matching the `secret_type`.
       * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/enterprise-server@3.5/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
       */
      secret_type_display_name?: string;
      /** @description The secret that was detected. */
      secret?: string;
      repository?: components["schemas"]["simple-repository"];
    };
    "advanced-security-active-committers-user": {
      user_login: string;
      last_pushed_date: string;
    };
    "advanced-security-active-committers-repository": {
      name: string;
      advanced_security_committers: number;
      advanced_security_committers_breakdown: components["schemas"]["advanced-security-active-committers-user"][];
    };
    "advanced-security-active-committers": {
      total_advanced_security_committers?: number;
      total_count?: number;
      repositories: components["schemas"]["advanced-security-active-committers-repository"][];
    };
    /**
     * Actor
     * @description Actor
     */
    actor: {
      id: number;
      login: string;
      display_login?: string;
      gravatar_id: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: uri */
      avatar_url: string;
    };
    /**
     * Milestone
     * @description A collection of related issues and pull requests.
     */
    milestone: {
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      labels_url: string;
      id: number;
      node_id: string;
      /** @description The number of the milestone. */
      number: number;
      /**
       * @description The state of the milestone.
       * @default open
       * @enum {string}
       */
      state: "open" | "closed";
      /** @description The title of the milestone. */
      title: string;
      description: OneOf<[string, null]>;
      creator: null | components["schemas"]["simple-user"];
      open_issues: number;
      closed_issues: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      closed_at: OneOf<[string, null]>;
      /** Format: date-time */
      due_on: OneOf<[string, null]>;
    };
    /**
     * author_association
     * @description How the author is associated with the repository.
     * @enum {string}
     */
    "author-association":
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Reaction Rollup */
    "reaction-rollup": {
      /** Format: uri */
      url: string;
      total_count: number;
      "+1": number;
      "-1": number;
      laugh: number;
      confused: number;
      heart: number;
      hooray: number;
      eyes: number;
      rocket: number;
    };
    /**
     * Issue
     * @description Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
     */
    issue: {
      /** Format: int64 */
      id: number;
      node_id: string;
      /**
       * Format: uri
       * @description URL for the issue
       */
      url: string;
      /** Format: uri */
      repository_url: string;
      labels_url: string;
      /** Format: uri */
      comments_url: string;
      /** Format: uri */
      events_url: string;
      /** Format: uri */
      html_url: string;
      /** @description Number uniquely identifying the issue within its repository */
      number: number;
      /** @description State of the issue; either 'open' or 'closed' */
      state: string;
      /**
       * @description The reason for the current state
       * @enum {string|null}
       */
      state_reason?: "completed" | "reopened" | "not_planned" | "" | null;
      /** @description Title of the issue */
      title: string;
      /** @description Contents of the issue */
      body?: OneOf<[string, null]>;
      user: null | components["schemas"]["simple-user"];
      /** @description Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository */
      labels: OneOf<
        [
          string,
          {
            /** Format: int64 */
            id?: number;
            node_id?: string;
            /** Format: uri */
            url?: string;
            name?: string;
            description?: OneOf<[string, null]>;
            color?: OneOf<[string, null]>;
            default?: boolean;
          }
        ]
      >[];
      assignee: null | components["schemas"]["simple-user"];
      assignees?: OneOf<[components["schemas"]["simple-user"][], null]>;
      milestone: null | components["schemas"]["milestone"];
      locked: boolean;
      active_lock_reason?: OneOf<[string, null]>;
      comments: number;
      pull_request?: {
        /** Format: date-time */
        merged_at?: OneOf<[string, null]>;
        /** Format: uri */
        diff_url: OneOf<[string, null]>;
        /** Format: uri */
        html_url: OneOf<[string, null]>;
        /** Format: uri */
        patch_url: OneOf<[string, null]>;
        /** Format: uri */
        url: OneOf<[string, null]>;
      };
      /** Format: date-time */
      closed_at: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      draft?: boolean;
      closed_by?: null | components["schemas"]["simple-user"];
      body_html?: string;
      body_text?: string;
      /** Format: uri */
      timeline_url?: string;
      repository?: components["schemas"]["repository"];
      performed_via_github_app?: null | components["schemas"]["integration"];
      author_association: components["schemas"]["author-association"];
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Issue Comment
     * @description Comments provide a way for people to collaborate on an issue.
     */
    "issue-comment": {
      /**
       * Format: int64
       * @description Unique identifier of the issue comment
       */
      id: number;
      node_id: string;
      /**
       * Format: uri
       * @description URL for the issue comment
       */
      url: string;
      /** @description Contents of the issue comment */
      body?: string;
      body_text?: string;
      body_html?: string;
      /** Format: uri */
      html_url: string;
      user: null | components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      issue_url: string;
      author_association: components["schemas"]["author-association"];
      performed_via_github_app?: null | components["schemas"]["integration"];
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Event
     * @description Event
     */
    event: {
      id: string;
      type: OneOf<[string, null]>;
      actor: components["schemas"]["actor"];
      repo: {
        id: number;
        name: string;
        /** Format: uri */
        url: string;
      };
      org?: components["schemas"]["actor"];
      payload: {
        action?: string;
        issue?: components["schemas"]["issue"];
        comment?: components["schemas"]["issue-comment"];
        pages?: {
          page_name?: string;
          title?: string;
          summary?: OneOf<[string, null]>;
          action?: string;
          sha?: string;
          html_url?: string;
        }[];
      };
      public: boolean;
      /** Format: date-time */
      created_at: OneOf<[string, null]>;
    };
    /**
     * Link With Type
     * @description Hypermedia Link with Type
     */
    "link-with-type": {
      href: string;
      type: string;
    };
    /**
     * Feed
     * @description Feed
     */
    feed: {
      timeline_url: string;
      user_url: string;
      current_user_public_url?: string;
      current_user_url?: string;
      current_user_actor_url?: string;
      current_user_organization_url?: string;
      current_user_organization_urls?: string[];
      security_advisories_url?: string;
      /** @description A feed of discussions for a given repository. */
      repository_discussions_url?: string;
      /** @description A feed of discussions for a given repository and category. */
      repository_discussions_category_url?: string;
      _links: {
        timeline: components["schemas"]["link-with-type"];
        user: components["schemas"]["link-with-type"];
        security_advisories?: components["schemas"]["link-with-type"];
        current_user?: components["schemas"]["link-with-type"];
        current_user_public?: components["schemas"]["link-with-type"];
        current_user_actor?: components["schemas"]["link-with-type"];
        current_user_organization?: components["schemas"]["link-with-type"];
        current_user_organizations?: components["schemas"]["link-with-type"][];
        repository_discussions?: components["schemas"]["link-with-type"];
        repository_discussions_category?: components["schemas"]["link-with-type"];
      };
      repository_discussions?: components["schemas"]["link-with-type"];
      repository_discussions_category?: components["schemas"]["link-with-type"];
    };
    /**
     * Base Gist
     * @description Base Gist
     */
    "base-gist": {
      /** Format: uri */
      url: string;
      /** Format: uri */
      forks_url: string;
      /** Format: uri */
      commits_url: string;
      id: string;
      node_id: string;
      /** Format: uri */
      git_pull_url: string;
      /** Format: uri */
      git_push_url: string;
      /** Format: uri */
      html_url: string;
      files: {
        [key: string]:
          | {
              filename?: string;
              type?: string;
              language?: string;
              raw_url?: string;
              size?: number;
            }
          | undefined;
      };
      public: boolean;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      description: OneOf<[string, null]>;
      comments: number;
      user: null | components["schemas"]["simple-user"];
      /** Format: uri */
      comments_url: string;
      owner?: components["schemas"]["simple-user"];
      truncated?: boolean;
      forks?: Record<string, never>[];
      history?: Record<string, never>[];
    };
    /**
     * Public User
     * @description Public User
     */
    "public-user": {
      login: string;
      id: number;
      node_id: string;
      /** Format: uri */
      avatar_url: string;
      gravatar_id: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      /** Format: uri */
      subscriptions_url: string;
      /** Format: uri */
      organizations_url: string;
      /** Format: uri */
      repos_url: string;
      events_url: string;
      /** Format: uri */
      received_events_url: string;
      type: string;
      site_admin: boolean;
      name: OneOf<[string, null]>;
      company: OneOf<[string, null]>;
      blog: OneOf<[string, null]>;
      location: OneOf<[string, null]>;
      /** Format: email */
      email: OneOf<[string, null]>;
      hireable: OneOf<[boolean, null]>;
      bio: OneOf<[string, null]>;
      twitter_username?: OneOf<[string, null]>;
      public_repos: number;
      public_gists: number;
      followers: number;
      following: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      plan?: {
        collaborators: number;
        name: string;
        space: number;
        private_repos: number;
      };
      /** Format: date-time */
      suspended_at?: OneOf<[string, null]>;
      private_gists?: number;
      total_private_repos?: number;
      owned_private_repos?: number;
      disk_usage?: number;
      collaborators?: number;
    };
    /**
     * Gist History
     * @description Gist History
     */
    "gist-history": {
      user?: null | components["schemas"]["simple-user"];
      version?: string;
      /** Format: date-time */
      committed_at?: string;
      change_status?: {
        total?: number;
        additions?: number;
        deletions?: number;
      };
      /** Format: uri */
      url?: string;
    };
    /**
     * Gist Simple
     * @description Gist Simple
     */
    "gist-simple": {
      /** @deprecated */
      forks?: OneOf<
        [
          {
            id?: string;
            /** Format: uri */
            url?: string;
            user?: components["schemas"]["public-user"];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
          }[],
          null
        ]
      >;
      /** @deprecated */
      history?: OneOf<[components["schemas"]["gist-history"][], null]>;
      /**
       * Gist
       * @description Gist
       */
      fork_of?: OneOf<
        [
          {
            /** Format: uri */
            url: string;
            /** Format: uri */
            forks_url: string;
            /** Format: uri */
            commits_url: string;
            id: string;
            node_id: string;
            /** Format: uri */
            git_pull_url: string;
            /** Format: uri */
            git_push_url: string;
            /** Format: uri */
            html_url: string;
            files: {
              [key: string]:
                | {
                    filename?: string;
                    type?: string;
                    language?: string;
                    raw_url?: string;
                    size?: number;
                  }
                | undefined;
            };
            public: boolean;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            description: OneOf<[string, null]>;
            comments: number;
            user: null | components["schemas"]["simple-user"];
            /** Format: uri */
            comments_url: string;
            owner?: null | components["schemas"]["simple-user"];
            truncated?: boolean;
            forks?: Record<string, never>[];
            history?: Record<string, never>[];
          },
          null
        ]
      >;
      url?: string;
      forks_url?: string;
      commits_url?: string;
      id?: string;
      node_id?: string;
      git_pull_url?: string;
      git_push_url?: string;
      html_url?: string;
      files?: {
        [key: string]:
          | OneOf<
              [
                {
                  filename?: string;
                  type?: string;
                  language?: string;
                  raw_url?: string;
                  size?: number;
                  truncated?: boolean;
                  content?: string;
                },
                null
              ]
            >
          | undefined;
      };
      public?: boolean;
      created_at?: string;
      updated_at?: string;
      description?: OneOf<[string, null]>;
      comments?: number;
      user?: OneOf<[string, null]>;
      comments_url?: string;
      owner?: components["schemas"]["simple-user"];
      truncated?: boolean;
    };
    /**
     * Gist Comment
     * @description A comment made to a gist.
     */
    "gist-comment": {
      id: number;
      node_id: string;
      /** Format: uri */
      url: string;
      /** @description The comment text. */
      body: string;
      user: null | components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      author_association: components["schemas"]["author-association"];
    };
    /**
     * Gist Commit
     * @description Gist Commit
     */
    "gist-commit": {
      /** Format: uri */
      url: string;
      version: string;
      user: null | components["schemas"]["simple-user"];
      change_status: {
        total?: number;
        additions?: number;
        deletions?: number;
      };
      /** Format: date-time */
      committed_at: string;
    };
    /**
     * Gitignore Template
     * @description Gitignore Template
     */
    "gitignore-template": {
      name: string;
      source: string;
    };
    /**
     * License
     * @description License
     */
    license: {
      key: string;
      name: string;
      spdx_id: OneOf<[string, null]>;
      /** Format: uri */
      url: OneOf<[string, null]>;
      node_id: string;
      /** Format: uri */
      html_url: string;
      description: string;
      implementation: string;
      permissions: string[];
      conditions: string[];
      limitations: string[];
      body: string;
      featured: boolean;
    };
    /**
     * Api Overview
     * @description Api Overview
     */
    "api-overview": {
      verifiable_password_authentication: boolean;
      packages?: string[];
      dependabot?: string[];
      installed_version?: string;
    };
    /**
     * Minimal Repository
     * @description Minimal Repository
     */
    "minimal-repository": {
      id: number;
      node_id: string;
      name: string;
      full_name: string;
      owner: components["schemas"]["simple-user"];
      private: boolean;
      /** Format: uri */
      html_url: string;
      description: OneOf<[string, null]>;
      fork: boolean;
      /** Format: uri */
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /** Format: uri */
      contributors_url: string;
      /** Format: uri */
      deployments_url: string;
      /** Format: uri */
      downloads_url: string;
      /** Format: uri */
      events_url: string;
      /** Format: uri */
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url?: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      /** Format: uri */
      languages_url: string;
      /** Format: uri */
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url?: string;
      /** Format: uri */
      stargazers_url: string;
      statuses_url: string;
      /** Format: uri */
      subscribers_url: string;
      /** Format: uri */
      subscription_url: string;
      /** Format: uri */
      tags_url: string;
      /** Format: uri */
      teams_url: string;
      trees_url: string;
      clone_url?: string;
      mirror_url?: OneOf<[string, null]>;
      /** Format: uri */
      hooks_url: string;
      svn_url?: string;
      homepage?: OneOf<[string, null]>;
      language?: OneOf<[string, null]>;
      forks_count?: number;
      stargazers_count?: number;
      watchers_count?: number;
      /** @description The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0. */
      size?: number;
      default_branch?: string;
      open_issues_count?: number;
      is_template?: boolean;
      topics?: string[];
      has_issues?: boolean;
      has_projects?: boolean;
      has_wiki?: boolean;
      has_pages?: boolean;
      has_downloads?: boolean;
      archived?: boolean;
      disabled?: boolean;
      visibility?: string;
      /** Format: date-time */
      pushed_at?: OneOf<[string, null]>;
      /** Format: date-time */
      created_at?: OneOf<[string, null]>;
      /** Format: date-time */
      updated_at?: OneOf<[string, null]>;
      permissions?: {
        admin?: boolean;
        maintain?: boolean;
        push?: boolean;
        triage?: boolean;
        pull?: boolean;
      };
      role_name?: string;
      temp_clone_token?: string;
      delete_branch_on_merge?: boolean;
      subscribers_count?: number;
      network_count?: number;
      code_of_conduct?: components["schemas"]["code-of-conduct"];
      license?: OneOf<
        [
          {
            key?: string;
            name?: string;
            spdx_id?: string;
            url?: string;
            node_id?: string;
          },
          null
        ]
      >;
      forks?: number;
      open_issues?: number;
      watchers?: number;
      allow_forking?: boolean;
    };
    /**
     * Thread
     * @description Thread
     */
    thread: {
      id: string;
      repository: components["schemas"]["minimal-repository"];
      subject: {
        title: string;
        url: string;
        latest_comment_url: string;
        type: string;
      };
      reason: string;
      unread: boolean;
      updated_at: string;
      last_read_at: OneOf<[string, null]>;
      url: string;
      subscription_url: string;
    };
    /**
     * Thread Subscription
     * @description Thread Subscription
     */
    "thread-subscription": {
      subscribed: boolean;
      ignored: boolean;
      reason: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: uri */
      thread_url?: string;
      /** Format: uri */
      repository_url?: string;
    };
    /**
     * Organization Custom Repository Role
     * @description Custom repository roles created by organization administrators
     */
    "organization-custom-repository-role": {
      /** @description The unique identifier of the custom role. */
      id: number;
      /** @description The name of the custom role. */
      name: string;
    };
    /**
     * Organization Full
     * @description Organization Full
     */
    "organization-full": {
      login: string;
      id: number;
      node_id: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      repos_url: string;
      /** Format: uri */
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: OneOf<[string, null]>;
      name?: string;
      company?: string;
      /** Format: uri */
      blog?: string;
      location?: string;
      /** Format: email */
      email?: string;
      twitter_username?: OneOf<[string, null]>;
      is_verified?: boolean;
      has_organization_projects: boolean;
      has_repository_projects: boolean;
      public_repos: number;
      public_gists: number;
      followers: number;
      following: number;
      /** Format: uri */
      html_url: string;
      /** Format: date-time */
      created_at: string;
      type: string;
      total_private_repos?: number;
      owned_private_repos?: number;
      private_gists?: OneOf<[number, null]>;
      disk_usage?: OneOf<[number, null]>;
      collaborators?: OneOf<[number, null]>;
      /** Format: email */
      billing_email?: OneOf<[string, null]>;
      plan?: {
        name: string;
        space: number;
        private_repos: number;
        filled_seats?: number;
        seats?: number;
      };
      default_repository_permission?: OneOf<[string, null]>;
      members_can_create_repositories?: OneOf<[boolean, null]>;
      two_factor_requirement_enabled?: OneOf<[boolean, null]>;
      members_allowed_repository_creation_type?: string;
      members_can_create_public_repositories?: boolean;
      members_can_create_private_repositories?: boolean;
      members_can_create_internal_repositories?: boolean;
      members_can_create_pages?: boolean;
      members_can_create_public_pages?: boolean;
      members_can_create_private_pages?: boolean;
      members_can_fork_private_repositories?: OneOf<[boolean, null]>;
      /** Format: date-time */
      updated_at: string;
    };
    /**
     * Actions Cache Usage by repository
     * @description GitHub Actions Cache Usage by repository.
     */
    "actions-cache-usage-by-repository": {
      /** @description The repository owner and name for the cache usage being shown. */
      full_name: string;
      /** @description The sum of the size in bytes of all the active cache items in the repository. */
      active_caches_size_in_bytes: number;
      /** @description The number of active caches in the repository. */
      active_caches_count: number;
    };
    /**
     * @description The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
     * @enum {string}
     */
    "enabled-repositories": "all" | "none" | "selected";
    "actions-organization-permissions": {
      enabled_repositories: components["schemas"]["enabled-repositories"];
      /** @description The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`. */
      selected_repositories_url?: string;
      allowed_actions?: components["schemas"]["allowed-actions"];
      selected_actions_url?: components["schemas"]["selected-actions-url"];
    };
    /**
     * @description The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
     * @enum {string}
     */
    "actions-default-workflow-permissions": "read" | "write";
    /** @description Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. */
    "actions-can-approve-pull-request-reviews": boolean;
    "actions-get-default-workflow-permissions": {
      default_workflow_permissions: components["schemas"]["actions-default-workflow-permissions"];
      can_approve_pull_request_reviews: components["schemas"]["actions-can-approve-pull-request-reviews"];
    };
    "actions-set-default-workflow-permissions": {
      default_workflow_permissions?: components["schemas"]["actions-default-workflow-permissions"];
      can_approve_pull_request_reviews?: components["schemas"]["actions-can-approve-pull-request-reviews"];
    };
    "runner-groups-org": {
      id: number;
      name: string;
      visibility: string;
      default: boolean;
      /** @description Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected` */
      selected_repositories_url?: string;
      runners_url: string;
      inherited: boolean;
      inherited_allows_public_repositories?: boolean;
      allows_public_repositories: boolean;
      /**
       * @description If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
       * @default false
       */
      workflow_restrictions_read_only?: boolean;
      /**
       * @description If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
       * @default false
       */
      restricted_to_workflows?: boolean;
      /** @description List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
      selected_workflows?: string[];
    };
    /**
     * Actions Secret for an Organization
     * @description Secrets for GitHub Actions for an organization.
     */
    "organization-actions-secret": {
      /** @description The name of the secret. */
      name: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /**
       * @description Visibility of a secret
       * @enum {string}
       */
      visibility: "all" | "private" | "selected";
      /** Format: uri */
      selected_repositories_url?: string;
    };
    /**
     * ActionsPublicKey
     * @description The public key used for setting Actions Secrets.
     */
    "actions-public-key": {
      /** @description The identifier for the key. */
      key_id: string;
      /** @description The Base64 encoded public key. */
      key: string;
      id?: number;
      url?: string;
      title?: string;
      created_at?: string;
    };
    /**
     * Empty Object
     * @description An object without any properties.
     */
    "empty-object": Record<string, never>;
    /** @description The name of the tool used to generate the code scanning analysis. */
    "code-scanning-analysis-tool-name": string;
    /** @description The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
    "code-scanning-analysis-tool-guid": OneOf<[string, null]>;
    /**
     * @description State of a code scanning alert.
     * @enum {string}
     */
    "code-scanning-alert-state": "open" | "closed" | "dismissed" | "fixed";
    /**
     * Format: uri
     * @description The REST API URL for fetching the list of instances for an alert.
     */
    readonly "alert-instances-url": string;
    /**
     * Format: date-time
     * @description The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly "alert-fixed-at": OneOf<[string, null]>;
    /**
     * Format: date-time
     * @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly "alert-dismissed-at": OneOf<[string, null]>;
    /**
     * @description **Required when the state is dismissed.** The reason for dismissing or closing the alert.
     * @enum {string|null}
     */
    "code-scanning-alert-dismissed-reason":
      | ""
      | "false positive"
      | "won't fix"
      | "used in tests"
      | null;
    "code-scanning-alert-rule": {
      /** @description A unique identifier for the rule used to detect the alert. */
      id?: OneOf<[string, null]>;
      /** @description The name of the rule used to detect the alert. */
      name?: string;
      /**
       * @description The severity of the alert.
       * @enum {string|null}
       */
      severity?: "none" | "note" | "warning" | "error" | "" | null;
      /**
       * @description The security severity of the alert.
       * @enum {string|null}
       */
      security_severity_level?:
        | "low"
        | "medium"
        | "high"
        | "critical"
        | ""
        | null;
      /** @description A short description of the rule used to detect the alert. */
      description?: string;
      /** @description description of the rule used to detect the alert. */
      full_description?: string;
      /** @description A set of tags applicable for the rule. */
      tags?: OneOf<[string[], null]>;
      /** @description Detailed documentation for the rule as GitHub Flavored Markdown. */
      help?: OneOf<[string, null]>;
      /** @description A link to the documentation for the rule used to detect the alert. */
      help_uri?: OneOf<[string, null]>;
    };
    /** @description The version of the tool used to generate the code scanning analysis. */
    "code-scanning-analysis-tool-version": OneOf<[string, null]>;
    "code-scanning-analysis-tool": {
      name?: components["schemas"]["code-scanning-analysis-tool-name"];
      version?: components["schemas"]["code-scanning-analysis-tool-version"];
      guid?: components["schemas"]["code-scanning-analysis-tool-guid"];
    };
    /**
     * @description The full Git reference, formatted as `refs/heads/<branch name>`,
     * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
     */
    "code-scanning-ref": string;
    /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
    "code-scanning-analysis-analysis-key": string;
    /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
    "code-scanning-alert-environment": string;
    /** @description Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
    "code-scanning-analysis-category": string;
    /** @description Describe a region within a file for the alert. */
    "code-scanning-alert-location": {
      path?: string;
      start_line?: number;
      end_line?: number;
      start_column?: number;
      end_column?: number;
    };
    /**
     * @description A classification of the file. For example to identify it as generated.
     * @enum {string|null}
     */
    "code-scanning-alert-classification":
      | "source"
      | "generated"
      | "test"
      | "library"
      | ""
      | null;
    "code-scanning-alert-instance": {
      ref?: components["schemas"]["code-scanning-ref"];
      analysis_key?: components["schemas"]["code-scanning-analysis-analysis-key"];
      environment?: components["schemas"]["code-scanning-alert-environment"];
      category?: components["schemas"]["code-scanning-analysis-category"];
      state?: components["schemas"]["code-scanning-alert-state"];
      commit_sha?: string;
      message?: {
        text?: string;
      };
      location?: components["schemas"]["code-scanning-alert-location"];
      html_url?: string;
      /**
       * @description Classifications that have been applied to the file that triggered the alert.
       * For example identifying it as documentation, or a generated file.
       */
      classifications?: components["schemas"]["code-scanning-alert-classification"][];
    };
    "code-scanning-organization-alert-items": {
      number: components["schemas"]["alert-number"];
      created_at: components["schemas"]["alert-created-at"];
      updated_at?: components["schemas"]["alert-updated-at"];
      url: components["schemas"]["alert-url"];
      html_url: components["schemas"]["alert-html-url"];
      instances_url: components["schemas"]["alert-instances-url"];
      state: components["schemas"]["code-scanning-alert-state"];
      fixed_at?: components["schemas"]["alert-fixed-at"];
      dismissed_by: null | components["schemas"]["simple-user"];
      dismissed_at: components["schemas"]["alert-dismissed-at"];
      dismissed_reason: components["schemas"]["code-scanning-alert-dismissed-reason"];
      rule: components["schemas"]["code-scanning-alert-rule"];
      tool: components["schemas"]["code-scanning-analysis-tool"];
      most_recent_instance: components["schemas"]["code-scanning-alert-instance"];
      repository: components["schemas"]["simple-repository"];
    };
    /**
     * Dependabot Secret for an Organization
     * @description Secrets for GitHub Dependabot for an organization.
     */
    "organization-dependabot-secret": {
      /** @description The name of the secret. */
      name: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /**
       * @description Visibility of a secret
       * @enum {string}
       */
      visibility: "all" | "private" | "selected";
      /** Format: uri */
      selected_repositories_url?: string;
    };
    /**
     * DependabotPublicKey
     * @description The public key used for setting Dependabot Secrets.
     */
    "dependabot-public-key": {
      /** @description The identifier for the key. */
      key_id: string;
      /** @description The Base64 encoded public key. */
      key: string;
    };
    /**
     * Org Hook
     * @description Org Hook
     */
    "org-hook": {
      id: number;
      /** Format: uri */
      url: string;
      /** Format: uri */
      ping_url: string;
      /** Format: uri */
      deliveries_url?: string;
      name: string;
      events: string[];
      active: boolean;
      config: {
        url?: string;
        insecure_ssl?: string;
        content_type?: string;
        secret?: string;
      };
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      created_at: string;
      type: string;
    };
    /**
     * Org Membership
     * @description Org Membership
     */
    "org-membership": {
      /** Format: uri */
      url: string;
      /**
       * @description The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
       * @enum {string}
       */
      state: "active" | "pending";
      /**
       * @description The user's membership type in the organization.
       * @enum {string}
       */
      role: "admin" | "member" | "billing_manager";
      /** Format: uri */
      organization_url: string;
      organization: components["schemas"]["organization-simple"];
      user: null | components["schemas"]["simple-user"];
      permissions?: {
        can_create_repository: boolean;
      };
    };
    /**
     * Migration
     * @description A migration.
     */
    migration: {
      id: number;
      owner: null | components["schemas"]["simple-user"];
      guid: string;
      state: string;
      lock_repositories: boolean;
      exclude_metadata: boolean;
      exclude_git_data: boolean;
      exclude_attachments: boolean;
      exclude_releases: boolean;
      exclude_owner_projects: boolean;
      org_metadata_only: boolean;
      /** @description The repositories included in the migration. Only returned for export migrations. */
      repositories: components["schemas"]["repository"][];
      /** Format: uri */
      url: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      node_id: string;
      /** Format: uri */
      archive_url?: string;
      /** @description Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`. */
      exclude?: string[];
    };
    "org-pre-receive-hook": {
      id?: number;
      name?: string;
      enforcement?: string;
      configuration_url?: string;
      allow_downstream_configuration?: boolean;
    };
    /**
     * Project
     * @description Projects are a way to organize columns and cards of work.
     */
    project: {
      /** Format: uri */
      owner_url: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      columns_url: string;
      id: number;
      node_id: string;
      /** @description Name of the project */
      name: string;
      /** @description Body of the project */
      body: OneOf<[string, null]>;
      number: number;
      /** @description State of the project; either 'open' or 'closed' */
      state: string;
      creator: null | components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /**
       * @description The baseline permission that all organization members have on this project. Only present if owner is an organization.
       * @enum {string}
       */
      organization_permission?: "read" | "write" | "admin" | "none";
      /** @description Whether or not this project can be seen by everyone. Only present if owner is an organization. */
      private?: boolean;
    };
    /**
     * Team Simple
     * @description Groups of organization members that gives permissions on specified repositories.
     */
    "team-simple": {
      /** @description Unique identifier of the team */
      id: number;
      node_id: string;
      /**
       * Format: uri
       * @description URL for the team
       */
      url: string;
      members_url: string;
      /** @description Name of the team */
      name: string;
      /** @description Description of the team */
      description: OneOf<[string, null]>;
      /** @description Permission that the team will have for its repositories */
      permission: string;
      /** @description The level of privacy this team should have */
      privacy?: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      repositories_url: string;
      slug: string;
      /** @description Distinguished Name (DN) that team maps to within LDAP environment */
      ldap_dn?: string;
    };
    /**
     * Team
     * @description Groups of organization members that gives permissions on specified repositories.
     */
    team: {
      id: number;
      node_id: string;
      name: string;
      slug: string;
      description: OneOf<[string, null]>;
      privacy?: string;
      permission: string;
      permissions?: {
        pull: boolean;
        triage: boolean;
        push: boolean;
        maintain: boolean;
        admin: boolean;
      };
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      members_url: string;
      /** Format: uri */
      repositories_url: string;
      parent: null | components["schemas"]["team-simple"];
    };
    /**
     * Team Organization
     * @description Team Organization
     */
    "team-organization": {
      login: string;
      id: number;
      node_id: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      repos_url: string;
      /** Format: uri */
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: OneOf<[string, null]>;
      name?: string;
      company?: string;
      /** Format: uri */
      blog?: string;
      location?: string;
      /** Format: email */
      email?: string;
      twitter_username?: OneOf<[string, null]>;
      is_verified?: boolean;
      has_organization_projects: boolean;
      has_repository_projects: boolean;
      public_repos: number;
      public_gists: number;
      followers: number;
      following: number;
      /** Format: uri */
      html_url: string;
      /** Format: date-time */
      created_at: string;
      type: string;
      total_private_repos?: number;
      owned_private_repos?: number;
      private_gists?: OneOf<[number, null]>;
      disk_usage?: OneOf<[number, null]>;
      collaborators?: OneOf<[number, null]>;
      /** Format: email */
      billing_email?: OneOf<[string, null]>;
      plan?: {
        name: string;
        space: number;
        private_repos: number;
        filled_seats?: number;
        seats?: number;
      };
      default_repository_permission?: OneOf<[string, null]>;
      members_can_create_repositories?: OneOf<[boolean, null]>;
      two_factor_requirement_enabled?: OneOf<[boolean, null]>;
      members_allowed_repository_creation_type?: string;
      members_can_create_public_repositories?: boolean;
      members_can_create_private_repositories?: boolean;
      members_can_create_internal_repositories?: boolean;
      members_can_create_pages?: boolean;
      members_can_create_public_pages?: boolean;
      members_can_create_private_pages?: boolean;
      members_can_fork_private_repositories?: OneOf<[boolean, null]>;
      /** Format: date-time */
      updated_at: string;
    };
    /**
     * Full Team
     * @description Groups of organization members that gives permissions on specified repositories.
     */
    "team-full": {
      /** @description Unique identifier of the team */
      id: number;
      node_id: string;
      /**
       * Format: uri
       * @description URL for the team
       */
      url: string;
      /** Format: uri */
      html_url: string;
      /** @description Name of the team */
      name: string;
      slug: string;
      description: OneOf<[string, null]>;
      /**
       * @description The level of privacy this team should have
       * @enum {string}
       */
      privacy?: "closed" | "secret";
      /** @description Permission that the team will have for its repositories */
      permission: string;
      members_url: string;
      /** Format: uri */
      repositories_url: string;
      parent?: null | components["schemas"]["team-simple"];
      members_count: number;
      repos_count: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      organization: components["schemas"]["team-organization"];
      /** @description Distinguished Name (DN) that team maps to within LDAP environment */
      ldap_dn?: string;
    };
    /**
     * Team Discussion
     * @description A team discussion is a persistent record of a free-form conversation within a team.
     */
    "team-discussion": {
      author: null | components["schemas"]["simple-user"];
      /** @description The main text of the discussion. */
      body: string;
      body_html: string;
      /** @description The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
      body_version: string;
      comments_count: number;
      /** Format: uri */
      comments_url: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      last_edited_at: OneOf<[string, null]>;
      /** Format: uri */
      html_url: string;
      node_id: string;
      /** @description The unique sequence number of a team discussion. */
      number: number;
      /** @description Whether or not this discussion should be pinned for easy retrieval. */
      pinned: boolean;
      /** @description Whether or not this discussion should be restricted to team members and organization administrators. */
      private: boolean;
      /** Format: uri */
      team_url: string;
      /** @description The title of the discussion. */
      title: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      url: string;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Team Discussion Comment
     * @description A reply to a discussion within a team.
     */
    "team-discussion-comment": {
      author: null | components["schemas"]["simple-user"];
      /** @description The main text of the comment. */
      body: string;
      body_html: string;
      /** @description The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
      body_version: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      last_edited_at: OneOf<[string, null]>;
      /** Format: uri */
      discussion_url: string;
      /** Format: uri */
      html_url: string;
      node_id: string;
      /** @description The unique sequence number of a team discussion comment. */
      number: number;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      url: string;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Reaction
     * @description Reactions to conversations provide a way to help people express their feelings more simply and effectively.
     */
    reaction: {
      id: number;
      node_id: string;
      user: null | components["schemas"]["simple-user"];
      /**
       * @description The reaction to use
       * @enum {string}
       */
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes";
      /** Format: date-time */
      created_at: string;
    };
    /**
     * Team Membership
     * @description Team Membership
     */
    "team-membership": {
      /** Format: uri */
      url: string;
      /**
       * @description The role of the user in the team.
       * @default member
       * @enum {string}
       */
      role: "member" | "maintainer";
      /**
       * @description The state of the user's membership in the team.
       * @enum {string}
       */
      state: "active" | "pending";
    };
    /**
     * Team Project
     * @description A team's access to a project.
     */
    "team-project": {
      owner_url: string;
      url: string;
      html_url: string;
      columns_url: string;
      id: number;
      node_id: string;
      name: string;
      body: OneOf<[string, null]>;
      number: number;
      state: string;
      creator: components["schemas"]["simple-user"];
      created_at: string;
      updated_at: string;
      /** @description The organization permission for this project. Only present when owner is an organization. */
      organization_permission?: string;
      /** @description Whether the project is private or not. Only present when owner is an organization. */
      private?: boolean;
      permissions: {
        read: boolean;
        write: boolean;
        admin: boolean;
      };
    };
    /**
     * Team Repository
     * @description A team's access to a repository.
     */
    "team-repository": {
      /** @description Unique identifier of the repository */
      id: number;
      node_id: string;
      /** @description The name of the repository. */
      name: string;
      full_name: string;
      license: null | components["schemas"]["license-simple"];
      forks: number;
      permissions?: {
        admin: boolean;
        pull: boolean;
        triage?: boolean;
        push: boolean;
        maintain?: boolean;
      };
      role_name?: string;
      owner: null | components["schemas"]["simple-user"];
      /**
       * @description Whether the repository is private or public.
       * @default false
       */
      private: boolean;
      /** Format: uri */
      html_url: string;
      description: OneOf<[string, null]>;
      fork: boolean;
      /** Format: uri */
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /** Format: uri */
      contributors_url: string;
      /** Format: uri */
      deployments_url: string;
      /** Format: uri */
      downloads_url: string;
      /** Format: uri */
      events_url: string;
      /** Format: uri */
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      /** Format: uri */
      languages_url: string;
      /** Format: uri */
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url: string;
      /** Format: uri */
      stargazers_url: string;
      statuses_url: string;
      /** Format: uri */
      subscribers_url: string;
      /** Format: uri */
      subscription_url: string;
      /** Format: uri */
      tags_url: string;
      /** Format: uri */
      teams_url: string;
      trees_url: string;
      clone_url: string;
      /** Format: uri */
      mirror_url: OneOf<[string, null]>;
      /** Format: uri */
      hooks_url: string;
      /** Format: uri */
      svn_url: string;
      /** Format: uri */
      homepage: OneOf<[string, null]>;
      language: OneOf<[string, null]>;
      forks_count: number;
      stargazers_count: number;
      watchers_count: number;
      size: number;
      /** @description The default branch of the repository. */
      default_branch: string;
      open_issues_count: number;
      /**
       * @description Whether this repository acts as a template that can be used to generate new repositories.
       * @default false
       */
      is_template?: boolean;
      topics?: string[];
      /**
       * @description Whether issues are enabled.
       * @default true
       */
      has_issues: boolean;
      /**
       * @description Whether projects are enabled.
       * @default true
       */
      has_projects: boolean;
      /**
       * @description Whether the wiki is enabled.
       * @default true
       */
      has_wiki: boolean;
      has_pages: boolean;
      /**
       * @description Whether downloads are enabled.
       * @default true
       */
      has_downloads: boolean;
      /**
       * @description Whether the repository is archived.
       * @default false
       */
      archived: boolean;
      /** @description Returns whether or not this repository disabled. */
      disabled: boolean;
      /**
       * @description The repository visibility: public, private, or internal.
       * @default public
       */
      visibility?: string;
      /** Format: date-time */
      pushed_at: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: OneOf<[string, null]>;
      /** Format: date-time */
      updated_at: OneOf<[string, null]>;
      /**
       * @description Whether to allow rebase merges for pull requests.
       * @default true
       */
      allow_rebase_merge?: boolean;
      template_repository?: null | components["schemas"]["repository"];
      temp_clone_token?: string;
      /**
       * @description Whether to allow squash merges for pull requests.
       * @default true
       */
      allow_squash_merge?: boolean;
      /**
       * @description Whether to allow Auto-merge to be used on pull requests.
       * @default false
       */
      allow_auto_merge?: boolean;
      /**
       * @description Whether to delete head branches when pull requests are merged
       * @default false
       */
      delete_branch_on_merge?: boolean;
      /**
       * @description Whether to allow merge commits for pull requests.
       * @default true
       */
      allow_merge_commit?: boolean;
      /**
       * @description Whether to allow forking this repo
       * @default false
       */
      allow_forking?: boolean;
      subscribers_count?: number;
      network_count?: number;
      open_issues: number;
      watchers: number;
      master_branch?: string;
    };
    /**
     * Project Card
     * @description Project cards represent a scope of work.
     */
    "project-card": {
      /** Format: uri */
      url: string;
      /** @description The project card's ID */
      id: number;
      node_id: string;
      note: OneOf<[string, null]>;
      creator: null | components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** @description Whether or not the card is archived */
      archived?: boolean;
      column_name?: string;
      project_id?: string;
      /** Format: uri */
      column_url: string;
      /** Format: uri */
      content_url?: string;
      /** Format: uri */
      project_url: string;
    };
    /**
     * Project Column
     * @description Project columns contain cards of work.
     */
    "project-column": {
      /** Format: uri */
      url: string;
      /** Format: uri */
      project_url: string;
      /** Format: uri */
      cards_url: string;
      /** @description The unique identifier of the project column */
      id: number;
      node_id: string;
      /** @description Name of the project column */
      name: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    /**
     * Project Collaborator Permission
     * @description Project Collaborator Permission
     */
    "project-collaborator-permission": {
      permission: string;
      user: null | components["schemas"]["simple-user"];
    };
    /** Rate Limit */
    "rate-limit": {
      limit: number;
      remaining: number;
      reset: number;
      used: number;
    };
    /**
     * Rate Limit Overview
     * @description Rate Limit Overview
     */
    "rate-limit-overview": {
      resources: {
        core: components["schemas"]["rate-limit"];
        graphql?: components["schemas"]["rate-limit"];
        search: components["schemas"]["rate-limit"];
        source_import?: components["schemas"]["rate-limit"];
        integration_manifest?: components["schemas"]["rate-limit"];
        code_scanning_upload?: components["schemas"]["rate-limit"];
        actions_runner_registration?: components["schemas"]["rate-limit"];
        scim?: components["schemas"]["rate-limit"];
      };
      rate: components["schemas"]["rate-limit"];
    };
    /**
     * Code Of Conduct Simple
     * @description Code of Conduct Simple
     */
    "code-of-conduct-simple": {
      /** Format: uri */
      url: string;
      key: string;
      name: string;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
    };
    "security-and-analysis": OneOf<
      [
        {
          advanced_security?: {
            /** @enum {string} */
            status?: "enabled" | "disabled";
          };
          secret_scanning?: {
            /** @enum {string} */
            status?: "enabled" | "disabled";
          };
          secret_scanning_push_protection?: {
            /** @enum {string} */
            status?: "enabled" | "disabled";
          };
        },
        null
      ]
    >;
    /**
     * Full Repository
     * @description Full Repository
     */
    "full-repository": {
      id: number;
      node_id: string;
      name: string;
      full_name: string;
      owner: components["schemas"]["simple-user"];
      private: boolean;
      /** Format: uri */
      html_url: string;
      description: OneOf<[string, null]>;
      fork: boolean;
      /** Format: uri */
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /** Format: uri */
      contributors_url: string;
      /** Format: uri */
      deployments_url: string;
      /** Format: uri */
      downloads_url: string;
      /** Format: uri */
      events_url: string;
      /** Format: uri */
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      /** Format: uri */
      languages_url: string;
      /** Format: uri */
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url: string;
      /** Format: uri */
      stargazers_url: string;
      statuses_url: string;
      /** Format: uri */
      subscribers_url: string;
      /** Format: uri */
      subscription_url: string;
      /** Format: uri */
      tags_url: string;
      /** Format: uri */
      teams_url: string;
      trees_url: string;
      clone_url: string;
      /** Format: uri */
      mirror_url: OneOf<[string, null]>;
      /** Format: uri */
      hooks_url: string;
      /** Format: uri */
      svn_url: string;
      /** Format: uri */
      homepage: OneOf<[string, null]>;
      language: OneOf<[string, null]>;
      forks_count: number;
      stargazers_count: number;
      watchers_count: number;
      /** @description The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0. */
      size: number;
      default_branch: string;
      open_issues_count: number;
      is_template?: boolean;
      topics?: string[];
      has_issues: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_pages: boolean;
      has_downloads: boolean;
      archived: boolean;
      /** @description Returns whether or not this repository disabled. */
      disabled: boolean;
      /** @description The repository visibility: public, private, or internal. */
      visibility?: string;
      /** Format: date-time */
      pushed_at: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        push: boolean;
        triage?: boolean;
        pull: boolean;
      };
      allow_rebase_merge?: boolean;
      template_repository?: null | components["schemas"]["repository"];
      temp_clone_token?: OneOf<[string, null]>;
      allow_squash_merge?: boolean;
      allow_auto_merge?: boolean;
      delete_branch_on_merge?: boolean;
      allow_merge_commit?: boolean;
      allow_update_branch?: boolean;
      allow_forking?: boolean;
      subscribers_count: number;
      network_count: number;
      license: null | components["schemas"]["license-simple"];
      organization?: null | components["schemas"]["simple-user"];
      parent?: components["schemas"]["repository"];
      source?: components["schemas"]["repository"];
      forks: number;
      master_branch?: string;
      open_issues: number;
      watchers: number;
      /**
       * @description Whether anonymous git access is allowed.
       * @default true
       */
      anonymous_access_enabled?: boolean;
      code_of_conduct?: components["schemas"]["code-of-conduct-simple"];
      security_and_analysis?: components["schemas"]["security-and-analysis"];
    };
    /**
     * Artifact
     * @description An artifact
     */
    artifact: {
      id: number;
      node_id: string;
      /** @description The name of the artifact. */
      name: string;
      /** @description The size in bytes of the artifact. */
      size_in_bytes: number;
      url: string;
      archive_download_url: string;
      /** @description Whether or not the artifact has expired. */
      expired: boolean;
      /** Format: date-time */
      created_at: OneOf<[string, null]>;
      /** Format: date-time */
      expires_at: OneOf<[string, null]>;
      /** Format: date-time */
      updated_at: OneOf<[string, null]>;
      workflow_run?: OneOf<
        [
          {
            id?: number;
            repository_id?: number;
            head_repository_id?: number;
            head_branch?: string;
            head_sha?: string;
          },
          null
        ]
      >;
    };
    /**
     * Actions cache usage policy for repository
     * @description GitHub Actions cache usage policy for repository.
     */
    "actions-cache-usage-policy-for-repository": {
      /** @description The size limit for the sum of all caches, in gigabytes. */
      repo_cache_size_limit_in_gb: number;
    };
    /**
     * Job
     * @description Information of a job execution in a workflow run
     */
    job: {
      /** @description The id of the job. */
      id: number;
      /** @description The id of the associated workflow run. */
      run_id: number;
      run_url: string;
      /** @description Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run. */
      run_attempt?: number;
      node_id: string;
      /** @description The SHA of the commit that is being run. */
      head_sha: string;
      url: string;
      html_url: OneOf<[string, null]>;
      /**
       * @description The phase of the lifecycle that the job is currently in.
       * @enum {string}
       */
      status: "queued" | "in_progress" | "completed";
      /**
       * @description The outcome of the job.
       * @enum {string|null}
       */
      conclusion:
        | "success"
        | "failure"
        | "neutral"
        | "cancelled"
        | "skipped"
        | "timed_out"
        | "action_required"
        | ""
        | null;
      /**
       * Format: date-time
       * @description The time that the job started, in ISO 8601 format.
       */
      started_at: string;
      /**
       * Format: date-time
       * @description The time that the job finished, in ISO 8601 format.
       */
      completed_at: OneOf<[string, null]>;
      /** @description The name of the job. */
      name: string;
      /** @description Steps in this job. */
      steps?: {
        /**
         * @description The phase of the lifecycle that the job is currently in.
         * @enum {string}
         */
        status: "queued" | "in_progress" | "completed";
        /** @description The outcome of the job. */
        conclusion: OneOf<[string, null]>;
        /** @description The name of the job. */
        name: string;
        number: number;
        /**
         * Format: date-time
         * @description The time that the step started, in ISO 8601 format.
         */
        started_at?: OneOf<[string, null]>;
        /**
         * Format: date-time
         * @description The time that the job finished, in ISO 8601 format.
         */
        completed_at?: OneOf<[string, null]>;
      }[];
      check_run_url: string;
      /** @description Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file. */
      labels: string[];
      /** @description The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
      runner_id: OneOf<[number, null]>;
      /** @description The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
      runner_name: OneOf<[string, null]>;
      /** @description The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
      runner_group_id: OneOf<[number, null]>;
      /** @description The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
      runner_group_name: OneOf<[string, null]>;
    };
    /** @description Whether GitHub Actions is enabled on the repository. */
    "actions-enabled": boolean;
    "actions-repository-permissions": {
      enabled: components["schemas"]["actions-enabled"];
      allowed_actions?: components["schemas"]["allowed-actions"];
      selected_actions_url?: components["schemas"]["selected-actions-url"];
    };
    "actions-workflow-access-to-repository": {
      /**
       * @description Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
       * repository.
       *
       * `none` means the access is only possible from workflows in this repository. `organization` level access allows sharing across the organization. `enterprise` level access allows sharing across the enterprise.
       * @enum {string}
       */
      access_level: "none" | "organization" | "enterprise";
    };
    /** Pull Request Minimal */
    "pull-request-minimal": {
      id: number;
      number: number;
      url: string;
      head: {
        ref: string;
        sha: string;
        repo: {
          id: number;
          url: string;
          name: string;
        };
      };
      base: {
        ref: string;
        sha: string;
        repo: {
          id: number;
          url: string;
          name: string;
        };
      };
    };
    /**
     * Simple Commit
     * @description A commit.
     */
    "simple-commit": {
      id: string;
      tree_id: string;
      message: string;
      /** Format: date-time */
      timestamp: string;
      author: OneOf<
        [
          {
            name: string;
            email: string;
          },
          null
        ]
      >;
      committer: OneOf<
        [
          {
            name: string;
            email: string;
          },
          null
        ]
      >;
    };
    /**
     * Workflow Run
     * @description An invocation of a workflow
     */
    "workflow-run": {
      /** @description The ID of the workflow run. */
      id: number;
      /** @description The name of the workflow run. */
      name?: OneOf<[string, null]>;
      node_id: string;
      /** @description The ID of the associated check suite. */
      check_suite_id?: number;
      /** @description The node ID of the associated check suite. */
      check_suite_node_id?: string;
      head_branch: OneOf<[string, null]>;
      /** @description The SHA of the head commit that points to the version of the workflow being run. */
      head_sha: string;
      /** @description The auto incrementing run number for the workflow run. */
      run_number: number;
      /** @description Attempt number of the run, 1 for first attempt and higher if the workflow was re-run. */
      run_attempt?: number;
      event: string;
      status: OneOf<[string, null]>;
      conclusion: OneOf<[string, null]>;
      /** @description The ID of the parent workflow. */
      workflow_id: number;
      /** @description The URL to the workflow run. */
      url: string;
      html_url: string;
      pull_requests: OneOf<
        [components["schemas"]["pull-request-minimal"][], null]
      >;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      actor?: components["schemas"]["simple-user"];
      triggering_actor?: components["schemas"]["simple-user"];
      /**
       * Format: date-time
       * @description The start time of the latest run. Resets on re-run.
       */
      run_started_at?: string;
      /** @description The URL to the jobs for the workflow run. */
      jobs_url: string;
      /** @description The URL to download the logs for the workflow run. */
      logs_url: string;
      /** @description The URL to the associated check suite. */
      check_suite_url: string;
      /** @description The URL to the artifacts for the workflow run. */
      artifacts_url: string;
      /** @description The URL to cancel the workflow run. */
      cancel_url: string;
      /** @description The URL to rerun the workflow run. */
      rerun_url: string;
      /** @description The URL to the previous attempted run of this workflow, if one exists. */
      previous_attempt_url?: OneOf<[string, null]>;
      /** @description The URL to the workflow. */
      workflow_url: string;
      head_commit: null | components["schemas"]["simple-commit"];
      repository: components["schemas"]["minimal-repository"];
      head_repository: components["schemas"]["minimal-repository"];
      head_repository_id?: number;
    };
    /**
     * Environment Approval
     * @description An entry in the reviews log for environment deployments
     */
    "environment-approvals": {
      /** @description The list of environments that were approved or rejected */
      environments: {
        /** @description The id of the environment. */
        id?: number;
        node_id?: string;
        /** @description The name of the environment. */
        name?: string;
        url?: string;
        html_url?: string;
        /**
         * Format: date-time
         * @description The time that the environment was created, in ISO 8601 format.
         */
        created_at?: string;
        /**
         * Format: date-time
         * @description The time that the environment was last updated, in ISO 8601 format.
         */
        updated_at?: string;
      }[];
      /**
       * @description Whether deployment to the environment(s) was approved or rejected or pending (with comments)
       * @enum {string}
       */
      state: "approved" | "rejected" | "pending";
      user: components["schemas"]["simple-user"];
      /** @description The comment submitted with the deployment review */
      comment: string;
    };
    /**
     * @description The type of reviewer.
     * @enum {string}
     */
    "deployment-reviewer-type": "User" | "Team";
    /**
     * Pending Deployment
     * @description Details of a deployment that is waiting for protection rules to pass
     */
    "pending-deployment": {
      environment: {
        /** @description The id of the environment. */
        id?: number;
        node_id?: string;
        /** @description The name of the environment. */
        name?: string;
        url?: string;
        html_url?: string;
      };
      /** @description The set duration of the wait timer */
      wait_timer: number;
      /**
       * Format: date-time
       * @description The time that the wait timer began.
       */
      wait_timer_started_at: OneOf<[string, null]>;
      /** @description Whether the currently authenticated user can approve the deployment */
      current_user_can_approve: boolean;
      /** @description The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
      reviewers: {
        type?: components["schemas"]["deployment-reviewer-type"];
        reviewer?:
          | components["schemas"]["simple-user"]
          | components["schemas"]["team"];
      }[];
    };
    /**
     * Deployment
     * @description A request for a specific ref(branch,sha,tag) to be deployed
     */
    deployment: {
      /** Format: uri */
      url: string;
      /** @description Unique identifier of the deployment */
      id: number;
      node_id: string;
      sha: string;
      /** @description The ref to deploy. This can be a branch, tag, or sha. */
      ref: string;
      /** @description Parameter to specify a task to execute */
      task: string;
      payload: OneOf<
        [
          {
            [key: string]: unknown | undefined;
          },
          string
        ]
      >;
      original_environment?: string;
      /** @description Name for the target deployment environment. */
      environment: string;
      description: OneOf<[string, null]>;
      creator: null | components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      statuses_url: string;
      /** Format: uri */
      repository_url: string;
      /** @description Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
      transient_environment?: boolean;
      /** @description Specifies if the given environment is one that end-users directly interact with. Default: false. */
      production_environment?: boolean;
      performed_via_github_app?: null | components["schemas"]["integration"];
    };
    /**
     * Actions Secret
     * @description Set secrets for GitHub Actions.
     */
    "actions-secret": {
      /** @description The name of the secret. */
      name: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    /**
     * Workflow
     * @description A GitHub Actions workflow
     */
    workflow: {
      id: number;
      node_id: string;
      name: string;
      path: string;
      /** @enum {string} */
      state:
        | "active"
        | "deleted"
        | "disabled_fork"
        | "disabled_inactivity"
        | "disabled_manually";
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      url: string;
      html_url: string;
      badge_url: string;
      /** Format: date-time */
      deleted_at?: string;
    };
    /**
     * Autolink reference
     * @description An autolink reference.
     */
    autolink: {
      id: number;
      /** @description The prefix of a key that is linkified. */
      key_prefix: string;
      /** @description A template for the target URL that is generated if a key was found. */
      url_template: string;
    };
    /**
     * Protected Branch Required Status Check
     * @description Protected Branch Required Status Check
     */
    "protected-branch-required-status-check": {
      url?: string;
      enforcement_level?: string;
      contexts: string[];
      checks: {
        context: string;
        app_id: OneOf<[number, null]>;
      }[];
      contexts_url?: string;
      strict?: boolean;
    };
    /**
     * Protected Branch Admin Enforced
     * @description Protected Branch Admin Enforced
     */
    "protected-branch-admin-enforced": {
      /** Format: uri */
      url: string;
      enabled: boolean;
    };
    /**
     * Protected Branch Pull Request Review
     * @description Protected Branch Pull Request Review
     */
    "protected-branch-pull-request-review": {
      /** Format: uri */
      url?: string;
      dismissal_restrictions?: {
        /** @description The list of users with review dismissal access. */
        users?: components["schemas"]["simple-user"][];
        /** @description The list of teams with review dismissal access. */
        teams?: components["schemas"]["team"][];
        /** @description The list of apps with review dismissal access. */
        apps?: components["schemas"]["integration"][];
        url?: string;
        users_url?: string;
        teams_url?: string;
      };
      /** @description Allow specific users, teams, or apps to bypass pull request requirements. */
      bypass_pull_request_allowances?: {
        /** @description The list of users allowed to bypass pull request requirements. */
        users?: components["schemas"]["simple-user"][];
        /** @description The list of teams allowed to bypass pull request requirements. */
        teams?: components["schemas"]["team"][];
        /** @description The list of apps allowed to bypass pull request requirements. */
        apps?: components["schemas"]["integration"][];
      };
      dismiss_stale_reviews: boolean;
      require_code_owner_reviews: boolean;
      required_approving_review_count?: number;
    };
    /**
     * Branch Restriction Policy
     * @description Branch Restriction Policy
     */
    "branch-restriction-policy": {
      /** Format: uri */
      url: string;
      /** Format: uri */
      users_url: string;
      /** Format: uri */
      teams_url: string;
      /** Format: uri */
      apps_url: string;
      users: {
        login?: string;
        id?: number;
        node_id?: string;
        avatar_url?: string;
        gravatar_id?: string;
        url?: string;
        html_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        starred_url?: string;
        subscriptions_url?: string;
        organizations_url?: string;
        repos_url?: string;
        events_url?: string;
        received_events_url?: string;
        type?: string;
        site_admin?: boolean;
      }[];
      teams: {
        id?: number;
        node_id?: string;
        url?: string;
        html_url?: string;
        name?: string;
        slug?: string;
        description?: OneOf<[string, null]>;
        privacy?: string;
        permission?: string;
        members_url?: string;
        repositories_url?: string;
        parent?: OneOf<[string, null]>;
      }[];
      apps: {
        id?: number;
        slug?: string;
        node_id?: string;
        owner?: {
          login?: string;
          id?: number;
          node_id?: string;
          url?: string;
          repos_url?: string;
          events_url?: string;
          hooks_url?: string;
          issues_url?: string;
          members_url?: string;
          public_members_url?: string;
          avatar_url?: string;
          description?: string;
          gravatar_id?: string;
          html_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          starred_url?: string;
          subscriptions_url?: string;
          organizations_url?: string;
          received_events_url?: string;
          type?: string;
          site_admin?: boolean;
        };
        name?: string;
        description?: string;
        external_url?: string;
        html_url?: string;
        created_at?: string;
        updated_at?: string;
        permissions?: {
          metadata?: string;
          contents?: string;
          issues?: string;
          single_file?: string;
        };
        events?: string[];
      }[];
    };
    /**
     * Branch Protection
     * @description Branch Protection
     */
    "branch-protection": {
      url?: string;
      enabled?: boolean;
      required_status_checks?: components["schemas"]["protected-branch-required-status-check"];
      enforce_admins?: components["schemas"]["protected-branch-admin-enforced"];
      required_pull_request_reviews?: components["schemas"]["protected-branch-pull-request-review"];
      restrictions?: components["schemas"]["branch-restriction-policy"];
      required_linear_history?: {
        enabled?: boolean;
      };
      allow_force_pushes?: {
        enabled?: boolean;
      };
      allow_deletions?: {
        enabled?: boolean;
      };
      block_creations?: {
        enabled?: boolean;
      };
      required_conversation_resolution?: {
        enabled?: boolean;
      };
      name?: string;
      protection_url?: string;
      required_signatures?: {
        /** Format: uri */
        url: string;
        enabled: boolean;
      };
    };
    /**
     * Short Branch
     * @description Short Branch
     */
    "short-branch": {
      name: string;
      commit: {
        sha: string;
        /** Format: uri */
        url: string;
      };
      protected: boolean;
      protection?: components["schemas"]["branch-protection"];
      /** Format: uri */
      protection_url?: string;
    };
    /**
     * Git User
     * @description Metaproperties for Git author/committer information.
     */
    "git-user": {
      name?: string;
      email?: string;
      date?: string;
    };
    /** Verification */
    verification: {
      verified: boolean;
      reason: string;
      payload: OneOf<[string, null]>;
      signature: OneOf<[string, null]>;
    };
    /**
     * Diff Entry
     * @description Diff Entry
     */
    "diff-entry": {
      sha: string;
      filename: string;
      /** @enum {string} */
      status:
        | "added"
        | "removed"
        | "modified"
        | "renamed"
        | "copied"
        | "changed"
        | "unchanged";
      additions: number;
      deletions: number;
      changes: number;
      /** Format: uri */
      blob_url: string;
      /** Format: uri */
      raw_url: string;
      /** Format: uri */
      contents_url: string;
      patch?: string;
      previous_filename?: string;
    };
    /**
     * Commit
     * @description Commit
     */
    commit: {
      /** Format: uri */
      url: string;
      sha: string;
      node_id: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      comments_url: string;
      commit: {
        /** Format: uri */
        url: string;
        author: null | components["schemas"]["git-user"];
        committer: null | components["schemas"]["git-user"];
        message: string;
        comment_count: number;
        tree: {
          sha: string;
          /** Format: uri */
          url: string;
        };
        verification?: components["schemas"]["verification"];
      };
      author: null | components["schemas"]["simple-user"];
      committer: null | components["schemas"]["simple-user"];
      parents: {
        sha: string;
        /** Format: uri */
        url: string;
        /** Format: uri */
        html_url?: string;
      }[];
      stats?: {
        additions?: number;
        deletions?: number;
        total?: number;
      };
      files?: components["schemas"]["diff-entry"][];
    };
    /**
     * Branch With Protection
     * @description Branch With Protection
     */
    "branch-with-protection": {
      name: string;
      commit: components["schemas"]["commit"];
      _links: {
        html: string;
        /** Format: uri */
        self: string;
      };
      protected: boolean;
      protection: components["schemas"]["branch-protection"];
      /** Format: uri */
      protection_url: string;
      pattern?: string;
      required_approving_review_count?: number;
    };
    /**
     * Status Check Policy
     * @description Status Check Policy
     */
    "status-check-policy": {
      /** Format: uri */
      url: string;
      strict: boolean;
      contexts: string[];
      checks: {
        context: string;
        app_id: OneOf<[number, null]>;
      }[];
      /** Format: uri */
      contexts_url: string;
    };
    /**
     * Protected Branch
     * @description Branch protections protect branches
     */
    "protected-branch": {
      /** Format: uri */
      url: string;
      required_status_checks?: components["schemas"]["status-check-policy"];
      required_pull_request_reviews?: {
        /** Format: uri */
        url: string;
        dismiss_stale_reviews?: boolean;
        require_code_owner_reviews?: boolean;
        required_approving_review_count?: number;
        dismissal_restrictions?: {
          /** Format: uri */
          url: string;
          /** Format: uri */
          users_url: string;
          /** Format: uri */
          teams_url: string;
          users: components["schemas"]["simple-user"][];
          teams: components["schemas"]["team"][];
          apps?: components["schemas"]["integration"][];
        };
        bypass_pull_request_allowances?: {
          users: components["schemas"]["simple-user"][];
          teams: components["schemas"]["team"][];
          apps?: components["schemas"]["integration"][];
        };
      };
      required_signatures?: {
        /** Format: uri */
        url: string;
        enabled: boolean;
      };
      enforce_admins?: {
        /** Format: uri */
        url: string;
        enabled: boolean;
      };
      required_linear_history?: {
        enabled: boolean;
      };
      allow_force_pushes?: {
        enabled: boolean;
      };
      allow_deletions?: {
        enabled: boolean;
      };
      restrictions?: components["schemas"]["branch-restriction-policy"];
      required_conversation_resolution?: {
        enabled?: boolean;
      };
      block_creations?: {
        enabled: boolean;
      };
    };
    /**
     * Deployment
     * @description A deployment created as the result of an Actions check run from a workflow that references an environment
     */
    "deployment-simple": {
      /** Format: uri */
      url: string;
      /** @description Unique identifier of the deployment */
      id: number;
      node_id: string;
      /** @description Parameter to specify a task to execute */
      task: string;
      original_environment?: string;
      /** @description Name for the target deployment environment. */
      environment: string;
      description: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      statuses_url: string;
      /** Format: uri */
      repository_url: string;
      /** @description Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
      transient_environment?: boolean;
      /** @description Specifies if the given environment is one that end-users directly interact with. Default: false. */
      production_environment?: boolean;
      performed_via_github_app?: null | components["schemas"]["integration"];
    };
    /**
     * CheckRun
     * @description A check performed on the code of a given code change
     */
    "check-run": {
      /** @description The id of the check. */
      id: number;
      /** @description The SHA of the commit that is being checked. */
      head_sha: string;
      node_id: string;
      external_id: OneOf<[string, null]>;
      url: string;
      html_url: OneOf<[string, null]>;
      details_url: OneOf<[string, null]>;
      /**
       * @description The phase of the lifecycle that the check is currently in.
       * @enum {string}
       */
      status: "queued" | "in_progress" | "completed";
      /** @enum {string|null} */
      conclusion:
        | "success"
        | "failure"
        | "neutral"
        | "cancelled"
        | "skipped"
        | "timed_out"
        | "action_required"
        | ""
        | null;
      /** Format: date-time */
      started_at: OneOf<[string, null]>;
      /** Format: date-time */
      completed_at: OneOf<[string, null]>;
      output: {
        title: OneOf<[string, null]>;
        summary: OneOf<[string, null]>;
        text: OneOf<[string, null]>;
        annotations_count: number;
        /** Format: uri */
        annotations_url: string;
      };
      /** @description The name of the check. */
      name: string;
      check_suite: OneOf<
        [
          {
            id: number;
          },
          null
        ]
      >;
      app: null | components["schemas"]["integration"];
      pull_requests: components["schemas"]["pull-request-minimal"][];
      deployment?: components["schemas"]["deployment-simple"];
    };
    /**
     * Check Annotation
     * @description Check Annotation
     */
    "check-annotation": {
      path: string;
      start_line: number;
      end_line: number;
      start_column: OneOf<[number, null]>;
      end_column: OneOf<[number, null]>;
      annotation_level: OneOf<[string, null]>;
      title: OneOf<[string, null]>;
      message: OneOf<[string, null]>;
      raw_details: OneOf<[string, null]>;
      blob_href: string;
    };
    /**
     * CheckSuite
     * @description A suite of checks performed on the code of a given code change
     */
    "check-suite": {
      id: number;
      node_id: string;
      head_branch: OneOf<[string, null]>;
      /** @description The SHA of the head commit that is being checked. */
      head_sha: string;
      /** @enum {string|null} */
      status: "queued" | "in_progress" | "completed" | "" | null;
      /** @enum {string|null} */
      conclusion:
        | "success"
        | "failure"
        | "neutral"
        | "cancelled"
        | "skipped"
        | "timed_out"
        | "action_required"
        | "startup_failure"
        | "stale"
        | ""
        | null;
      url: OneOf<[string, null]>;
      before: OneOf<[string, null]>;
      after: OneOf<[string, null]>;
      pull_requests: OneOf<
        [components["schemas"]["pull-request-minimal"][], null]
      >;
      app: null | components["schemas"]["integration"];
      repository: components["schemas"]["minimal-repository"];
      /** Format: date-time */
      created_at: OneOf<[string, null]>;
      /** Format: date-time */
      updated_at: OneOf<[string, null]>;
      head_commit: components["schemas"]["simple-commit"];
      latest_check_runs_count: number;
      check_runs_url: string;
      rerequestable?: boolean;
      runs_rerequestable?: boolean;
    };
    /**
     * Check Suite Preference
     * @description Check suite configuration preferences for a repository.
     */
    "check-suite-preference": {
      preferences: {
        auto_trigger_checks?: {
          app_id: number;
          setting: boolean;
        }[];
      };
      repository: components["schemas"]["minimal-repository"];
    };
    "code-scanning-alert-rule-summary": {
      /** @description A unique identifier for the rule used to detect the alert. */
      id?: OneOf<[string, null]>;
      /** @description The name of the rule used to detect the alert. */
      name?: string;
      /** @description A set of tags applicable for the rule. */
      tags?: OneOf<[string[], null]>;
      /**
       * @description The severity of the alert.
       * @enum {string|null}
       */
      severity?: "none" | "note" | "warning" | "error" | "" | null;
      /** @description A short description of the rule used to detect the alert. */
      description?: string;
    };
    "code-scanning-alert-items": {
      number: components["schemas"]["alert-number"];
      created_at: components["schemas"]["alert-created-at"];
      updated_at?: components["schemas"]["alert-updated-at"];
      url: components["schemas"]["alert-url"];
      html_url: components["schemas"]["alert-html-url"];
      instances_url: components["schemas"]["alert-instances-url"];
      state: components["schemas"]["code-scanning-alert-state"];
      fixed_at?: components["schemas"]["alert-fixed-at"];
      dismissed_by: null | components["schemas"]["simple-user"];
      dismissed_at: components["schemas"]["alert-dismissed-at"];
      dismissed_reason: components["schemas"]["code-scanning-alert-dismissed-reason"];
      rule: components["schemas"]["code-scanning-alert-rule-summary"];
      tool: components["schemas"]["code-scanning-analysis-tool"];
      most_recent_instance: components["schemas"]["code-scanning-alert-instance"];
    };
    "code-scanning-alert": {
      number: components["schemas"]["alert-number"];
      created_at: components["schemas"]["alert-created-at"];
      updated_at?: components["schemas"]["alert-updated-at"];
      url: components["schemas"]["alert-url"];
      html_url: components["schemas"]["alert-html-url"];
      instances_url: components["schemas"]["alert-instances-url"];
      state: components["schemas"]["code-scanning-alert-state"];
      fixed_at?: components["schemas"]["alert-fixed-at"];
      dismissed_by: null | components["schemas"]["simple-user"];
      dismissed_at: components["schemas"]["alert-dismissed-at"];
      dismissed_reason: components["schemas"]["code-scanning-alert-dismissed-reason"];
      rule: components["schemas"]["code-scanning-alert-rule"];
      tool: components["schemas"]["code-scanning-analysis-tool"];
      most_recent_instance: components["schemas"]["code-scanning-alert-instance"];
    };
    /**
     * @description Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
     * @enum {string}
     */
    "code-scanning-alert-set-state": "open" | "dismissed";
    /** @description An identifier for the upload. */
    "code-scanning-analysis-sarif-id": string;
    /** @description The SHA of the commit to which the analysis you are uploading relates. */
    "code-scanning-analysis-commit-sha": string;
    /** @description Identifies the variable values associated with the environment in which this analysis was performed. */
    "code-scanning-analysis-environment": string;
    /**
     * Format: date-time
     * @description The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly "code-scanning-analysis-created-at": string;
    /**
     * Format: uri
     * @description The REST API URL of the analysis resource.
     */
    readonly "code-scanning-analysis-url": string;
    "code-scanning-analysis": {
      ref: components["schemas"]["code-scanning-ref"];
      commit_sha: components["schemas"]["code-scanning-analysis-commit-sha"];
      analysis_key: components["schemas"]["code-scanning-analysis-analysis-key"];
      environment: components["schemas"]["code-scanning-analysis-environment"];
      category?: components["schemas"]["code-scanning-analysis-category"];
      error: string;
      created_at: components["schemas"]["code-scanning-analysis-created-at"];
      /** @description The total number of results in the analysis. */
      results_count: number;
      /** @description The total number of rules used in the analysis. */
      rules_count: number;
      /** @description Unique identifier for this analysis. */
      id: number;
      url: components["schemas"]["code-scanning-analysis-url"];
      sarif_id: components["schemas"]["code-scanning-analysis-sarif-id"];
      tool: components["schemas"]["code-scanning-analysis-tool"];
      deletable: boolean;
      /** @description Warning generated when processing the analysis */
      warning: string;
    };
    /**
     * Analysis deletion
     * @description Successful deletion of a code scanning analysis
     */
    "code-scanning-analysis-deletion": {
      /**
       * Format: uri
       * @description Next deletable analysis in chain, without last analysis deletion confirmation
       */
      next_analysis_url: OneOf<[string, null]>;
      /**
       * Format: uri
       * @description Next deletable analysis in chain, with last analysis deletion confirmation
       */
      confirm_delete_url: OneOf<[string, null]>;
    };
    /** @description A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.5/code-security/secure-coding/sarif-support-for-code-scanning)." */
    "code-scanning-analysis-sarif-file": string;
    "code-scanning-sarifs-receipt": {
      id?: components["schemas"]["code-scanning-analysis-sarif-id"];
      /**
       * Format: uri
       * @description The REST API URL for checking the status of the upload.
       */
      url?: string;
    };
    "code-scanning-sarifs-status": {
      /**
       * @description `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
       * @enum {string}
       */
      processing_status?: "pending" | "complete" | "failed";
      /**
       * Format: uri
       * @description The REST API URL for getting the analyses associated with the upload.
       */
      analyses_url?: OneOf<[string, null]>;
      /** @description Any errors that ocurred during processing of the delivery. */
      errors?: OneOf<[readonly string[], null]>;
    };
    /**
     * CODEOWNERS errors
     * @description A list of errors found in a repo's CODEOWNERS file
     */
    "codeowners-errors": {
      errors: {
        /** @description The line number where this errors occurs. */
        line: number;
        /** @description The column number where this errors occurs. */
        column: number;
        /** @description The contents of the line where the error occurs. */
        source?: string;
        /** @description The type of error. */
        kind: string;
        /** @description Suggested action to fix the error. This will usually be `null`, but is provided for some common errors. */
        suggestion?: OneOf<[string, null]>;
        /** @description A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting). */
        message: string;
        /** @description The path of the file where the error occured. */
        path: string;
      }[];
    };
    /**
     * Collaborator
     * @description Collaborator
     */
    collaborator: {
      login: string;
      id: number;
      email?: OneOf<[string, null]>;
      name?: OneOf<[string, null]>;
      node_id: string;
      /** Format: uri */
      avatar_url: string;
      gravatar_id: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      /** Format: uri */
      subscriptions_url: string;
      /** Format: uri */
      organizations_url: string;
      /** Format: uri */
      repos_url: string;
      events_url: string;
      /** Format: uri */
      received_events_url: string;
      type: string;
      site_admin: boolean;
      permissions?: {
        pull: boolean;
        triage?: boolean;
        push: boolean;
        maintain?: boolean;
        admin: boolean;
      };
      role_name?: string;
    };
    /**
     * Repository Invitation
     * @description Repository invitations let you manage who you collaborate with.
     */
    "repository-invitation": {
      /** @description Unique identifier of the repository invitation. */
      id: number;
      repository: components["schemas"]["minimal-repository"];
      invitee: null | components["schemas"]["simple-user"];
      inviter: null | components["schemas"]["simple-user"];
      /**
       * @description The permission associated with the invitation.
       * @enum {string}
       */
      permissions: "read" | "write" | "admin" | "triage" | "maintain";
      /** Format: date-time */
      created_at: string;
      /** @description Whether or not the invitation has expired */
      expired?: boolean;
      /** @description URL for the repository invitation */
      url: string;
      html_url: string;
      node_id: string;
    };
    /**
     * Repository Collaborator Permission
     * @description Repository Collaborator Permission
     */
    "repository-collaborator-permission": {
      permission: string;
      role_name: string;
      user: null | components["schemas"]["collaborator"];
    };
    /**
     * Commit Comment
     * @description Commit Comment
     */
    "commit-comment": {
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      url: string;
      id: number;
      node_id: string;
      body: string;
      path: OneOf<[string, null]>;
      position: OneOf<[number, null]>;
      line: OneOf<[number, null]>;
      commit_id: string;
      user: null | components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      author_association: components["schemas"]["author-association"];
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Branch Short
     * @description Branch Short
     */
    "branch-short": {
      name: string;
      commit: {
        sha: string;
        url: string;
      };
      protected: boolean;
    };
    /**
     * Link
     * @description Hypermedia Link
     */
    link: {
      href: string;
    };
    /**
     * Auto merge
     * @description The status of auto merging a pull request.
     */
    "auto-merge": OneOf<
      [
        {
          enabled_by: components["schemas"]["simple-user"];
          /**
           * @description The merge method to use.
           * @enum {string}
           */
          merge_method: "merge" | "squash" | "rebase";
          /** @description Title for the merge commit message. */
          commit_title: string;
          /** @description Commit message for the merge commit. */
          commit_message: string;
        },
        null
      ]
    >;
    /**
     * Pull Request Simple
     * @description Pull Request Simple
     */
    "pull-request-simple": {
      /** Format: uri */
      url: string;
      id: number;
      node_id: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      diff_url: string;
      /** Format: uri */
      patch_url: string;
      /** Format: uri */
      issue_url: string;
      /** Format: uri */
      commits_url: string;
      /** Format: uri */
      review_comments_url: string;
      review_comment_url: string;
      /** Format: uri */
      comments_url: string;
      /** Format: uri */
      statuses_url: string;
      number: number;
      state: string;
      locked: boolean;
      title: string;
      user: null | components["schemas"]["simple-user"];
      body: OneOf<[string, null]>;
      labels: {
        /** Format: int64 */
        id: number;
        node_id: string;
        url: string;
        name: string;
        description: string;
        color: string;
        default: boolean;
      }[];
      milestone: null | components["schemas"]["milestone"];
      active_lock_reason?: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      closed_at: OneOf<[string, null]>;
      /** Format: date-time */
      merged_at: OneOf<[string, null]>;
      merge_commit_sha: OneOf<[string, null]>;
      assignee: null | components["schemas"]["simple-user"];
      assignees?: OneOf<[components["schemas"]["simple-user"][], null]>;
      requested_reviewers?: OneOf<
        [components["schemas"]["simple-user"][], null]
      >;
      requested_teams?: OneOf<[components["schemas"]["team"][], null]>;
      head: {
        label: string;
        ref: string;
        repo: components["schemas"]["repository"];
        sha: string;
        user: null | components["schemas"]["simple-user"];
      };
      base: {
        label: string;
        ref: string;
        repo: components["schemas"]["repository"];
        sha: string;
        user: null | components["schemas"]["simple-user"];
      };
      _links: {
        comments: components["schemas"]["link"];
        commits: components["schemas"]["link"];
        statuses: components["schemas"]["link"];
        html: components["schemas"]["link"];
        issue: components["schemas"]["link"];
        review_comments: components["schemas"]["link"];
        review_comment: components["schemas"]["link"];
        self: components["schemas"]["link"];
      };
      author_association: components["schemas"]["author-association"];
      auto_merge: components["schemas"]["auto-merge"];
      /** @description Indicates whether or not the pull request is a draft. */
      draft?: boolean;
    };
    /** Simple Commit Status */
    "simple-commit-status": {
      description: OneOf<[string, null]>;
      id: number;
      node_id: string;
      state: string;
      context: string;
      /** Format: uri */
      target_url: OneOf<[string, null]>;
      required?: OneOf<[boolean, null]>;
      /** Format: uri */
      avatar_url: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    /**
     * Combined Commit Status
     * @description Combined Commit Status
     */
    "combined-commit-status": {
      state: string;
      statuses: components["schemas"]["simple-commit-status"][];
      sha: string;
      total_count: number;
      repository: components["schemas"]["minimal-repository"];
      /** Format: uri */
      commit_url: string;
      /** Format: uri */
      url: string;
    };
    /**
     * Status
     * @description The status of a commit.
     */
    status: {
      url: string;
      avatar_url: OneOf<[string, null]>;
      id: number;
      node_id: string;
      state: string;
      description: OneOf<[string, null]>;
      target_url: OneOf<[string, null]>;
      context: string;
      created_at: string;
      updated_at: string;
      creator: null | components["schemas"]["simple-user"];
    };
    /**
     * Commit Comparison
     * @description Commit Comparison
     */
    "commit-comparison": {
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      permalink_url: string;
      /** Format: uri */
      diff_url: string;
      /** Format: uri */
      patch_url: string;
      base_commit: components["schemas"]["commit"];
      merge_base_commit: components["schemas"]["commit"];
      /** @enum {string} */
      status: "diverged" | "ahead" | "behind" | "identical";
      ahead_by: number;
      behind_by: number;
      total_commits: number;
      commits: components["schemas"]["commit"][];
      files?: components["schemas"]["diff-entry"][];
    };
    /**
     * Content Tree
     * @description Content Tree
     */
    "content-tree": {
      type: string;
      size: number;
      name: string;
      path: string;
      sha: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      git_url: OneOf<[string, null]>;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
      /** Format: uri */
      download_url: OneOf<[string, null]>;
      entries?: {
        type: string;
        size: number;
        name: string;
        path: string;
        content?: string;
        sha: string;
        /** Format: uri */
        url: string;
        /** Format: uri */
        git_url: OneOf<[string, null]>;
        /** Format: uri */
        html_url: OneOf<[string, null]>;
        /** Format: uri */
        download_url: OneOf<[string, null]>;
        _links: {
          /** Format: uri */
          git: OneOf<[string, null]>;
          /** Format: uri */
          html: OneOf<[string, null]>;
          /** Format: uri */
          self: string;
        };
      }[];
      _links: {
        /** Format: uri */
        git: OneOf<[string, null]>;
        /** Format: uri */
        html: OneOf<[string, null]>;
        /** Format: uri */
        self: string;
      };
    };
    /**
     * Content Directory
     * @description A list of directory items
     */
    "content-directory": {
      /** @enum {string} */
      type: "dir" | "file" | "submodule" | "symlink";
      size: number;
      name: string;
      path: string;
      content?: string;
      sha: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      git_url: OneOf<[string, null]>;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
      /** Format: uri */
      download_url: OneOf<[string, null]>;
      _links: {
        /** Format: uri */
        git: OneOf<[string, null]>;
        /** Format: uri */
        html: OneOf<[string, null]>;
        /** Format: uri */
        self: string;
      };
    }[];
    /**
     * Content File
     * @description Content File
     */
    "content-file": {
      /** @enum {string} */
      type: "file";
      encoding: string;
      size: number;
      name: string;
      path: string;
      content: string;
      sha: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      git_url: OneOf<[string, null]>;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
      /** Format: uri */
      download_url: OneOf<[string, null]>;
      _links: {
        /** Format: uri */
        git: OneOf<[string, null]>;
        /** Format: uri */
        html: OneOf<[string, null]>;
        /** Format: uri */
        self: string;
      };
      target?: string;
      submodule_git_url?: string;
    };
    /**
     * Symlink Content
     * @description An object describing a symlink
     */
    "content-symlink": {
      /** @enum {string} */
      type: "symlink";
      target: string;
      size: number;
      name: string;
      path: string;
      sha: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      git_url: OneOf<[string, null]>;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
      /** Format: uri */
      download_url: OneOf<[string, null]>;
      _links: {
        /** Format: uri */
        git: OneOf<[string, null]>;
        /** Format: uri */
        html: OneOf<[string, null]>;
        /** Format: uri */
        self: string;
      };
    };
    /**
     * Submodule Content
     * @description An object describing a submodule
     */
    "content-submodule": {
      /** @enum {string} */
      type: "submodule";
      /** Format: uri */
      submodule_git_url: string;
      size: number;
      name: string;
      path: string;
      sha: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      git_url: OneOf<[string, null]>;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
      /** Format: uri */
      download_url: OneOf<[string, null]>;
      _links: {
        /** Format: uri */
        git: OneOf<[string, null]>;
        /** Format: uri */
        html: OneOf<[string, null]>;
        /** Format: uri */
        self: string;
      };
    };
    /**
     * File Commit
     * @description File Commit
     */
    "file-commit": {
      content: OneOf<
        [
          {
            name?: string;
            path?: string;
            sha?: string;
            size?: number;
            url?: string;
            html_url?: string;
            git_url?: string;
            download_url?: string;
            type?: string;
            _links?: {
              self?: string;
              git?: string;
              html?: string;
            };
          },
          null
        ]
      >;
      commit: {
        sha?: string;
        node_id?: string;
        url?: string;
        html_url?: string;
        author?: {
          date?: string;
          name?: string;
          email?: string;
        };
        committer?: {
          date?: string;
          name?: string;
          email?: string;
        };
        message?: string;
        tree?: {
          url?: string;
          sha?: string;
        };
        parents?: {
          url?: string;
          html_url?: string;
          sha?: string;
        }[];
        verification?: {
          verified?: boolean;
          reason?: string;
          signature?: OneOf<[string, null]>;
          payload?: OneOf<[string, null]>;
        };
      };
    };
    /**
     * Contributor
     * @description Contributor
     */
    contributor: {
      login?: string;
      id?: number;
      node_id?: string;
      /** Format: uri */
      avatar_url?: string;
      gravatar_id?: OneOf<[string, null]>;
      /** Format: uri */
      url?: string;
      /** Format: uri */
      html_url?: string;
      /** Format: uri */
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      /** Format: uri */
      subscriptions_url?: string;
      /** Format: uri */
      organizations_url?: string;
      /** Format: uri */
      repos_url?: string;
      events_url?: string;
      /** Format: uri */
      received_events_url?: string;
      type: string;
      site_admin?: boolean;
      contributions: number;
      email?: string;
      name?: string;
    };
    /**
     * Dependabot Secret
     * @description Set secrets for Dependabot.
     */
    "dependabot-secret": {
      /** @description The name of the secret. */
      name: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    /**
     * Deployment Status
     * @description The status of a deployment.
     */
    "deployment-status": {
      /** Format: uri */
      url: string;
      id: number;
      node_id: string;
      /**
       * @description The state of the status.
       * @enum {string}
       */
      state:
        | "error"
        | "failure"
        | "inactive"
        | "pending"
        | "success"
        | "queued"
        | "in_progress";
      creator: null | components["schemas"]["simple-user"];
      /**
       * @description A short description of the status.
       * @default
       */
      description: string;
      /**
       * @description The environment of the deployment that the status is for.
       * @default
       */
      environment?: string;
      /**
       * Format: uri
       * @description Deprecated: the URL to associate with this status.
       * @default
       */
      target_url: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      deployment_url: string;
      /** Format: uri */
      repository_url: string;
      /**
       * Format: uri
       * @description The URL for accessing your environment.
       * @default
       */
      environment_url?: string;
      /**
       * Format: uri
       * @description The URL to associate with this status.
       * @default
       */
      log_url?: string;
      performed_via_github_app?: null | components["schemas"]["integration"];
    };
    /** @description The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days). */
    "wait-timer": number;
    /** @description The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
    "deployment-branch-policy-settings": OneOf<
      [
        {
          /** @description Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`. */
          protected_branches: boolean;
          /** @description Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`. */
          custom_branch_policies: boolean;
        },
        null
      ]
    >;
    /**
     * Environment
     * @description Details of a deployment environment
     */
    environment: {
      /** @description The id of the environment. */
      id: number;
      node_id: string;
      /** @description The name of the environment. */
      name: string;
      url: string;
      html_url: string;
      /**
       * Format: date-time
       * @description The time that the environment was created, in ISO 8601 format.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description The time that the environment was last updated, in ISO 8601 format.
       */
      updated_at: string;
      /** @description Built-in deployment protection rules for the environment. */
      protection_rules?: (
        | {
            id: number;
            node_id: string;
            type: string;
            wait_timer?: components["schemas"]["wait-timer"];
          }
        | {
            id: number;
            node_id: string;
            type: string;
            /** @description The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
            reviewers?: {
              type?: components["schemas"]["deployment-reviewer-type"];
              reviewer?:
                | components["schemas"]["simple-user"]
                | components["schemas"]["team"];
            }[];
          }
        | {
            id: number;
            node_id: string;
            type: string;
          }
      )[];
      deployment_branch_policy?: components["schemas"]["deployment-branch-policy-settings"];
    };
    /**
     * Deployment branch policy
     * @description Details of a deployment branch policy.
     */
    "deployment-branch-policy": {
      /** @description The unique identifier of the branch policy. */
      id?: number;
      node_id?: string;
      /** @description The name pattern that branches must match in order to deploy to the environment. */
      name?: string;
    };
    /** Deployment branch policy name pattern */
    "deployment-branch-policy-name-pattern": {
      /**
       * @description The name pattern that branches must match in order to deploy to the environment.
       *
       * Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*\/*`.
       * For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
       */
      name: string;
    };
    /**
     * Short Blob
     * @description Short Blob
     */
    "short-blob": {
      url: string;
      sha: string;
    };
    /**
     * Blob
     * @description Blob
     */
    blob: {
      content: string;
      encoding: string;
      /** Format: uri */
      url: string;
      sha: string;
      size: OneOf<[number, null]>;
      node_id: string;
      highlighted_content?: string;
    };
    /**
     * Git Commit
     * @description Low-level Git commit operations within a repository
     */
    "git-commit": {
      /** @description SHA for the commit */
      sha: string;
      node_id: string;
      /** Format: uri */
      url: string;
      /** @description Identifying information for the git-user */
      author: {
        /**
         * Format: date-time
         * @description Timestamp of the commit
         */
        date: string;
        /** @description Git email address of the user */
        email: string;
        /** @description Name of the git user */
        name: string;
      };
      /** @description Identifying information for the git-user */
      committer: {
        /**
         * Format: date-time
         * @description Timestamp of the commit
         */
        date: string;
        /** @description Git email address of the user */
        email: string;
        /** @description Name of the git user */
        name: string;
      };
      /** @description Message describing the purpose of the commit */
      message: string;
      tree: {
        /** @description SHA for the commit */
        sha: string;
        /** Format: uri */
        url: string;
      };
      parents: {
        /** @description SHA for the commit */
        sha: string;
        /** Format: uri */
        url: string;
        /** Format: uri */
        html_url: string;
      }[];
      verification: {
        verified: boolean;
        reason: string;
        signature: OneOf<[string, null]>;
        payload: OneOf<[string, null]>;
      };
      /** Format: uri */
      html_url: string;
    };
    /**
     * Git Reference
     * @description Git references within a repository
     */
    "git-ref": {
      ref: string;
      node_id: string;
      /** Format: uri */
      url: string;
      object: {
        type: string;
        /** @description SHA for the reference */
        sha: string;
        /** Format: uri */
        url: string;
      };
    };
    /**
     * Git Tag
     * @description Metadata for a Git tag
     */
    "git-tag": {
      node_id: string;
      /** @description Name of the tag */
      tag: string;
      sha: string;
      /**
       * Format: uri
       * @description URL for the tag
       */
      url: string;
      /** @description Message describing the purpose of the tag */
      message: string;
      tagger: {
        date: string;
        email: string;
        name: string;
      };
      object: {
        sha: string;
        type: string;
        /** Format: uri */
        url: string;
      };
      verification?: components["schemas"]["verification"];
    };
    /**
     * Git Tree
     * @description The hierarchy between files in a Git repository.
     */
    "git-tree": {
      sha: string;
      /** Format: uri */
      url: string;
      truncated: boolean;
      /** @description Objects specifying a tree structure */
      tree: {
        path?: string;
        mode?: string;
        type?: string;
        sha?: string;
        size?: number;
        url?: string;
      }[];
    };
    /** Hook Response */
    "hook-response": {
      code: OneOf<[number, null]>;
      status: OneOf<[string, null]>;
      message: OneOf<[string, null]>;
    };
    /**
     * Webhook
     * @description Webhooks for repositories.
     */
    hook: {
      type: string;
      /** @description Unique identifier of the webhook. */
      id: number;
      /** @description The name of a valid service, use 'web' for a webhook. */
      name: string;
      /** @description Determines whether the hook is actually triggered on pushes. */
      active: boolean;
      /** @description Determines what events the hook is triggered for. Default: ['push']. */
      events: string[];
      config: {
        email?: string;
        password?: string;
        room?: string;
        subdomain?: string;
        url?: components["schemas"]["webhook-config-url"];
        insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
        content_type?: components["schemas"]["webhook-config-content-type"];
        digest?: string;
        secret?: components["schemas"]["webhook-config-secret"];
        token?: string;
      };
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      created_at: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      test_url: string;
      /** Format: uri */
      ping_url: string;
      /** Format: uri */
      deliveries_url?: string;
      last_response: components["schemas"]["hook-response"];
    };
    /**
     * Issue Event Label
     * @description Issue Event Label
     */
    "issue-event-label": {
      name: OneOf<[string, null]>;
      color: OneOf<[string, null]>;
    };
    /** Issue Event Dismissed Review */
    "issue-event-dismissed-review": {
      state: string;
      review_id: number;
      dismissal_message: OneOf<[string, null]>;
      dismissal_commit_id?: OneOf<[string, null]>;
    };
    /**
     * Issue Event Milestone
     * @description Issue Event Milestone
     */
    "issue-event-milestone": {
      title: string;
    };
    /**
     * Issue Event Project Card
     * @description Issue Event Project Card
     */
    "issue-event-project-card": {
      /** Format: uri */
      url: string;
      id: number;
      /** Format: uri */
      project_url: string;
      project_id: number;
      column_name: string;
      previous_column_name?: string;
    };
    /**
     * Issue Event Rename
     * @description Issue Event Rename
     */
    "issue-event-rename": {
      from: string;
      to: string;
    };
    /**
     * Issue Event
     * @description Issue Event
     */
    "issue-event": {
      /** Format: int64 */
      id: number;
      node_id: string;
      /** Format: uri */
      url: string;
      actor: null | components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: string;
      issue?: null | components["schemas"]["issue"];
      label?: components["schemas"]["issue-event-label"];
      assignee?: null | components["schemas"]["simple-user"];
      assigner?: null | components["schemas"]["simple-user"];
      review_requester?: null | components["schemas"]["simple-user"];
      requested_reviewer?: null | components["schemas"]["simple-user"];
      requested_team?: components["schemas"]["team"];
      dismissed_review?: components["schemas"]["issue-event-dismissed-review"];
      milestone?: components["schemas"]["issue-event-milestone"];
      project_card?: components["schemas"]["issue-event-project-card"];
      rename?: components["schemas"]["issue-event-rename"];
      author_association?: components["schemas"]["author-association"];
      lock_reason?: OneOf<[string, null]>;
      performed_via_github_app?: null | components["schemas"]["integration"];
    };
    /**
     * Labeled Issue Event
     * @description Labeled Issue Event
     */
    "labeled-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      label: {
        name: string;
        color: string;
      };
    };
    /**
     * Unlabeled Issue Event
     * @description Unlabeled Issue Event
     */
    "unlabeled-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      label: {
        name: string;
        color: string;
      };
    };
    /**
     * Assigned Issue Event
     * @description Assigned Issue Event
     */
    "assigned-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: components["schemas"]["integration"];
      assignee: components["schemas"]["simple-user"];
      assigner: components["schemas"]["simple-user"];
    };
    /**
     * Unassigned Issue Event
     * @description Unassigned Issue Event
     */
    "unassigned-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      assignee: components["schemas"]["simple-user"];
      assigner: components["schemas"]["simple-user"];
    };
    /**
     * Milestoned Issue Event
     * @description Milestoned Issue Event
     */
    "milestoned-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      milestone: {
        title: string;
      };
    };
    /**
     * Demilestoned Issue Event
     * @description Demilestoned Issue Event
     */
    "demilestoned-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      milestone: {
        title: string;
      };
    };
    /**
     * Renamed Issue Event
     * @description Renamed Issue Event
     */
    "renamed-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      rename: {
        from: string;
        to: string;
      };
    };
    /**
     * Review Requested Issue Event
     * @description Review Requested Issue Event
     */
    "review-requested-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      review_requester: components["schemas"]["simple-user"];
      requested_team?: components["schemas"]["team"];
      requested_reviewer?: components["schemas"]["simple-user"];
    };
    /**
     * Review Request Removed Issue Event
     * @description Review Request Removed Issue Event
     */
    "review-request-removed-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      review_requester: components["schemas"]["simple-user"];
      requested_team?: components["schemas"]["team"];
      requested_reviewer?: components["schemas"]["simple-user"];
    };
    /**
     * Review Dismissed Issue Event
     * @description Review Dismissed Issue Event
     */
    "review-dismissed-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      dismissed_review: {
        state: string;
        review_id: number;
        dismissal_message: OneOf<[string, null]>;
        dismissal_commit_id?: string;
      };
    };
    /**
     * Locked Issue Event
     * @description Locked Issue Event
     */
    "locked-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      lock_reason: OneOf<[string, null]>;
    };
    /**
     * Added to Project Issue Event
     * @description Added to Project Issue Event
     */
    "added-to-project-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      project_card?: {
        id: number;
        /** Format: uri */
        url: string;
        project_id: number;
        /** Format: uri */
        project_url: string;
        column_name: string;
        previous_column_name?: string;
      };
    };
    /**
     * Moved Column in Project Issue Event
     * @description Moved Column in Project Issue Event
     */
    "moved-column-in-project-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      project_card?: {
        id: number;
        /** Format: uri */
        url: string;
        project_id: number;
        /** Format: uri */
        project_url: string;
        column_name: string;
        previous_column_name?: string;
      };
    };
    /**
     * Removed from Project Issue Event
     * @description Removed from Project Issue Event
     */
    "removed-from-project-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      project_card?: {
        id: number;
        /** Format: uri */
        url: string;
        project_id: number;
        /** Format: uri */
        project_url: string;
        column_name: string;
        previous_column_name?: string;
      };
    };
    /**
     * Converted Note to Issue Issue Event
     * @description Converted Note to Issue Issue Event
     */
    "converted-note-to-issue-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: components["schemas"]["integration"];
      project_card?: {
        id: number;
        /** Format: uri */
        url: string;
        project_id: number;
        /** Format: uri */
        project_url: string;
        column_name: string;
        previous_column_name?: string;
      };
    };
    /**
     * Issue Event for Issue
     * @description Issue Event for Issue
     */
    "issue-event-for-issue":
      | components["schemas"]["labeled-issue-event"]
      | components["schemas"]["unlabeled-issue-event"]
      | components["schemas"]["assigned-issue-event"]
      | components["schemas"]["unassigned-issue-event"]
      | components["schemas"]["milestoned-issue-event"]
      | components["schemas"]["demilestoned-issue-event"]
      | components["schemas"]["renamed-issue-event"]
      | components["schemas"]["review-requested-issue-event"]
      | components["schemas"]["review-request-removed-issue-event"]
      | components["schemas"]["review-dismissed-issue-event"]
      | components["schemas"]["locked-issue-event"]
      | components["schemas"]["added-to-project-issue-event"]
      | components["schemas"]["moved-column-in-project-issue-event"]
      | components["schemas"]["removed-from-project-issue-event"]
      | components["schemas"]["converted-note-to-issue-issue-event"];
    /**
     * Label
     * @description Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
     */
    label: {
      /** Format: int64 */
      id: number;
      node_id: string;
      /**
       * Format: uri
       * @description URL for the label
       */
      url: string;
      /** @description The name of the label. */
      name: string;
      description: OneOf<[string, null]>;
      /** @description 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
    };
    /**
     * Timeline Comment Event
     * @description Timeline Comment Event
     */
    "timeline-comment-event": {
      event: string;
      actor: components["schemas"]["simple-user"];
      /** @description Unique identifier of the issue comment */
      id: number;
      node_id: string;
      /**
       * Format: uri
       * @description URL for the issue comment
       */
      url: string;
      /** @description Contents of the issue comment */
      body?: string;
      body_text?: string;
      body_html?: string;
      /** Format: uri */
      html_url: string;
      user: components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      issue_url: string;
      author_association: components["schemas"]["author-association"];
      performed_via_github_app?: null | components["schemas"]["integration"];
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Timeline Cross Referenced Event
     * @description Timeline Cross Referenced Event
     */
    "timeline-cross-referenced-event": {
      event: string;
      actor?: components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      source: {
        type?: string;
        issue?: components["schemas"]["issue"];
      };
    };
    /**
     * Timeline Committed Event
     * @description Timeline Committed Event
     */
    "timeline-committed-event": {
      event?: string;
      /** @description SHA for the commit */
      sha: string;
      node_id: string;
      /** Format: uri */
      url: string;
      /** @description Identifying information for the git-user */
      author: {
        /**
         * Format: date-time
         * @description Timestamp of the commit
         */
        date: string;
        /** @description Git email address of the user */
        email: string;
        /** @description Name of the git user */
        name: string;
      };
      /** @description Identifying information for the git-user */
      committer: {
        /**
         * Format: date-time
         * @description Timestamp of the commit
         */
        date: string;
        /** @description Git email address of the user */
        email: string;
        /** @description Name of the git user */
        name: string;
      };
      /** @description Message describing the purpose of the commit */
      message: string;
      tree: {
        /** @description SHA for the commit */
        sha: string;
        /** Format: uri */
        url: string;
      };
      parents: {
        /** @description SHA for the commit */
        sha: string;
        /** Format: uri */
        url: string;
        /** Format: uri */
        html_url: string;
      }[];
      verification: {
        verified: boolean;
        reason: string;
        signature: OneOf<[string, null]>;
        payload: OneOf<[string, null]>;
      };
      /** Format: uri */
      html_url: string;
    };
    /**
     * Timeline Reviewed Event
     * @description Timeline Reviewed Event
     */
    "timeline-reviewed-event": {
      event: string;
      /** @description Unique identifier of the review */
      id: number;
      node_id: string;
      user: components["schemas"]["simple-user"];
      /** @description The text of the review. */
      body: OneOf<[string, null]>;
      state: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      pull_request_url: string;
      _links: {
        html: {
          href: string;
        };
        pull_request: {
          href: string;
        };
      };
      /** Format: date-time */
      submitted_at?: string;
      /** @description A commit SHA for the review. */
      commit_id: string;
      body_html?: string;
      body_text?: string;
      author_association: components["schemas"]["author-association"];
    };
    /**
     * Pull Request Review Comment
     * @description Pull Request Review Comments are comments on a portion of the Pull Request's diff.
     */
    "pull-request-review-comment": {
      /** @description URL for the pull request review comment */
      url: string;
      /** @description The ID of the pull request review to which the comment belongs. */
      pull_request_review_id: OneOf<[number, null]>;
      /** @description The ID of the pull request review comment. */
      id: number;
      /** @description The node ID of the pull request review comment. */
      node_id: string;
      /** @description The diff of the line that the comment refers to. */
      diff_hunk: string;
      /** @description The relative path of the file to which the comment applies. */
      path: string;
      /** @description The line index in the diff to which the comment applies. This field is deprecated; use `line` instead. */
      position: number;
      /** @description The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead. */
      original_position: number;
      /** @description The SHA of the commit to which the comment applies. */
      commit_id: string;
      /** @description The SHA of the original commit to which the comment applies. */
      original_commit_id: string;
      /** @description The comment ID to reply to. */
      in_reply_to_id?: number;
      user: components["schemas"]["simple-user"];
      /** @description The text of the comment. */
      body: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /**
       * Format: uri
       * @description HTML URL for the pull request review comment.
       */
      html_url: string;
      /**
       * Format: uri
       * @description URL for the pull request that the review comment belongs to.
       */
      pull_request_url: string;
      author_association: components["schemas"]["author-association"];
      _links: {
        self: {
          /** Format: uri */
          href: string;
        };
        html: {
          /** Format: uri */
          href: string;
        };
        pull_request: {
          /** Format: uri */
          href: string;
        };
      };
      /** @description The first line of the range for a multi-line comment. */
      start_line?: OneOf<[number, null]>;
      /** @description The first line of the range for a multi-line comment. */
      original_start_line?: OneOf<[number, null]>;
      /**
       * @description The side of the first line of the range for a multi-line comment.
       * @default RIGHT
       * @enum {string|null}
       */
      start_side?: "LEFT" | "RIGHT" | "" | null;
      /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      line?: number;
      /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      original_line?: number;
      /**
       * @description The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
       * @default RIGHT
       * @enum {string}
       */
      side?: "LEFT" | "RIGHT";
      /**
       * @description The level at which the comment is targeted, can be a diff line or a file.
       * @enum {string}
       */
      subject_type?: "line" | "file";
      reactions?: components["schemas"]["reaction-rollup"];
      body_html?: string;
      body_text?: string;
    };
    /**
     * Timeline Line Commented Event
     * @description Timeline Line Commented Event
     */
    "timeline-line-commented-event": {
      event?: string;
      node_id?: string;
      comments?: components["schemas"]["pull-request-review-comment"][];
    };
    /**
     * Timeline Commit Commented Event
     * @description Timeline Commit Commented Event
     */
    "timeline-commit-commented-event": {
      event?: string;
      node_id?: string;
      commit_id?: string;
      comments?: components["schemas"]["commit-comment"][];
    };
    /**
     * Timeline Assigned Issue Event
     * @description Timeline Assigned Issue Event
     */
    "timeline-assigned-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      assignee: components["schemas"]["simple-user"];
    };
    /**
     * Timeline Unassigned Issue Event
     * @description Timeline Unassigned Issue Event
     */
    "timeline-unassigned-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      assignee: components["schemas"]["simple-user"];
    };
    /**
     * State Change Issue Event
     * @description State Change Issue Event
     */
    "state-change-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      state_reason?: OneOf<[string, null]>;
    };
    /**
     * Timeline Event
     * @description Timeline Event
     */
    "timeline-issue-events":
      | components["schemas"]["labeled-issue-event"]
      | components["schemas"]["unlabeled-issue-event"]
      | components["schemas"]["milestoned-issue-event"]
      | components["schemas"]["demilestoned-issue-event"]
      | components["schemas"]["renamed-issue-event"]
      | components["schemas"]["review-requested-issue-event"]
      | components["schemas"]["review-request-removed-issue-event"]
      | components["schemas"]["review-dismissed-issue-event"]
      | components["schemas"]["locked-issue-event"]
      | components["schemas"]["added-to-project-issue-event"]
      | components["schemas"]["moved-column-in-project-issue-event"]
      | components["schemas"]["removed-from-project-issue-event"]
      | components["schemas"]["converted-note-to-issue-issue-event"]
      | components["schemas"]["timeline-comment-event"]
      | components["schemas"]["timeline-cross-referenced-event"]
      | components["schemas"]["timeline-committed-event"]
      | components["schemas"]["timeline-reviewed-event"]
      | components["schemas"]["timeline-line-commented-event"]
      | components["schemas"]["timeline-commit-commented-event"]
      | components["schemas"]["timeline-assigned-issue-event"]
      | components["schemas"]["timeline-unassigned-issue-event"]
      | components["schemas"]["state-change-issue-event"];
    /**
     * Deploy Key
     * @description An SSH key granting access to a single repository.
     */
    "deploy-key": {
      id: number;
      key: string;
      url: string;
      title: string;
      verified: boolean;
      created_at: string;
      read_only: boolean;
    };
    /**
     * Language
     * @description Language
     */
    language: {
      [key: string]: number | undefined;
    };
    /**
     * License Content
     * @description License Content
     */
    "license-content": {
      name: string;
      path: string;
      sha: string;
      size: number;
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
      /** Format: uri */
      git_url: OneOf<[string, null]>;
      /** Format: uri */
      download_url: OneOf<[string, null]>;
      type: string;
      content: string;
      encoding: string;
      _links: {
        /** Format: uri */
        git: OneOf<[string, null]>;
        /** Format: uri */
        html: OneOf<[string, null]>;
        /** Format: uri */
        self: string;
      };
      license: null | components["schemas"]["license-simple"];
    };
    /**
     * Merged upstream
     * @description Results of a successful merge upstream request
     */
    "merged-upstream": {
      message?: string;
      /** @enum {string} */
      merge_type?: "merge" | "fast-forward" | "none";
      base_branch?: string;
    };
    /** Pages Source Hash */
    "pages-source-hash": {
      branch: string;
      path: string;
    };
    /** Pages Https Certificate */
    "pages-https-certificate": {
      /** @enum {string} */
      state:
        | "new"
        | "authorization_created"
        | "authorization_pending"
        | "authorized"
        | "authorization_revoked"
        | "issued"
        | "uploaded"
        | "approved"
        | "errored"
        | "bad_authz"
        | "destroy_pending"
        | "dns_changed";
      description: string;
      /** @description Array of the domain set and its alternate name (if it is configured) */
      domains: string[];
      /** Format: date */
      expires_at?: string;
    };
    /**
     * GitHub Pages
     * @description The configuration for GitHub Pages for a repository.
     */
    page: {
      /**
       * Format: uri
       * @description The API address for accessing this Page resource.
       */
      url: string;
      /**
       * @description The status of the most recent build of the Page.
       * @enum {string|null}
       */
      status: "built" | "building" | "errored" | "" | null;
      /** @description The Pages site's custom domain */
      cname: OneOf<[string, null]>;
      /**
       * @description The state if the domain is verified
       * @enum {string|null}
       */
      protected_domain_state?:
        | "pending"
        | "verified"
        | "unverified"
        | ""
        | null;
      /**
       * Format: date-time
       * @description The timestamp when a pending domain becomes unverified.
       */
      pending_domain_unverified_at?: OneOf<[string, null]>;
      /**
       * @description Whether the Page has a custom 404 page.
       * @default false
       */
      custom_404: boolean;
      /**
       * Format: uri
       * @description The web address the Page can be accessed from.
       */
      html_url?: string;
      /**
       * @description The process in which the Page will be built.
       * @enum {string|null}
       */
      build_type?: "legacy" | "workflow" | "" | null;
      source?: components["schemas"]["pages-source-hash"];
      /** @description Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. */
      public: boolean;
      https_certificate?: components["schemas"]["pages-https-certificate"];
      /** @description Whether https is enabled on the domain */
      https_enforced?: boolean;
    };
    /**
     * Page Build
     * @description Page Build
     */
    "page-build": {
      /** Format: uri */
      url: string;
      status: string;
      error: {
        message: OneOf<[string, null]>;
      };
      pusher: null | components["schemas"]["simple-user"];
      commit: string;
      duration: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    /**
     * Page Build Status
     * @description Page Build Status
     */
    "page-build-status": {
      /** Format: uri */
      url: string;
      status: string;
    };
    "repository-pre-receive-hook": {
      id?: number;
      name?: string;
      enforcement?: string;
      configuration_url?: string;
    };
    /**
     * Pull Request
     * @description Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
     */
    "pull-request": {
      /** Format: uri */
      url: string;
      id: number;
      node_id: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      diff_url: string;
      /** Format: uri */
      patch_url: string;
      /** Format: uri */
      issue_url: string;
      /** Format: uri */
      commits_url: string;
      /** Format: uri */
      review_comments_url: string;
      review_comment_url: string;
      /** Format: uri */
      comments_url: string;
      /** Format: uri */
      statuses_url: string;
      /** @description Number uniquely identifying the pull request within its repository. */
      number: number;
      /**
       * @description State of this Pull Request. Either `open` or `closed`.
       * @enum {string}
       */
      state: "open" | "closed";
      locked: boolean;
      /** @description The title of the pull request. */
      title: string;
      user: null | components["schemas"]["simple-user"];
      body: OneOf<[string, null]>;
      labels: {
        /** Format: int64 */
        id: number;
        node_id: string;
        url: string;
        name: string;
        description: OneOf<[string, null]>;
        color: string;
        default: boolean;
      }[];
      milestone: null | components["schemas"]["milestone"];
      active_lock_reason?: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      closed_at: OneOf<[string, null]>;
      /** Format: date-time */
      merged_at: OneOf<[string, null]>;
      merge_commit_sha: OneOf<[string, null]>;
      assignee: null | components["schemas"]["simple-user"];
      assignees?: OneOf<[components["schemas"]["simple-user"][], null]>;
      requested_reviewers?: OneOf<
        [components["schemas"]["simple-user"][], null]
      >;
      requested_teams?: OneOf<[components["schemas"]["team-simple"][], null]>;
      head: {
        label: string;
        ref: string;
        repo: OneOf<
          [
            {
              archive_url: string;
              assignees_url: string;
              blobs_url: string;
              branches_url: string;
              collaborators_url: string;
              comments_url: string;
              commits_url: string;
              compare_url: string;
              contents_url: string;
              /** Format: uri */
              contributors_url: string;
              /** Format: uri */
              deployments_url: string;
              description: OneOf<[string, null]>;
              /** Format: uri */
              downloads_url: string;
              /** Format: uri */
              events_url: string;
              fork: boolean;
              /** Format: uri */
              forks_url: string;
              full_name: string;
              git_commits_url: string;
              git_refs_url: string;
              git_tags_url: string;
              /** Format: uri */
              hooks_url: string;
              /** Format: uri */
              html_url: string;
              id: number;
              node_id: string;
              issue_comment_url: string;
              issue_events_url: string;
              issues_url: string;
              keys_url: string;
              labels_url: string;
              /** Format: uri */
              languages_url: string;
              /** Format: uri */
              merges_url: string;
              milestones_url: string;
              name: string;
              notifications_url: string;
              owner: {
                /** Format: uri */
                avatar_url: string;
                events_url: string;
                /** Format: uri */
                followers_url: string;
                following_url: string;
                gists_url: string;
                gravatar_id: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                id: number;
                node_id: string;
                login: string;
                /** Format: uri */
                organizations_url: string;
                /** Format: uri */
                received_events_url: string;
                /** Format: uri */
                repos_url: string;
                site_admin: boolean;
                starred_url: string;
                /** Format: uri */
                subscriptions_url: string;
                type: string;
                /** Format: uri */
                url: string;
              };
              private: boolean;
              pulls_url: string;
              releases_url: string;
              /** Format: uri */
              stargazers_url: string;
              statuses_url: string;
              /** Format: uri */
              subscribers_url: string;
              /** Format: uri */
              subscription_url: string;
              /** Format: uri */
              tags_url: string;
              /** Format: uri */
              teams_url: string;
              trees_url: string;
              /** Format: uri */
              url: string;
              clone_url: string;
              default_branch: string;
              forks: number;
              forks_count: number;
              git_url: string;
              has_downloads: boolean;
              has_issues: boolean;
              has_projects: boolean;
              has_wiki: boolean;
              has_pages: boolean;
              has_discussions: boolean;
              /** Format: uri */
              homepage: OneOf<[string, null]>;
              language: OneOf<[string, null]>;
              master_branch?: string;
              archived: boolean;
              disabled: boolean;
              /** @description The repository visibility: public, private, or internal. */
              visibility?: string;
              /** Format: uri */
              mirror_url: OneOf<[string, null]>;
              open_issues: number;
              open_issues_count: number;
              permissions?: {
                admin: boolean;
                maintain?: boolean;
                push: boolean;
                triage?: boolean;
                pull: boolean;
              };
              temp_clone_token?: string;
              allow_merge_commit?: boolean;
              allow_squash_merge?: boolean;
              allow_rebase_merge?: boolean;
              license: OneOf<
                [
                  {
                    key: string;
                    name: string;
                    /** Format: uri */
                    url: OneOf<[string, null]>;
                    spdx_id: OneOf<[string, null]>;
                    node_id: string;
                  },
                  null
                ]
              >;
              /** Format: date-time */
              pushed_at: string;
              size: number;
              ssh_url: string;
              stargazers_count: number;
              /** Format: uri */
              svn_url: string;
              topics?: string[];
              watchers: number;
              watchers_count: number;
              /** Format: date-time */
              created_at: string;
              /** Format: date-time */
              updated_at: string;
              allow_forking?: boolean;
              is_template?: boolean;
            },
            null
          ]
        >;
        sha: string;
        user: {
          /** Format: uri */
          avatar_url: string;
          events_url: string;
          /** Format: uri */
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: OneOf<[string, null]>;
          /** Format: uri */
          html_url: string;
          id: number;
          node_id: string;
          login: string;
          /** Format: uri */
          organizations_url: string;
          /** Format: uri */
          received_events_url: string;
          /** Format: uri */
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          /** Format: uri */
          subscriptions_url: string;
          type: string;
          /** Format: uri */
          url: string;
        };
      };
      base: {
        label: string;
        ref: string;
        repo: {
          archive_url: string;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          /** Format: uri */
          contributors_url: string;
          /** Format: uri */
          deployments_url: string;
          description: OneOf<[string, null]>;
          /** Format: uri */
          downloads_url: string;
          /** Format: uri */
          events_url: string;
          fork: boolean;
          /** Format: uri */
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          /** Format: uri */
          hooks_url: string;
          /** Format: uri */
          html_url: string;
          id: number;
          is_template?: boolean;
          node_id: string;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          /** Format: uri */
          languages_url: string;
          /** Format: uri */
          merges_url: string;
          milestones_url: string;
          name: string;
          notifications_url: string;
          owner: {
            /** Format: uri */
            avatar_url: string;
            events_url: string;
            /** Format: uri */
            followers_url: string;
            following_url: string;
            gists_url: string;
            gravatar_id: OneOf<[string, null]>;
            /** Format: uri */
            html_url: string;
            id: number;
            node_id: string;
            login: string;
            /** Format: uri */
            organizations_url: string;
            /** Format: uri */
            received_events_url: string;
            /** Format: uri */
            repos_url: string;
            site_admin: boolean;
            starred_url: string;
            /** Format: uri */
            subscriptions_url: string;
            type: string;
            /** Format: uri */
            url: string;
          };
          private: boolean;
          pulls_url: string;
          releases_url: string;
          /** Format: uri */
          stargazers_url: string;
          statuses_url: string;
          /** Format: uri */
          subscribers_url: string;
          /** Format: uri */
          subscription_url: string;
          /** Format: uri */
          tags_url: string;
          /** Format: uri */
          teams_url: string;
          trees_url: string;
          /** Format: uri */
          url: string;
          clone_url: string;
          default_branch: string;
          forks: number;
          forks_count: number;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_pages: boolean;
          has_discussions: boolean;
          /** Format: uri */
          homepage: OneOf<[string, null]>;
          language: OneOf<[string, null]>;
          master_branch?: string;
          archived: boolean;
          disabled: boolean;
          /** @description The repository visibility: public, private, or internal. */
          visibility?: string;
          /** Format: uri */
          mirror_url: OneOf<[string, null]>;
          open_issues: number;
          open_issues_count: number;
          permissions?: {
            admin: boolean;
            maintain?: boolean;
            push: boolean;
            triage?: boolean;
            pull: boolean;
          };
          temp_clone_token?: string;
          allow_merge_commit?: boolean;
          allow_squash_merge?: boolean;
          allow_rebase_merge?: boolean;
          license: null | components["schemas"]["license-simple"];
          /** Format: date-time */
          pushed_at: string;
          size: number;
          ssh_url: string;
          stargazers_count: number;
          /** Format: uri */
          svn_url: string;
          topics?: string[];
          watchers: number;
          watchers_count: number;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
          allow_forking?: boolean;
        };
        sha: string;
        user: {
          /** Format: uri */
          avatar_url: string;
          events_url: string;
          /** Format: uri */
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: OneOf<[string, null]>;
          /** Format: uri */
          html_url: string;
          id: number;
          node_id: string;
          login: string;
          /** Format: uri */
          organizations_url: string;
          /** Format: uri */
          received_events_url: string;
          /** Format: uri */
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          /** Format: uri */
          subscriptions_url: string;
          type: string;
          /** Format: uri */
          url: string;
        };
      };
      _links: {
        comments: components["schemas"]["link"];
        commits: components["schemas"]["link"];
        statuses: components["schemas"]["link"];
        html: components["schemas"]["link"];
        issue: components["schemas"]["link"];
        review_comments: components["schemas"]["link"];
        review_comment: components["schemas"]["link"];
        self: components["schemas"]["link"];
      };
      author_association: components["schemas"]["author-association"];
      auto_merge: components["schemas"]["auto-merge"];
      /** @description Indicates whether or not the pull request is a draft. */
      draft?: boolean;
      merged: boolean;
      mergeable: OneOf<[boolean, null]>;
      rebaseable?: OneOf<[boolean, null]>;
      mergeable_state: string;
      merged_by: null | components["schemas"]["simple-user"];
      comments: number;
      review_comments: number;
      /** @description Indicates whether maintainers can modify the pull request. */
      maintainer_can_modify: boolean;
      commits: number;
      additions: number;
      deletions: number;
      changed_files: number;
    };
    /**
     * Pull Request Merge Result
     * @description Pull Request Merge Result
     */
    "pull-request-merge-result": {
      sha: string;
      merged: boolean;
      message: string;
    };
    /**
     * Pull Request Review Request
     * @description Pull Request Review Request
     */
    "pull-request-review-request": {
      users: components["schemas"]["simple-user"][];
      teams: components["schemas"]["team"][];
    };
    /**
     * Pull Request Review
     * @description Pull Request Reviews are reviews on pull requests.
     */
    "pull-request-review": {
      /** @description Unique identifier of the review */
      id: number;
      node_id: string;
      user: null | components["schemas"]["simple-user"];
      /** @description The text of the review. */
      body: string;
      state: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      pull_request_url: string;
      _links: {
        html: {
          href: string;
        };
        pull_request: {
          href: string;
        };
      };
      /** Format: date-time */
      submitted_at?: string;
      /** @description A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`. */
      commit_id: OneOf<[string, null]>;
      body_html?: string;
      body_text?: string;
      author_association: components["schemas"]["author-association"];
    };
    /**
     * Legacy Review Comment
     * @description Legacy Review Comment
     */
    "review-comment": {
      /** Format: uri */
      url: string;
      pull_request_review_id: OneOf<[number, null]>;
      id: number;
      node_id: string;
      diff_hunk: string;
      path: string;
      position: OneOf<[number, null]>;
      original_position: number;
      commit_id: string;
      original_commit_id: string;
      in_reply_to_id?: number;
      user: null | components["schemas"]["simple-user"];
      body: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      pull_request_url: string;
      author_association: components["schemas"]["author-association"];
      _links: {
        self: components["schemas"]["link"];
        html: components["schemas"]["link"];
        pull_request: components["schemas"]["link"];
      };
      body_text?: string;
      body_html?: string;
      reactions?: components["schemas"]["reaction-rollup"];
      /**
       * @description The side of the first line of the range for a multi-line comment.
       * @default RIGHT
       * @enum {string}
       */
      side?: "LEFT" | "RIGHT";
      /**
       * @description The side of the first line of the range for a multi-line comment.
       * @default RIGHT
       * @enum {string|null}
       */
      start_side?: "LEFT" | "RIGHT" | "" | null;
      /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      line?: number;
      /** @description The original line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      original_line?: number;
      /** @description The first line of the range for a multi-line comment. */
      start_line?: OneOf<[number, null]>;
      /** @description The original first line of the range for a multi-line comment. */
      original_start_line?: OneOf<[number, null]>;
    };
    /**
     * Release Asset
     * @description Data related to a release.
     */
    "release-asset": {
      /** Format: uri */
      url: string;
      /** Format: uri */
      browser_download_url: string;
      id: number;
      node_id: string;
      /** @description The file name of the asset. */
      name: string;
      label: OneOf<[string, null]>;
      /**
       * @description State of the release asset.
       * @enum {string}
       */
      state: "uploaded" | "open";
      content_type: string;
      size: number;
      download_count: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      uploader: null | components["schemas"]["simple-user"];
    };
    /**
     * Release
     * @description A release.
     */
    release: {
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      assets_url: string;
      upload_url: string;
      /** Format: uri */
      tarball_url: OneOf<[string, null]>;
      /** Format: uri */
      zipball_url: OneOf<[string, null]>;
      id: number;
      node_id: string;
      /** @description The name of the tag. */
      tag_name: string;
      /** @description Specifies the commitish value that determines where the Git tag is created from. */
      target_commitish: string;
      name: OneOf<[string, null]>;
      body?: OneOf<[string, null]>;
      /** @description true to create a draft (unpublished) release, false to create a published one. */
      draft: boolean;
      /** @description Whether to identify the release as a prerelease or a full release. */
      prerelease: boolean;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      published_at: OneOf<[string, null]>;
      author: components["schemas"]["simple-user"];
      assets: components["schemas"]["release-asset"][];
      body_html?: string;
      body_text?: string;
      mentions_count?: number;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Generated Release Notes Content
     * @description Generated name and body describing a release
     */
    "release-notes-content": {
      /** @description The generated name of the release */
      name: string;
      /** @description The generated body describing the contents of the release supporting markdown formatting */
      body: string;
    };
    "secret-scanning-alert": {
      number?: components["schemas"]["alert-number"];
      created_at?: components["schemas"]["alert-created-at"];
      updated_at?: null | components["schemas"]["alert-updated-at"];
      url?: components["schemas"]["alert-url"];
      html_url?: components["schemas"]["alert-html-url"];
      /**
       * Format: uri
       * @description The REST API URL of the code locations for this alert.
       */
      locations_url?: string;
      state?: components["schemas"]["secret-scanning-alert-state"];
      resolution?: components["schemas"]["secret-scanning-alert-resolution"];
      /**
       * Format: date-time
       * @description The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      resolved_at?: OneOf<[string, null]>;
      resolved_by?: null | components["schemas"]["simple-user"];
      /** @description The type of secret that secret scanning detected. */
      secret_type?: string;
      /**
       * @description User-friendly name for the detected secret, matching the `secret_type`.
       * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/enterprise-server@3.5/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
       */
      secret_type_display_name?: string;
      /** @description The secret that was detected. */
      secret?: string;
    };
    /** @description Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository. */
    "secret-scanning-location-commit": {
      /** @description The file path in the repository */
      path: string;
      /** @description Line number at which the secret starts in the file */
      start_line: number;
      /** @description Line number at which the secret ends in the file */
      end_line: number;
      /** @description The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII */
      start_column: number;
      /** @description The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII */
      end_column: number;
      /** @description SHA-1 hash ID of the associated blob */
      blob_sha: string;
      /** @description The API URL to get the associated blob resource */
      blob_url: string;
      /** @description SHA-1 hash ID of the associated commit */
      commit_sha: string;
      /** @description The API URL to get the associated commit resource */
      commit_url: string;
    };
    "secret-scanning-location": {
      /**
       * @description The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.
       * @enum {string}
       */
      type: "commit";
      details: components["schemas"]["secret-scanning-location-commit"];
    };
    /**
     * Stargazer
     * @description Stargazer
     */
    stargazer: {
      /** Format: date-time */
      starred_at: string;
      user: null | components["schemas"]["simple-user"];
    };
    /**
     * Code Frequency Stat
     * @description Code Frequency Stat
     */
    "code-frequency-stat": number[];
    /**
     * Commit Activity
     * @description Commit Activity
     */
    "commit-activity": {
      days: number[];
      total: number;
      week: number;
    };
    /**
     * Contributor Activity
     * @description Contributor Activity
     */
    "contributor-activity": {
      author: null | components["schemas"]["simple-user"];
      total: number;
      weeks: {
        w?: number;
        a?: number;
        d?: number;
        c?: number;
      }[];
    };
    /** Participation Stats */
    "participation-stats": {
      all: number[];
      owner: number[];
    };
    /**
     * Repository Invitation
     * @description Repository invitations let you manage who you collaborate with.
     */
    "repository-subscription": {
      /** @description Determines if notifications should be received from this repository. */
      subscribed: boolean;
      /** @description Determines if all notifications should be blocked from this repository. */
      ignored: boolean;
      reason: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      repository_url: string;
    };
    /**
     * Tag
     * @description Tag
     */
    tag: {
      name: string;
      commit: {
        sha: string;
        /** Format: uri */
        url: string;
      };
      /** Format: uri */
      zipball_url: string;
      /** Format: uri */
      tarball_url: string;
      node_id: string;
    };
    /**
     * Tag protection
     * @description Tag protection
     */
    "tag-protection": {
      id?: number;
      created_at?: string;
      updated_at?: string;
      enabled?: boolean;
      pattern: string;
    };
    /**
     * Topic
     * @description A topic aggregates entities that are related to a subject.
     */
    topic: {
      names: string[];
    };
    /** Search Result Text Matches */
    "search-result-text-matches": {
      object_url?: string;
      object_type?: OneOf<[string, null]>;
      property?: string;
      fragment?: string;
      matches?: {
        text?: string;
        indices?: number[];
      }[];
    }[];
    /**
     * Code Search Result Item
     * @description Code Search Result Item
     */
    "code-search-result-item": {
      name: string;
      path: string;
      sha: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      git_url: string;
      /** Format: uri */
      html_url: string;
      repository: components["schemas"]["minimal-repository"];
      score: number;
      file_size?: number;
      language?: OneOf<[string, null]>;
      /** Format: date-time */
      last_modified_at?: string;
      line_numbers?: string[];
      text_matches?: components["schemas"]["search-result-text-matches"];
    };
    /**
     * Commit Search Result Item
     * @description Commit Search Result Item
     */
    "commit-search-result-item": {
      /** Format: uri */
      url: string;
      sha: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      comments_url: string;
      commit: {
        author: {
          name: string;
          email: string;
          /** Format: date-time */
          date: string;
        };
        committer: null | components["schemas"]["git-user"];
        comment_count: number;
        message: string;
        tree: {
          sha: string;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        url: string;
        verification?: components["schemas"]["verification"];
      };
      author: null | components["schemas"]["simple-user"];
      committer: null | components["schemas"]["git-user"];
      parents: {
        url?: string;
        html_url?: string;
        sha?: string;
      }[];
      repository: components["schemas"]["minimal-repository"];
      score: number;
      node_id: string;
      text_matches?: components["schemas"]["search-result-text-matches"];
    };
    /**
     * Issue Search Result Item
     * @description Issue Search Result Item
     */
    "issue-search-result-item": {
      /** Format: uri */
      url: string;
      /** Format: uri */
      repository_url: string;
      labels_url: string;
      /** Format: uri */
      comments_url: string;
      /** Format: uri */
      events_url: string;
      /** Format: uri */
      html_url: string;
      /** Format: int64 */
      id: number;
      node_id: string;
      number: number;
      title: string;
      locked: boolean;
      active_lock_reason?: OneOf<[string, null]>;
      assignees?: OneOf<[components["schemas"]["simple-user"][], null]>;
      user: null | components["schemas"]["simple-user"];
      labels: {
        /** Format: int64 */
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        color?: string;
        default?: boolean;
        description?: OneOf<[string, null]>;
      }[];
      state: string;
      state_reason?: OneOf<[string, null]>;
      assignee: null | components["schemas"]["simple-user"];
      milestone: null | components["schemas"]["milestone"];
      comments: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      closed_at: OneOf<[string, null]>;
      text_matches?: components["schemas"]["search-result-text-matches"];
      pull_request?: {
        /** Format: date-time */
        merged_at?: OneOf<[string, null]>;
        /** Format: uri */
        diff_url: OneOf<[string, null]>;
        /** Format: uri */
        html_url: OneOf<[string, null]>;
        /** Format: uri */
        patch_url: OneOf<[string, null]>;
        /** Format: uri */
        url: OneOf<[string, null]>;
      };
      body?: string;
      score: number;
      author_association: components["schemas"]["author-association"];
      draft?: boolean;
      repository?: components["schemas"]["repository"];
      body_html?: string;
      body_text?: string;
      /** Format: uri */
      timeline_url?: string;
      performed_via_github_app?: null | components["schemas"]["integration"];
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Label Search Result Item
     * @description Label Search Result Item
     */
    "label-search-result-item": {
      id: number;
      node_id: string;
      /** Format: uri */
      url: string;
      name: string;
      color: string;
      default: boolean;
      description: OneOf<[string, null]>;
      score: number;
      text_matches?: components["schemas"]["search-result-text-matches"];
    };
    /**
     * Repo Search Result Item
     * @description Repo Search Result Item
     */
    "repo-search-result-item": {
      id: number;
      node_id: string;
      name: string;
      full_name: string;
      owner: null | components["schemas"]["simple-user"];
      private: boolean;
      /** Format: uri */
      html_url: string;
      description: OneOf<[string, null]>;
      fork: boolean;
      /** Format: uri */
      url: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      pushed_at: string;
      /** Format: uri */
      homepage: OneOf<[string, null]>;
      size: number;
      stargazers_count: number;
      watchers_count: number;
      language: OneOf<[string, null]>;
      forks_count: number;
      open_issues_count: number;
      master_branch?: string;
      default_branch: string;
      score: number;
      /** Format: uri */
      forks_url: string;
      keys_url: string;
      collaborators_url: string;
      /** Format: uri */
      teams_url: string;
      /** Format: uri */
      hooks_url: string;
      issue_events_url: string;
      /** Format: uri */
      events_url: string;
      assignees_url: string;
      branches_url: string;
      /** Format: uri */
      tags_url: string;
      blobs_url: string;
      git_tags_url: string;
      git_refs_url: string;
      trees_url: string;
      statuses_url: string;
      /** Format: uri */
      languages_url: string;
      /** Format: uri */
      stargazers_url: string;
      /** Format: uri */
      contributors_url: string;
      /** Format: uri */
      subscribers_url: string;
      /** Format: uri */
      subscription_url: string;
      commits_url: string;
      git_commits_url: string;
      comments_url: string;
      issue_comment_url: string;
      contents_url: string;
      compare_url: string;
      /** Format: uri */
      merges_url: string;
      archive_url: string;
      /** Format: uri */
      downloads_url: string;
      issues_url: string;
      pulls_url: string;
      milestones_url: string;
      notifications_url: string;
      labels_url: string;
      releases_url: string;
      /** Format: uri */
      deployments_url: string;
      git_url: string;
      ssh_url: string;
      clone_url: string;
      /** Format: uri */
      svn_url: string;
      forks: number;
      open_issues: number;
      watchers: number;
      topics?: string[];
      /** Format: uri */
      mirror_url: OneOf<[string, null]>;
      has_issues: boolean;
      has_projects: boolean;
      has_pages: boolean;
      has_wiki: boolean;
      has_downloads: boolean;
      archived: boolean;
      /** @description Returns whether or not this repository disabled. */
      disabled: boolean;
      /** @description The repository visibility: public, private, or internal. */
      visibility?: string;
      license: null | components["schemas"]["license-simple"];
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        push: boolean;
        triage?: boolean;
        pull: boolean;
      };
      text_matches?: components["schemas"]["search-result-text-matches"];
      temp_clone_token?: string;
      allow_merge_commit?: boolean;
      allow_squash_merge?: boolean;
      allow_rebase_merge?: boolean;
      allow_auto_merge?: boolean;
      delete_branch_on_merge?: boolean;
      allow_forking?: boolean;
      is_template?: boolean;
    };
    /**
     * Topic Search Result Item
     * @description Topic Search Result Item
     */
    "topic-search-result-item": {
      name: string;
      display_name: OneOf<[string, null]>;
      short_description: OneOf<[string, null]>;
      description: OneOf<[string, null]>;
      created_by: OneOf<[string, null]>;
      released: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      featured: boolean;
      curated: boolean;
      score: number;
      repository_count?: OneOf<[number, null]>;
      /** Format: uri */
      logo_url?: OneOf<[string, null]>;
      text_matches?: components["schemas"]["search-result-text-matches"];
      related?: OneOf<
        [
          {
            topic_relation?: {
              id?: number;
              name?: string;
              topic_id?: number;
              relation_type?: string;
            };
          }[],
          null
        ]
      >;
      aliases?: OneOf<
        [
          {
            topic_relation?: {
              id?: number;
              name?: string;
              topic_id?: number;
              relation_type?: string;
            };
          }[],
          null
        ]
      >;
    };
    /**
     * User Search Result Item
     * @description User Search Result Item
     */
    "user-search-result-item": {
      login: string;
      id: number;
      node_id: string;
      /** Format: uri */
      avatar_url: string;
      gravatar_id: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      followers_url: string;
      /** Format: uri */
      subscriptions_url: string;
      /** Format: uri */
      organizations_url: string;
      /** Format: uri */
      repos_url: string;
      /** Format: uri */
      received_events_url: string;
      type: string;
      score: number;
      following_url: string;
      gists_url: string;
      starred_url: string;
      events_url: string;
      public_repos?: number;
      public_gists?: number;
      followers?: number;
      following?: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      name?: OneOf<[string, null]>;
      bio?: OneOf<[string, null]>;
      /** Format: email */
      email?: OneOf<[string, null]>;
      location?: OneOf<[string, null]>;
      site_admin: boolean;
      hireable?: OneOf<[boolean, null]>;
      text_matches?: components["schemas"]["search-result-text-matches"];
      blog?: OneOf<[string, null]>;
      company?: OneOf<[string, null]>;
      /** Format: date-time */
      suspended_at?: OneOf<[string, null]>;
    };
    "configuration-status": {
      status?: string;
      progress?: {
        status: string;
        key: string;
      }[];
    };
    "maintenance-status": {
      status?: string;
      scheduled_time?: string;
      connection_services?: {
        name: string;
        number: number;
      }[];
    };
    "enterprise-settings": {
      enterprise?: {
        private_mode?: boolean;
        public_pages?: boolean;
        subdomain_isolation?: boolean;
        signup_enabled?: boolean;
        github_hostname?: string;
        identicons_host?: string;
        http_proxy?: OneOf<[string, null]>;
        auth_mode?: string;
        expire_sessions?: boolean;
        admin_password?: OneOf<[string, null]>;
        configuration_id?: number;
        configuration_run_count?: number;
        avatar?: {
          enabled?: boolean;
          uri?: string;
        };
        customer?: {
          name?: string;
          email?: string;
          uuid?: string;
          secret_key_data?: string;
          public_key_data?: string;
        };
        license?: {
          seats?: number;
          evaluation?: boolean;
          perpetual?: boolean;
          unlimited_seating?: boolean;
          support_key?: string;
          ssh_allowed?: boolean;
          cluster_support?: boolean;
          expire_at?: string;
        };
        github_ssl?: {
          enabled?: boolean;
          cert?: OneOf<[string, null]>;
          key?: OneOf<[string, null]>;
        };
        ldap?: {
          host?: OneOf<[string, null]>;
          port?: number;
          base?: Record<string, never>[];
          uid?: OneOf<[string, null]>;
          bind_dn?: OneOf<[string, null]>;
          password?: OneOf<[string, null]>;
          method?: string;
          search_strategy?: string;
          user_groups?: Record<string, never>[];
          admin_group?: OneOf<[string, null]>;
          virtual_attribute_enabled?: boolean;
          recursive_group_search?: boolean;
          posix_support?: boolean;
          user_sync_emails?: boolean;
          user_sync_keys?: boolean;
          user_sync_interval?: number;
          team_sync_interval?: number;
          sync_enabled?: boolean;
          reconciliation?: {
            user?: OneOf<[string, null]>;
            org?: OneOf<[string, null]>;
          };
          profile?: {
            uid?: string;
            name?: OneOf<[string, null]>;
            mail?: OneOf<[string, null]>;
            key?: OneOf<[string, null]>;
          };
        };
        cas?: {
          url?: OneOf<[string, null]>;
        };
        saml?: {
          sso_url?: OneOf<[string, null]>;
          certificate?: OneOf<[string, null]>;
          certificate_path?: OneOf<[string, null]>;
          issuer?: OneOf<[string, null]>;
          idp_initiated_sso?: boolean;
          disable_admin_demote?: boolean;
        };
        github_oauth?: {
          client_id?: string;
          client_secret?: string;
          organization_name?: string;
          organization_team?: string;
        };
        smtp?: {
          enabled?: boolean;
          address?: string;
          authentication?: string;
          port?: string;
          domain?: string;
          username?: string;
          user_name?: string;
          enable_starttls_auto?: boolean;
          password?: string;
          "discard-to-noreply-address"?: boolean;
          support_address?: string;
          support_address_type?: string;
          noreply_address?: string;
        };
        ntp?: {
          primary_server?: string;
          secondary_server?: string;
        };
        timezone?: OneOf<[string, null]>;
        snmp?: {
          enabled?: boolean;
          community?: string;
        };
        syslog?: {
          enabled?: boolean;
          server?: OneOf<[string, null]>;
          protocol_name?: string;
        };
        assets?: OneOf<[string, null]>;
        pages?: {
          enabled?: boolean;
        };
        collectd?: {
          enabled?: boolean;
          server?: OneOf<[string, null]>;
          port?: number;
          encryption?: OneOf<[string, null]>;
          username?: OneOf<[string, null]>;
          password?: OneOf<[string, null]>;
        };
        mapping?: {
          enabled?: boolean;
          tileserver?: OneOf<[string, null]>;
          basemap?: string;
          token?: OneOf<[string, null]>;
        };
        load_balancer?: OneOf<[string, null]>;
      };
      run_list?: string[];
    };
    "ssh-key": {
      key?: string;
      "pretty-print"?: string;
    };
    /**
     * Private User
     * @description Private User
     */
    "private-user": {
      login: string;
      id: number;
      node_id: string;
      /** Format: uri */
      avatar_url: string;
      gravatar_id: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      /** Format: uri */
      subscriptions_url: string;
      /** Format: uri */
      organizations_url: string;
      /** Format: uri */
      repos_url: string;
      events_url: string;
      /** Format: uri */
      received_events_url: string;
      type: string;
      site_admin: boolean;
      name: OneOf<[string, null]>;
      company: OneOf<[string, null]>;
      blog: OneOf<[string, null]>;
      location: OneOf<[string, null]>;
      /** Format: email */
      email: OneOf<[string, null]>;
      hireable: OneOf<[boolean, null]>;
      bio: OneOf<[string, null]>;
      twitter_username?: OneOf<[string, null]>;
      public_repos: number;
      public_gists: number;
      followers: number;
      following: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      private_gists: number;
      total_private_repos: number;
      owned_private_repos: number;
      disk_usage: number;
      collaborators: number;
      two_factor_authentication: boolean;
      plan?: {
        collaborators: number;
        name: string;
        space: number;
        private_repos: number;
      };
      /** Format: date-time */
      suspended_at?: OneOf<[string, null]>;
      business_plus?: boolean;
      ldap_dn?: string;
    };
    /**
     * Email
     * @description Email
     */
    email: {
      /** Format: email */
      email: string;
      primary: boolean;
      verified: boolean;
      visibility: OneOf<[string, null]>;
    };
    /**
     * GPG Key
     * @description A unique encryption key
     */
    "gpg-key": {
      id: number;
      primary_key_id: OneOf<[number, null]>;
      key_id: string;
      public_key: string;
      emails: {
        email?: string;
        verified?: boolean;
      }[];
      subkeys: {
        id?: number;
        primary_key_id?: number;
        key_id?: string;
        public_key?: string;
        emails?: Record<string, never>[];
        subkeys?: Record<string, never>[];
        can_sign?: boolean;
        can_encrypt_comms?: boolean;
        can_encrypt_storage?: boolean;
        can_certify?: boolean;
        created_at?: string;
        expires_at?: OneOf<[string, null]>;
        raw_key?: OneOf<[string, null]>;
      }[];
      can_sign: boolean;
      can_encrypt_comms: boolean;
      can_encrypt_storage: boolean;
      can_certify: boolean;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      expires_at: OneOf<[string, null]>;
      raw_key: OneOf<[string, null]>;
    };
    /**
     * Key
     * @description Key
     */
    key: {
      key: string;
      id: number;
      url: string;
      title: string;
      /** Format: date-time */
      created_at: string;
      verified: boolean;
      read_only: boolean;
    };
    /**
     * Starred Repository
     * @description Starred Repository
     */
    "starred-repository": {
      /** Format: date-time */
      starred_at: string;
      repo: components["schemas"]["repository"];
    };
    /**
     * Hovercard
     * @description Hovercard
     */
    hovercard: {
      contexts: {
        message: string;
        octicon: string;
      }[];
    };
    /**
     * Key Simple
     * @description Key Simple
     */
    "key-simple": {
      id: number;
      key: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;

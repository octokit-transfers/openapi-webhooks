/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = T | U extends object
  ? (Without<T, U> & U) | (Without<U, T> & T)
  : T | U;
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
  ? OneOf<[XOR<A, B>, ...Rest]>
  : never;

export type paths = Record<string, never>;

export interface webhooks {
  "branch-protection-rule-created": {
    /**
     * This event occurs when there is activity relating to branch protection rules. For more information, see "[About protected branches](https://docs.github.com/github-ae@latest/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches)." For information about the APIs to manage branch protection rules, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#branchprotectionrule) or "[Branch protection](https://docs.github.com/github-ae@latest/rest/branches/branch-protection)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission
     * @description A branch protection rule was created.
     */
    post: operations["branch-protection-rule/created"];
  };
  "branch-protection-rule-deleted": {
    /**
     * This event occurs when there is activity relating to branch protection rules. For more information, see "[About protected branches](https://docs.github.com/github-ae@latest/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches)." For information about the APIs to manage branch protection rules, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#branchprotectionrule) or "[Branch protection](https://docs.github.com/github-ae@latest/rest/branches/branch-protection)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.
     * @description A branch protection rule was deleted.
     */
    post: operations["branch-protection-rule/deleted"];
  };
  "branch-protection-rule-edited": {
    /**
     * This event occurs when there is activity relating to branch protection rules. For more information, see "[About protected branches](https://docs.github.com/github-ae@latest/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches)." For information about the APIs to manage branch protection rules, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#branchprotectionrule) or "[Branch protection](https://docs.github.com/github-ae@latest/rest/branches/branch-protection)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.
     * @description A branch protection rule was edited.
     */
    post: operations["branch-protection-rule/edited"];
  };
  "check-run-completed": {
    /**
     * This event occurs when there is activity relating to a check run. For information about check runs, see "[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api)." For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checkrun) or "[Check Runs](https://docs.github.com/github-ae@latest/rest/checks/runs)" in the REST API documentation.
     *
     * For activity relating to check suites, use the `check-suite` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the `rerequested` and `requested_action` event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
     *
     * Repository and organization webhooks only receive payloads for the `created` and `completed` event types in repositories.
     *
     * **Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     * @description A check run was completed, and a conclusion is available.
     */
    post: operations["check-run/completed"];
  };
  "check-run-created": {
    /**
     * This event occurs when there is activity relating to a check run. For information about check runs, see "[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api)." For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checkrun) or "[Check Runs](https://docs.github.com/github-ae@latest/rest/checks/runs)" in the REST API documentation.
     *
     * For activity relating to check suites, use the `check-suite` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the `rerequested` and `requested_action` event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
     *
     * Repository and organization webhooks only receive payloads for the `created` and `completed` event types in repositories.
     *
     * **Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     * @description A new check run was created.
     */
    post: operations["check-run/created"];
  };
  "check-run-requested-action": {
    /**
     * This event occurs when there is activity relating to a check run. For information about check runs, see "[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api)." For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checkrun) or "[Check Runs](https://docs.github.com/github-ae@latest/rest/checks/runs)" in the REST API documentation.
     *
     * For activity relating to check suites, use the `check-suite` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the `rerequested` and `requested_action` event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
     *
     * Repository and organization webhooks only receive payloads for the `created` and `completed` event types in repositories.
     *
     * **Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     * @description A check run completed, and someone requested a followup action that your app provides. Only the GitHub App someone requests to perform an action will receive the `requested_action` payload. For more information, see "[Creating CI tests with the Checks API](https://docs.github.com/github-ae@latest/developers/apps/guides/creating-ci-tests-with-the-checks-api)."
     */
    post: operations["check-run/requested-action"];
  };
  "check-run-rerequested": {
    /**
     * This event occurs when there is activity relating to a check run. For information about check runs, see "[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api)." For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checkrun) or "[Check Runs](https://docs.github.com/github-ae@latest/rest/checks/runs)" in the REST API documentation.
     *
     * For activity relating to check suites, use the `check-suite` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the `rerequested` and `requested_action` event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
     *
     * Repository and organization webhooks only receive payloads for the `created` and `completed` event types in repositories.
     *
     * **Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     * @description Someone requested to re-run a check run. Only the GitHub App that someone requests to re-run the check will receive the `rerequested` payload.
     */
    post: operations["check-run/rerequested"];
  };
  "check-suite-completed": {
    /**
     * This event occurs when there is activity relating to a check suite. For information about check suites, see "[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api)." For information about the APIs to manage check suites, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checksuite) or "[Check Suites](https://docs.github.com/github-ae@latest/rest/checks/suites)" in the REST API documentation.
     *
     * For activity relating to check runs, use the `check_run` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the `requested` and `rerequested` event types, the app must have at lease write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
     *
     * Repository and organization webhooks only receive payloads for the `completed` event types in repositories.
     *
     * **Note**: The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     * @description All check runs in a check suite have completed, and a conclusion is available.
     */
    post: operations["check-suite/completed"];
  };
  "check-suite-requested": {
    /**
     * This event occurs when there is activity relating to a check suite. For information about check suites, see "[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api)." For information about the APIs to manage check suites, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checksuite) or "[Check Suites](https://docs.github.com/github-ae@latest/rest/checks/suites)" in the REST API documentation.
     *
     * For activity relating to check runs, use the `check_run` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the `requested` and `rerequested` event types, the app must have at lease write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
     *
     * Repository and organization webhooks only receive payloads for the `completed` event types in repositories.
     *
     * **Note**: The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     * @description Someone requested to run a check suite. By default, check suites are automatically created when you create a check run. For more information, see [the GraphQL API documentation for creating a check run](https://docs.github.com/github-ae@latest/graphql/reference/mutations#createcheckrun) or "[Create a check run](https://docs.github.com/github-ae@latest/rest/checks/runs#create-a-check-run)" in the REST API documentation.
     */
    post: operations["check-suite/requested"];
  };
  "check-suite-rerequested": {
    /**
     * This event occurs when there is activity relating to a check suite. For information about check suites, see "[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api)." For information about the APIs to manage check suites, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checksuite) or "[Check Suites](https://docs.github.com/github-ae@latest/rest/checks/suites)" in the REST API documentation.
     *
     * For activity relating to check runs, use the `check_run` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the `requested` and `rerequested` event types, the app must have at lease write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
     *
     * Repository and organization webhooks only receive payloads for the `completed` event types in repositories.
     *
     * **Note**: The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     * @description Someone requested to re-run the check runs in a check suite. For more information, see [the GraphQL API documentation for creating a check suite](https://docs.github.com/github-ae@latest/graphql/reference/mutations#createchecksuite) or "[Create a check suite](https://docs.github.com/github-ae@latest/rest/checks/suites#create-a-check-suite)" in the REST API documentation.
     */
    post: operations["check-suite/rerequested"];
  };
  "code-scanning-alert-appeared-in-branch": {
    /**
     * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)" and "[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)." For information about the API to manage code scanning, see "[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.
     * @description A previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.
     */
    post: operations["code-scanning-alert/appeared-in-branch"];
  };
  "code-scanning-alert-closed-by-user": {
    /**
     * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)" and "[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)." For information about the API to manage code scanning, see "[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.
     * @description Someone closed a code scanning alert.
     */
    post: operations["code-scanning-alert/closed-by-user"];
  };
  "code-scanning-alert-created": {
    /**
     * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)" and "[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)." For information about the API to manage code scanning, see "[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.
     * @description A code scanning alert was created in a repository.
     */
    post: operations["code-scanning-alert/created"];
  };
  "code-scanning-alert-fixed": {
    /**
     * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)" and "[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)." For information about the API to manage code scanning, see "[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.
     * @description A code scanning alert was fixed in a branch by a commit.
     */
    post: operations["code-scanning-alert/fixed"];
  };
  "code-scanning-alert-reopened": {
    /**
     * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)" and "[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)." For information about the API to manage code scanning, see "[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.
     * @description A previously fixed code scanning alert reappeared in a branch.
     */
    post: operations["code-scanning-alert/reopened"];
  };
  "code-scanning-alert-reopened-by-user": {
    /**
     * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)" and "[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)." For information about the API to manage code scanning, see "[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.
     * @description Someone reopened a code scanning alert.
     */
    post: operations["code-scanning-alert/reopened-by-user"];
  };
  "commit-comment-created": {
    /**
     * This event occurs when there is activity relating to commit comments. For more information about commit comments, see "[Commenting on a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request)." For information about the APIs to manage commit comments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#commitcomment) or "[Commit comments](https://docs.github.com/github-ae@latest/rest/commits/comments)" in the REST API documentation.
     *
     * For activity relating to comments on pull request reviews, use the `pull_request_review_comment` event. For activity relating to issue comments, use the `issue_comment` event. For activity relating to discussion comments, use the `discussion_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
     * @description Someone commented on a commit.
     */
    post: operations["commit-comment/created"];
  };
  create: {
    /**
     * This event occurs when a Git branch or tag is created.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
     *
     * **Note**: This event will not occur when more than three tags are created at once.
     */
    post: operations["create"];
  };
  delete: {
    /**
     * This event occurs when a Git branch or tag is deleted.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
     *
     * **Note**: This event will not occur when more than three tags are deleted at once.
     */
    post: operations["delete"];
  };
  "dependabot-alert-created": {
    /**
     * This event occurs when there is activity relating to Dependabot alerts.
     *
     * For more information about Dependabot alerts, see "[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)." For information about the API to manage Dependabot alerts, see "[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
     *
     * **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
     * @description A manifest file change introduced a vulnerable dependency, or a GitHub Security Advisory was published and an existing dependency was found to be vulnerable.
     */
    post: operations["dependabot-alert/created"];
  };
  "dependabot-alert-dismissed": {
    /**
     * This event occurs when there is activity relating to Dependabot alerts.
     *
     * For more information about Dependabot alerts, see "[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)." For information about the API to manage Dependabot alerts, see "[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
     *
     * **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
     * @description A Dependabot alert was manually closed.
     */
    post: operations["dependabot-alert/dismissed"];
  };
  "dependabot-alert-fixed": {
    /**
     * This event occurs when there is activity relating to Dependabot alerts.
     *
     * For more information about Dependabot alerts, see "[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)." For information about the API to manage Dependabot alerts, see "[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
     *
     * **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
     * @description A manifest file change removed a vulnerability.
     */
    post: operations["dependabot-alert/fixed"];
  };
  "dependabot-alert-reintroduced": {
    /**
     * This event occurs when there is activity relating to Dependabot alerts.
     *
     * For more information about Dependabot alerts, see "[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)." For information about the API to manage Dependabot alerts, see "[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
     *
     * **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
     * @description A manifest file change introduced a vulnerable dependency that had previously been fixed.
     */
    post: operations["dependabot-alert/reintroduced"];
  };
  "dependabot-alert-reopened": {
    /**
     * This event occurs when there is activity relating to Dependabot alerts.
     *
     * For more information about Dependabot alerts, see "[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)." For information about the API to manage Dependabot alerts, see "[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
     *
     * **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
     * @description A Dependabot alert was manually reopened.
     */
    post: operations["dependabot-alert/reopened"];
  };
  "deploy-key-created": {
    /**
     * This event occurs when there is activity relating to deploy keys. For more information, see "[Managing deploy keys](https://docs.github.com/github-ae@latest/developers/overview/managing-deploy-keys)." For information about the APIs to manage deploy keys, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#deploykey) or "[Deploy keys](https://docs.github.com/github-ae@latest/rest/deploy-keys)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
     * @description A deploy key was created.
     */
    post: operations["deploy-key/created"];
  };
  "deploy-key-deleted": {
    /**
     * This event occurs when there is activity relating to deploy keys. For more information, see "[Managing deploy keys](https://docs.github.com/github-ae@latest/developers/overview/managing-deploy-keys)." For information about the APIs to manage deploy keys, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#deploykey) or "[Deploy keys](https://docs.github.com/github-ae@latest/rest/deploy-keys)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
     * @description A deploy key was deleted.
     */
    post: operations["deploy-key/deleted"];
  };
  "deployment-created": {
    /**
     * This event occurs when there is activity relating to deployments. For more information, see "[About deployments](https://docs.github.com/github-ae@latest/actions/deployment/about-deployments)." For information about the APIs to manage deployments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#deployment) or "[Deployments](https://docs.github.com/github-ae@latest/rest/deployments/deployments)" in the REST API documentation.
     *
     * For activity relating to deployment status, use the `deployment_status` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
     * @description A deployment was created.
     */
    post: operations["deployment/created"];
  };
  "deployment-status-created": {
    /**
     * This event occurs when there is activity relating to deployment statuses. For more information, see "[About deployments](https://docs.github.com/github-ae@latest/actions/deployment/about-deployments)." For information about the APIs to manage deployments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#deployment) or "[Deployments](https://docs.github.com/github-ae@latest/rest/deployments/deployments)" in the REST API documentation.
     *
     * For activity relating to deployment creation, use the `deployment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
     * @description A new deployment status was created.
     */
    post: operations["deployment-status/created"];
  };
  "discussion-answered": {
    /**
     * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a comment on a discussion, use the `discussion_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description A comment on the discussion was marked as the answer.
     */
    post: operations["discussion/answered"];
  };
  "discussion-category-changed": {
    /**
     * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a comment on a discussion, use the `discussion_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description The category of a discussion was changed.
     */
    post: operations["discussion/category-changed"];
  };
  "discussion-comment-created": {
    /**
     * This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a discussion as opposed to comments on a discussion, use the `discussion` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description A comment on a discussion was created.
     */
    post: operations["discussion-comment/created"];
  };
  "discussion-comment-deleted": {
    /**
     * This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a discussion as opposed to comments on a discussion, use the `discussion` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description A comment on a discussion was deleted.
     */
    post: operations["discussion-comment/deleted"];
  };
  "discussion-comment-edited": {
    /**
     * This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a discussion as opposed to comments on a discussion, use the `discussion` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description A comment on a discussion was edited.
     */
    post: operations["discussion-comment/edited"];
  };
  "discussion-created": {
    /**
     * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a comment on a discussion, use the `discussion_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description A discussion was created.
     */
    post: operations["discussion/created"];
  };
  "discussion-deleted": {
    /**
     * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a comment on a discussion, use the `discussion_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description A discussion was deleted.
     */
    post: operations["discussion/deleted"];
  };
  "discussion-edited": {
    /**
     * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a comment on a discussion, use the `discussion_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description The title or body on a discussion was edited, or the category of the discussion was changed.
     */
    post: operations["discussion/edited"];
  };
  "discussion-labeled": {
    /**
     * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a comment on a discussion, use the `discussion_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description A label was added to a discussion.
     */
    post: operations["discussion/labeled"];
  };
  "discussion-locked": {
    /**
     * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a comment on a discussion, use the `discussion_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description A discussion was locked.
     */
    post: operations["discussion/locked"];
  };
  "discussion-pinned": {
    /**
     * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a comment on a discussion, use the `discussion_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description A discussion was pinned.
     */
    post: operations["discussion/pinned"];
  };
  "discussion-transferred": {
    /**
     * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a comment on a discussion, use the `discussion_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description A discussion was transferred to another repository.
     */
    post: operations["discussion/transferred"];
  };
  "discussion-unanswered": {
    /**
     * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a comment on a discussion, use the `discussion_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description A comment on the discussion was unmarked as the answer.
     */
    post: operations["discussion/unanswered"];
  };
  "discussion-unlabeled": {
    /**
     * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a comment on a discussion, use the `discussion_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description A label was removed from a discussion.
     */
    post: operations["discussion/unlabeled"];
  };
  "discussion-unlocked": {
    /**
     * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a comment on a discussion, use the `discussion_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description A discussion was unlocked.
     */
    post: operations["discussion/unlocked"];
  };
  "discussion-unpinned": {
    /**
     * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
     *
     * For activity relating to a comment on a discussion, use the `discussion_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
     *
     * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
     * @description A discussion was unpinned.
     */
    post: operations["discussion/unpinned"];
  };
  fork: {
    /**
     * This event occurs when someone forks a repository. For more information, see "[Fork a repo](https://docs.github.com/github-ae@latest/get-started/quickstart/fork-a-repo)." For information about the API to manage forks, see "[Forks](https://docs.github.com/github-ae@latest/rest/repos/forks)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
     */
    post: operations["fork"];
  };
  "github-app-authorization-revoked": {
    /**
     * This event occurs when a user revokes their authorization of a GitHub App. For more information, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the API to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/apps)" in the REST API documentation.
     *
     * A GitHub App receives this webhook by default and cannot unsubscribe from this event.
     *
     * Anyone can revoke their authorization of a GitHub App from their [GitHub account settings page](https://github.com/settings/apps/authorizations). Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the `401 Bad Credentials` error. For details about user-to-server requests, which require GitHub App authorization, see "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/github-ae@latest/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)."
     * @description Someone revoked their authorization of a GitHub App.
     */
    post: operations["github-app-authorization/revoked"];
  };
  gollum: {
    /**
     * This event occurs when someone creates or updates a wiki page. For more information, see "[About wikis](https://docs.github.com/github-ae@latest/communities/documenting-your-project-with-wikis/about-wikis)."
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
     */
    post: operations["gollum"];
  };
  "installation-created": {
    /**
     * This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
     *
     * For more information about GitHub Apps, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
     * @description Someone installed a GitHub App on a user or organization account.
     */
    post: operations["installation/created"];
  };
  "installation-deleted": {
    /**
     * This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
     *
     * For more information about GitHub Apps, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
     * @description Someone uninstalled a GitHub App from their user or organization account.
     */
    post: operations["installation/deleted"];
  };
  "installation-new-permissions-accepted": {
    /**
     * This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
     *
     * For more information about GitHub Apps, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
     * @description Someone granted new permissions to a GitHub App.
     */
    post: operations["installation/new-permissions-accepted"];
  };
  "installation-repositories-added": {
    /**
     * This event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
     *
     * For more information about GitHub Apps, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
     * @description A GitHub App installation was granted access to one or more repositories.
     */
    post: operations["installation-repositories/added"];
  };
  "installation-repositories-removed": {
    /**
     * This event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
     *
     * For more information about GitHub Apps, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
     * @description Access to one or more repositories was revoked for a GitHub App installation.
     */
    post: operations["installation-repositories/removed"];
  };
  "installation-suspend": {
    /**
     * This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
     *
     * For more information about GitHub Apps, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
     * @description Someone blocked access by a GitHub App to their user or organization account.
     */
    post: operations["installation/suspend"];
  };
  "installation-target-renamed": {
    /**
     * This event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
     * @description Somebody renamed the user or organization account that a GitHub App is installed on.
     */
    post: operations["installation-target/renamed"];
  };
  "installation-unsuspend": {
    /**
     * This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
     *
     * For more information about GitHub Apps, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
     * @description A GitHub App that was blocked from accessing a user or organization account was given access the account again.
     */
    post: operations["installation/unsuspend"];
  };
  "issue-comment-created": {
    /**
     * This event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)" and "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage issue comments, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issuecomment) or "[Issue comments](https://docs.github.com/github-ae@latest/rest/issues/comments)" in the REST API documentation.
     *
     * For activity relating to an issue as opposed to comments on an issue, use the `issue` event. For activity related to pull request reviews or pull request review comments, use the `pull_request_review` or `pull_request_review_comment` events. For more information about the different types of pull request comments, see "[Working with comments](https://docs.github.com/github-ae@latest/rest/guides/working-with-comments)."
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
     * @description A comment on an issue or pull request was created.
     */
    post: operations["issue-comment/created"];
  };
  "issue-comment-deleted": {
    /**
     * This event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)" and "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage issue comments, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issuecomment) or "[Issue comments](https://docs.github.com/github-ae@latest/rest/issues/comments)" in the REST API documentation.
     *
     * For activity relating to an issue as opposed to comments on an issue, use the `issue` event. For activity related to pull request reviews or pull request review comments, use the `pull_request_review` or `pull_request_review_comment` events. For more information about the different types of pull request comments, see "[Working with comments](https://docs.github.com/github-ae@latest/rest/guides/working-with-comments)."
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
     * @description A comment on an issue or pull request was deleted.
     */
    post: operations["issue-comment/deleted"];
  };
  "issue-comment-edited": {
    /**
     * This event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)" and "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage issue comments, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issuecomment) or "[Issue comments](https://docs.github.com/github-ae@latest/rest/issues/comments)" in the REST API documentation.
     *
     * For activity relating to an issue as opposed to comments on an issue, use the `issue` event. For activity related to pull request reviews or pull request review comments, use the `pull_request_review` or `pull_request_review_comment` events. For more information about the different types of pull request comments, see "[Working with comments](https://docs.github.com/github-ae@latest/rest/guides/working-with-comments)."
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
     * @description A comment on an issue or pull request was edited.
     */
    post: operations["issue-comment/edited"];
  };
  "issues-assigned": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description An issue was assigned to a user.
     */
    post: operations["issues/assigned"];
  };
  "issues-closed": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description An issue was closed.
     */
    post: operations["issues/closed"];
  };
  "issues-deleted": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description An issue was deleted.
     */
    post: operations["issues/deleted"];
  };
  "issues-demilestoned": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description An issue was removed from a milestone.
     */
    post: operations["issues/demilestoned"];
  };
  "issues-edited": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description The title or body on an issue was edited.
     */
    post: operations["issues/edited"];
  };
  "issues-labeled": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description A label was added to an issue.
     */
    post: operations["issues/labeled"];
  };
  "issues-locked": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description Conversation on an issue was locked. For more information, see "[Locking conversations](https://docs.github.com/github-ae@latest/communities/moderating-comments-and-conversations/locking-conversations)."
     */
    post: operations["issues/locked"];
  };
  "issues-milestoned": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description An issue was added to a milestone.
     */
    post: operations["issues/milestoned"];
  };
  "issues-opened": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description An issue was created. When a closed issue is reopened, the action will be `reopened` instead.
     */
    post: operations["issues/opened"];
  };
  "issues-pinned": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description An issue was pinned to a repository. For more information, see "[Pinning an issue to your repository](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository)."
     */
    post: operations["issues/pinned"];
  };
  "issues-reopened": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description A closed issue was reopened.
     */
    post: operations["issues/reopened"];
  };
  "issues-transferred": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description An issue was transferred to another repository. For more information, see "[Transferring an issue to another repository](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/transferring-an-issue-to-another-repository)."
     */
    post: operations["issues/transferred"];
  };
  "issues-unassigned": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description A user was unassigned from an issue.
     */
    post: operations["issues/unassigned"];
  };
  "issues-unlabeled": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description A label was removed from an issue.
     */
    post: operations["issues/unlabeled"];
  };
  "issues-unlocked": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description Conversation on an issue was locked. For more information, see "[Locking conversations](https://docs.github.com/github-ae@latest/communities/moderating-comments-and-conversations/locking-conversations)."
     */
    post: operations["issues/unlocked"];
  };
  "issues-unpinned": {
    /**
     * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
     *
     * For activity relating to a comment on an issue, use the `issue_comment` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
     * @description An issue was unpinned from a repository. For more information, see "[Pinning an issue to your repository](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository)."
     */
    post: operations["issues/unpinned"];
  };
  "label-created": {
    /**
     * This event occurs when there is activity relating to labels. For more information, see "[Managing labels](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/managing-labels)." For information about the APIs to manage labels, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#label) or "[Labels](https://docs.github.com/github-ae@latest/rest/issues/labels)" in the REST API documentation.
     *
     * If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the `labeled` or `unlabeled` action type for the `issues`, `pull_request`, or `discussion` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description A label was created.
     */
    post: operations["label/created"];
  };
  "label-deleted": {
    /**
     * This event occurs when there is activity relating to labels. For more information, see "[Managing labels](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/managing-labels)." For information about the APIs to manage labels, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#label) or "[Labels](https://docs.github.com/github-ae@latest/rest/issues/labels)" in the REST API documentation.
     *
     * If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the `labeled` or `unlabeled` action type for the `issues`, `pull_request`, or `discussion` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description A label was deleted.
     */
    post: operations["label/deleted"];
  };
  "label-edited": {
    /**
     * This event occurs when there is activity relating to labels. For more information, see "[Managing labels](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/managing-labels)." For information about the APIs to manage labels, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#label) or "[Labels](https://docs.github.com/github-ae@latest/rest/issues/labels)" in the REST API documentation.
     *
     * If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the `labeled` or `unlabeled` action type for the `issues`, `pull_request`, or `discussion` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description A label's name, description, or color was changed.
     */
    post: operations["label/edited"];
  };
  "member-added": {
    /**
     * This event occurs when there is activity relating to collaborators in a repository. For more information, see "[Adding outside collaborators to repositories in your organization](https://docs.github.com/github-ae@latest/organizations/managing-user-access-to-your-organizations-repositories/adding-outside-collaborators-to-repositories-in-your-organization)." For more information about the API to manage repository collaborators, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repositorycollaboratorconnection) or "[Collaborators](https://docs.github.com/github-ae@latest/rest/collaborators/collaborators)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     * @description A GitHub user accepted an invitation to a repository.
     */
    post: operations["member/added"];
  };
  "member-edited": {
    /**
     * This event occurs when there is activity relating to collaborators in a repository. For more information, see "[Adding outside collaborators to repositories in your organization](https://docs.github.com/github-ae@latest/organizations/managing-user-access-to-your-organizations-repositories/adding-outside-collaborators-to-repositories-in-your-organization)." For more information about the API to manage repository collaborators, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repositorycollaboratorconnection) or "[Collaborators](https://docs.github.com/github-ae@latest/rest/collaborators/collaborators)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     * @description Permissions were changed for a collaborator on a repository.
     */
    post: operations["member/edited"];
  };
  "member-removed": {
    /**
     * This event occurs when there is activity relating to collaborators in a repository. For more information, see "[Adding outside collaborators to repositories in your organization](https://docs.github.com/github-ae@latest/organizations/managing-user-access-to-your-organizations-repositories/adding-outside-collaborators-to-repositories-in-your-organization)." For more information about the API to manage repository collaborators, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repositorycollaboratorconnection) or "[Collaborators](https://docs.github.com/github-ae@latest/rest/collaborators/collaborators)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     * @description A collaborator was removed from a repository.
     */
    post: operations["member/removed"];
  };
  "membership-added": {
    /**
     * This event occurs when there is activity relating to team membership. For more information, see "[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams)." For more information about the APIs to manage team memberships, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#team) or "[Team members](https://docs.github.com/github-ae@latest/rest/teams/members)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     * @description An organization member was added to a team.
     */
    post: operations["membership/added"];
  };
  "membership-removed": {
    /**
     * This event occurs when there is activity relating to team membership. For more information, see "[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams)." For more information about the API to manage team memberships, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#team) or "[Team members](https://docs.github.com/github-ae@latest/rest/teams/members)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     * @description An organization member was removed from a team.
     */
    post: operations["membership/removed"];
  };
  "merge-group-checks-requested": {
    /**
     * This event occurs when there is activity relating to a merge group in a merge queue. For more information, see "[Managing a merge queue](https://docs.github.com/github-ae@latest/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue)."
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.
     *
     * **Note**: The pull request merge queue feature is currently in public beta and subject to change.
     * @description Status checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
     *
     * When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.
     */
    post: operations["merge-group/checks-requested"];
  };
  "meta-deleted": {
    /**
     * This event occurs when there is activity relating to a webhook itself.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.
     * @description The webhook was deleted.
     */
    post: operations["meta/deleted"];
  };
  "milestone-closed": {
    /**
     * This event occurs when there is activity relating to milestones. For more information, see "[About milestones](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/about-milestones)." For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#milestone) or "[Milestones](https://docs.github.com/github-ae@latest/rest/issues/milestones)" in the REST API documentation.
     *
     * If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the `milestoned` or `demilestoned` action type for the `issues` or `pull_request` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
     * @description A milestone was closed.
     */
    post: operations["milestone/closed"];
  };
  "milestone-created": {
    /**
     * This event occurs when there is activity relating to milestones. For more information, see "[About milestones](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/about-milestones)." For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#milestone) or "[Milestones](https://docs.github.com/github-ae@latest/rest/issues/milestones)" in the REST API documentation.
     *
     * If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the `milestoned` or `demilestoned` action type for the `issues` or `pull_request` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
     * @description A milestone was created.
     */
    post: operations["milestone/created"];
  };
  "milestone-deleted": {
    /**
     * This event occurs when there is activity relating to milestones. For more information, see "[About milestones](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/about-milestones)." For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#milestone) or "[Milestones](https://docs.github.com/github-ae@latest/rest/issues/milestones)" in the REST API documentation.
     *
     * If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the `milestoned` or `demilestoned` action type for the `issues` or `pull_request` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
     * @description A milestone was deleted.
     */
    post: operations["milestone/deleted"];
  };
  "milestone-edited": {
    /**
     * This event occurs when there is activity relating to milestones. For more information, see "[About milestones](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/about-milestones)." For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#milestone) or "[Milestones](https://docs.github.com/github-ae@latest/rest/issues/milestones)" in the REST API documentation.
     *
     * If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the `milestoned` or `demilestoned` action type for the `issues` or `pull_request` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
     * @description A milestone was edited.
     */
    post: operations["milestone/edited"];
  };
  "milestone-opened": {
    /**
     * This event occurs when there is activity relating to milestones. For more information, see "[About milestones](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/about-milestones)." For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#milestone) or "[Milestones](https://docs.github.com/github-ae@latest/rest/issues/milestones)" in the REST API documentation.
     *
     * If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the `milestoned` or `demilestoned` action type for the `issues` or `pull_request` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
     * @description A milestone was opened.
     */
    post: operations["milestone/opened"];
  };
  "organization-deleted": {
    /**
     * This event occurs when there is activity relating to an organization and its members. For more information, see "[About organizations](https://docs.github.com/github-ae@latest/organizations/collaborating-with-groups-in-organizations/about-organizations)." For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#organization) or "[Organizations](https://docs.github.com/github-ae@latest/rest/orgs)" in the REST API documentation.
     *
     * If you want to receive an event when a non-member is blocked or unblocked from an organization, use the `org_block` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     * @description An organization was deleted.
     */
    post: operations["organization/deleted"];
  };
  "organization-member-added": {
    /**
     * This event occurs when there is activity relating to an organization and its members. For more information, see "[About organizations](https://docs.github.com/github-ae@latest/organizations/collaborating-with-groups-in-organizations/about-organizations)." For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#organization) or "[Organizations](https://docs.github.com/github-ae@latest/rest/orgs)" in the REST API documentation.
     *
     * If you want to receive an event when a non-member is blocked or unblocked from an organization, use the `org_block` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     * @description A member accepted an invitation to join an organization.
     */
    post: operations["organization/member-added"];
  };
  "organization-member-invited": {
    /**
     * This event occurs when there is activity relating to an organization and its members. For more information, see "[About organizations](https://docs.github.com/github-ae@latest/organizations/collaborating-with-groups-in-organizations/about-organizations)." For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#organization) or "[Organizations](https://docs.github.com/github-ae@latest/rest/orgs)" in the REST API documentation.
     *
     * If you want to receive an event when a non-member is blocked or unblocked from an organization, use the `org_block` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     * @description A member was invited to join the organization.
     */
    post: operations["organization/member-invited"];
  };
  "organization-member-removed": {
    /**
     * This event occurs when there is activity relating to an organization and its members. For more information, see "[About organizations](https://docs.github.com/github-ae@latest/organizations/collaborating-with-groups-in-organizations/about-organizations)." For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#organization) or "[Organizations](https://docs.github.com/github-ae@latest/rest/orgs)" in the REST API documentation.
     *
     * If you want to receive an event when a non-member is blocked or unblocked from an organization, use the `org_block` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     * @description A member was removed from the organization.
     */
    post: operations["organization/member-removed"];
  };
  "organization-renamed": {
    /**
     * This event occurs when there is activity relating to an organization and its members. For more information, see "[About organizations](https://docs.github.com/github-ae@latest/organizations/collaborating-with-groups-in-organizations/about-organizations)." For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#organization) or "[Organizations](https://docs.github.com/github-ae@latest/rest/orgs)" in the REST API documentation.
     *
     * If you want to receive an event when a non-member is blocked or unblocked from an organization, use the `org_block` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     * @description The name of an organization was changed.
     */
    post: operations["organization/renamed"];
  };
  "package-published": {
    /**
     * This event occurs when there is activity relating to GitHub Packages. For more information, see "[Introduction to GitHub Packages](https://docs.github.com/github-ae@latest/packages/learn-github-packages/introduction-to-github-packages)." For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#package) or "[Packages](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
     *
     * To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
     * @description A package was published to a registry.
     */
    post: operations["package/published"];
  };
  "package-updated": {
    /**
     * This event occurs when there is activity relating to GitHub Packages. For more information, see "[Introduction to GitHub Packages](https://docs.github.com/github-ae@latest/packages/learn-github-packages/introduction-to-github-packages)." For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#package) or "[Packages](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
     *
     * To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
     * @description A previously published package was updated.
     */
    post: operations["package/updated"];
  };
  "page-build": {
    /**
     * This event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "[Configuring a publishing source for your GitHub Pages site](https://docs.github.com/github-ae@latest/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site)." For information about the API to manage GitHub Pages, see "[Pages](https://docs.github.com/github-ae@latest/rest/pages)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.
     */
    post: operations["page-build"];
  };
  ping: {
    /** This event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly. */
    post: operations["ping"];
  };
  "project-card-converted": {
    /**
     * This event occurs when there is activity relating to a card on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
     *
     * For activity relating to a project or a column on a project, use the `project` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
     * @description A note in a classic project was converted to an issue.
     */
    post: operations["project-card/converted"];
  };
  "project-card-created": {
    /**
     * This event occurs when there is activity relating to a card on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
     *
     * For activity relating to a project or a column on a project, use the `project` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
     * @description A card was added to a classic project.
     */
    post: operations["project-card/created"];
  };
  "project-card-deleted": {
    /**
     * This event occurs when there is activity relating to a card on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
     *
     * For activity relating to a project or a column on a project, use the `project` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
     * @description A card on a classic project was deleted.
     */
    post: operations["project-card/deleted"];
  };
  "project-card-edited": {
    /**
     * This event occurs when there is activity relating to a card on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
     *
     * For activity relating to a project or a column on a project, use the `project` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
     * @description A note on a classic project was edited.
     */
    post: operations["project-card/edited"];
  };
  "project-card-moved": {
    /**
     * This event occurs when there is activity relating to a card on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
     *
     * For activity relating to a project or a column on a project, use the `project` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
     * @description A card on a classic project was moved to another column or to another position in its column.
     */
    post: operations["project-card/moved"];
  };
  "project-closed": {
    /**
     * This event occurs when there is activity relating to a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
     *
     * For activity relating to a card or column on a project, use the `project_card` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
     * @description A classic project was closed.
     */
    post: operations["project/closed"];
  };
  "project-column-created": {
    /**
     * This event occurs when there is activity relating to a column on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
     *
     * For activity relating to a project or a card on a project, use the `project` and `project_card` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
     * @description A column was added to a classic project.
     */
    post: operations["project-column/created"];
  };
  "project-column-deleted": {
    /**
     * This event occurs when there is activity relating to a column on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
     *
     * For activity relating to a project or a card on a project, use the `project` and `project_card` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
     * @description A column was deleted from a classic project.
     */
    post: operations["project-column/deleted"];
  };
  "project-column-edited": {
    /**
     * This event occurs when there is activity relating to a column on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
     *
     * For activity relating to a project or a card on a project, use the `project` and `project_card` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
     * @description The name of a column on a classic project was changed.
     */
    post: operations["project-column/edited"];
  };
  "project-column-moved": {
    /**
     * This event occurs when there is activity relating to a column on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
     *
     * For activity relating to a project or a card on a project, use the `project` and `project_card` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
     * @description A column was moved to a new position on a classic project.
     */
    post: operations["project-column/moved"];
  };
  "project-created": {
    /**
     * This event occurs when there is activity relating to a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
     *
     * For activity relating to a card or column on a project, use the `project_card` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
     * @description A classic project was created.
     */
    post: operations["project/created"];
  };
  "project-deleted": {
    /**
     * This event occurs when there is activity relating to a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
     *
     * For activity relating to a card or column on a project, use the `project_card` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
     * @description A classic project was deleted.
     */
    post: operations["project/deleted"];
  };
  "project-edited": {
    /**
     * This event occurs when there is activity relating to a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
     *
     * For activity relating to a card or column on a project, use the `project_card` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
     * @description The name or description of a classic project was changed.
     */
    post: operations["project/edited"];
  };
  "project-reopened": {
    /**
     * This event occurs when there is activity relating to a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
     *
     * For activity relating to a card or column on a project, use the `project_card` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
     * @description A classic project was closed.
     */
    post: operations["project/reopened"];
  };
  "projects-v2-closed": {
    /**
     * This event occurs when there is activity relating to an organization-level project. For more information, see "[About Projects](https://docs.github.com/github-ae@latest/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)." For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#projectv2).
     *
     * For activity relating to a item on a project, use the `projects_v2_item` event. For activity relating to Projects (classic), use the `project`, project_card`, and `project_column` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
     *
     * **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
     * @description A project in the organization was closed.
     */
    post: operations["projects-v2/closed"];
  };
  "projects-v2-created": {
    /**
     * This event occurs when there is activity relating to an organization-level project. For more information, see "[About Projects](https://docs.github.com/github-ae@latest/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)." For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#projectv2).
     *
     * For activity relating to a item on a project, use the `projects_v2_item` event. For activity relating to Projects (classic), use the `project`, project_card`, and `project_column` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
     *
     * **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
     * @description A project in the organization was created.
     */
    post: operations["projects-v2/created"];
  };
  "projects-v2-deleted": {
    /**
     * This event occurs when there is activity relating to an organization-level project. For more information, see "[About Projects](https://docs.github.com/github-ae@latest/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)." For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#projectv2).
     *
     * For activity relating to a item on a project, use the `projects_v2_item` event. For activity relating to Projects (classic), use the `project`, project_card`, and `project_column` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
     *
     * **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
     * @description A project in the organization was deleted.
     */
    post: operations["projects-v2/deleted"];
  };
  "projects-v2-edited": {
    /**
     * This event occurs when there is activity relating to an organization-level project. For more information, see "[About Projects](https://docs.github.com/github-ae@latest/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)." For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#projectv2).
     *
     * For activity relating to a item on a project, use the `projects_v2_item` event. For activity relating to Projects (classic), use the `project`, project_card`, and `project_column` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
     *
     * **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
     * @description The title, description, or README of a project in the organization was changed.
     */
    post: operations["projects-v2/edited"];
  };
  "projects-v2-reopened": {
    /**
     * This event occurs when there is activity relating to an organization-level project. For more information, see "[About Projects](https://docs.github.com/github-ae@latest/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)." For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#projectv2).
     *
     * For activity relating to a item on a project, use the `projects_v2_item` event. For activity relating to Projects (classic), use the `project`, project_card`, and `project_column` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
     *
     * **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
     * @description A project in the organization was reopened.
     */
    post: operations["projects-v2/reopened"];
  };
  public: {
    /**
     * This event occurs when repository visibility changes from private to public. For more information, see "[Setting repository visibility](https://docs.github.com/github-ae@latest/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/setting-repository-visibility)."
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     */
    post: operations["public"];
  };
  "pull-request-assigned": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A pull request was assigned to a user.
     */
    post: operations["pull-request/assigned"];
  };
  "pull-request-auto-merge-disabled": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description Auto merge was disabled for a pull request. For more information, see "[Automatically merging a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request)."
     */
    post: operations["pull-request/auto-merge-disabled"];
  };
  "pull-request-auto-merge-enabled": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description Auto merge was enabled for a pull request. For more information, see "[Automatically merging a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request)."
     */
    post: operations["pull-request/auto-merge-enabled"];
  };
  "pull-request-closed": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A pull request was closed. If `merged` is false in the webhook payload, the pull request was closed with unmerged commits. If `merged` is true in the webhook payload, the pull request was merged.
     */
    post: operations["pull-request/closed"];
  };
  "pull-request-converted-to-draft": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A pull request was converted to a draft. For more information, see "[Changing the stage of a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request)."
     */
    post: operations["pull-request/converted-to-draft"];
  };
  "pull-request-demilestoned": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A pull request was removed from a milestone.
     */
    post: operations["pull-request/demilestoned"];
  };
  "pull-request-edited": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description The title or body of a pull request was edited.
     */
    post: operations["pull-request/edited"];
  };
  "pull-request-labeled": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A label was added to a pull request.
     */
    post: operations["pull-request/labeled"];
  };
  "pull-request-locked": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description Conversation on a pull request was locked. For more information, see "[Locking conversations](https://docs.github.com/github-ae@latest/communities/moderating-comments-and-conversations/locking-conversations)."
     */
    post: operations["pull-request/locked"];
  };
  "pull-request-milestoned": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A pull request was added to a milestone.
     */
    post: operations["pull-request/milestoned"];
  };
  "pull-request-opened": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A pull request was created
     */
    post: operations["pull-request/opened"];
  };
  "pull-request-ready-for-review": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A draft pull request was marked as ready for review. For more information, see "[Changing the stage of a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request)."
     */
    post: operations["pull-request/ready-for-review"];
  };
  "pull-request-reopened": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments,or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A previously closed pull request was reopened.
     */
    post: operations["pull-request/reopened"];
  };
  "pull-request-review-comment-created": {
    /**
     * This event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "[Commenting on a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)." For information about the APIs to manage pull request review comments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreviewcomment) or "[Pull request review comments](https://docs.github.com/github-ae@latest/rest/pulls/comments)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request comments, or pull request review threads, use the `pull_request_review`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A comment on a pull request diff was created.
     */
    post: operations["pull-request-review-comment/created"];
  };
  "pull-request-review-comment-deleted": {
    /**
     * This event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "[Commenting on a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)." For information about the APIs to manage pull request review comments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreviewcomment) or "[Pull request review comments](https://docs.github.com/github-ae@latest/rest/pulls/comments)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request comments, or pull request review threads, use the `pull_request_review`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A comment on a pull request diff was deleted.
     */
    post: operations["pull-request-review-comment/deleted"];
  };
  "pull-request-review-comment-edited": {
    /**
     * This event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "[Commenting on a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)." For information about the APIs to manage pull request review comments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreviewcomment) or "[Pull request review comments](https://docs.github.com/github-ae@latest/rest/pulls/comments)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request comments, or pull request review threads, use the `pull_request_review`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description The content of a comment on a pull request diff was changed.
     */
    post: operations["pull-request-review-comment/edited"];
  };
  "pull-request-review-dismissed": {
    /**
     * This event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "[About pull request reviews](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)." For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreview) or "[Pull request reviews](https://docs.github.com/github-ae@latest/rest/pulls/reviews)" in the REST API documentation.
     *
     * For activity related to pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A review on a pull request was dismissed.
     */
    post: operations["pull-request-review/dismissed"];
  };
  "pull-request-review-edited": {
    /**
     * This event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "[About pull request reviews](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)." For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreview) or "[Pull request reviews](https://docs.github.com/github-ae@latest/rest/pulls/reviews)" in the REST API documentation.
     *
     * For activity related to pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description The body comment on a pull request review was edited.
     */
    post: operations["pull-request-review/edited"];
  };
  "pull-request-review-request-removed": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A request for review by a person or team was removed from a pull request.
     */
    post: operations["pull-request/review-request-removed"];
  };
  "pull-request-review-requested": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description Review by a person or team was requested for a pull request. For more information, see "[Requesting a pull request review](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/requesting-a-pull-request-review)."
     */
    post: operations["pull-request/review-requested"];
  };
  "pull-request-review-submitted": {
    /**
     * This event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "[About pull request reviews](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)." For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreview) or "[Pull request reviews](https://docs.github.com/github-ae@latest/rest/pulls/reviews)" in the REST API documentation.
     *
     * For activity related to pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A review on a pull request was submitted.
     */
    post: operations["pull-request-review/submitted"];
  };
  "pull-request-review-thread-resolved": {
    /**
     * This event occurs when there is activity relating to a comment thread on a pull request. For more information, see "[About pull request reviews](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)." For information about the APIs to manage pull request review comment threads, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreviewthread) or "[Pull request reviews](https://docs.github.com/github-ae@latest/rest/pulls/reviews)" in the REST API documentation.
     *
     * For activity related to pull request review comments, pull request comments, or pull request reviews, use the `pull_request_review_comment`, `issue_comment`, or `pull_request_review` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A comment thread on a pull request was marked as resolved.
     */
    post: operations["pull-request-review-thread/resolved"];
  };
  "pull-request-review-thread-unresolved": {
    /**
     * This event occurs when there is activity relating to a comment thread on a pull request. For more information, see "[About pull request reviews](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)." For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreviewthread) or "[Pull request review comments](https://docs.github.com/github-ae@latest/rest/pulls/comments)" in the REST API documentation.
     *
     * For activity related to pull request review comments, pull request comments, or pull request reviews, use the `pull_request_review_comment`, `issue_comment`, or `pull_request_review` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A previously resolved comment thread on a pull request was marked as unresolved.
     */
    post: operations["pull-request-review-thread/unresolved"];
  };
  "pull-request-synchronize": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A pull request's head branch was updated. For example, the head branch was updated from the base branch or new commits were pushed to the head branch.
     */
    post: operations["pull-request/synchronize"];
  };
  "pull-request-unassigned": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A user was unassigned from a pull request.
     */
    post: operations["pull-request/unassigned"];
  };
  "pull-request-unlabeled": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description A label was removed from a pull request.
     */
    post: operations["pull-request/unlabeled"];
  };
  "pull-request-unlocked": {
    /**
     * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
     *
     * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
     * @description Conversation on a pull request was unlocked. For more information, see "[Locking conversations](https://docs.github.com/github-ae@latest/communities/moderating-comments-and-conversations/locking-conversations)."
     */
    post: operations["pull-request/unlocked"];
  };
  push: {
    /**
     * This event occurs when a commit or tag is pushed.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
     *
     * **Note**: An event will not be created when more than three tags are pushed at once.
     */
    post: operations["push"];
  };
  "registry-package-published": {
    /**
     * This event occurs when there is activity relating to GitHub Packages. For more information, see "[Introduction to GitHub Packages](https://docs.github.com/github-ae@latest/packages/learn-github-packages/introduction-to-github-packages)." For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#package) or "[Packages](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
     *
     * To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
     *
     * **Note**: GitHub recommends that you use the newer `package` event instead.
     * @description A package was published to a registry.
     */
    post: operations["registry-package/published"];
  };
  "registry-package-updated": {
    /**
     * This event occurs when there is activity relating to GitHub Packages. For more information, see "[Introduction to GitHub Packages](https://docs.github.com/github-ae@latest/packages/learn-github-packages/introduction-to-github-packages)." For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#package) or "[Packages](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
     *
     * To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
     *
     * **Note**: GitHub recommends that you use the newer `package` event instead
     * @description A package that was previously published to a registry was updated.
     */
    post: operations["registry-package/updated"];
  };
  "release-created": {
    /**
     * This event occurs when there is activity relating to releases. For more information, see "[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases)." For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or "[Releases](https://docs.github.com/github-ae@latest/rest/releases)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
     * @description A draft was saved, or a release or pre-release was published without previously being saved as a draft.
     */
    post: operations["release/created"];
  };
  "release-deleted": {
    /**
     * This event occurs when there is activity relating to releases. For more information, see "[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases)." For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or "[Releases](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
     * @description A release, pre-release, or draft release was deleted.
     */
    post: operations["release/deleted"];
  };
  "release-edited": {
    /**
     * This event occurs when there is activity relating to releases. For more information, see "[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases)." For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or "[Releases](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
     * @description The details of a release, pre-release, or draft release were edited. For more information, see "[Managing releases in a repository](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/managing-releases-in-a-repository#editing-a-release)."
     */
    post: operations["release/edited"];
  };
  "release-prereleased": {
    /**
     * This event occurs when there is activity relating to releases. For more information, see "[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases)." For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or "[Releases](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
     * @description A release was created and identified as a pre-release. A pre-release is a release that is not ready for production and may be unstable.
     */
    post: operations["release/prereleased"];
  };
  "release-published": {
    /**
     * This event occurs when there is activity relating to releases. For more information, see "[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases)." For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or "[Releases](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
     * @description A release, pre-release, or draft of a release was published.
     */
    post: operations["release/published"];
  };
  "release-released": {
    /**
     * This event occurs when there is activity relating to releases. For more information, see "[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases)." For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or "[Releases](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
     * @description A release was published, or a pre-release was changed to a release.
     */
    post: operations["release/released"];
  };
  "release-unpublished": {
    /**
     * This event occurs when there is activity relating to releases. For more information, see "[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases)." For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or "[Releases](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
     * @description A release or pre-release was unpublished.
     */
    post: operations["release/unpublished"];
  };
  "repository-anonymous-access-disabled": {
    /**
     * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description Someone disabled anonymous Git read access to the repository. For more information, see "[Enabling anonymous Git read access for a repository](/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/enabling-anonymous-git-read-access-for-a-repository)."
     */
    post: operations["repository/anonymous-access-disabled"];
  };
  "repository-anonymous-access-enabled": {
    /**
     * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description Someone enabled anonymous Git read access to the repository. For more information, see "[Enabling anonymous Git read access for a repository](/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/enabling-anonymous-git-read-access-for-a-repository)."
     */
    post: operations["repository/anonymous-access-enabled"];
  };
  "repository-archived": {
    /**
     * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description A repository was archived.
     */
    post: operations["repository/archived"];
  };
  "repository-created": {
    /**
     * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description A repository was created.
     */
    post: operations["repository/created"];
  };
  "repository-deleted": {
    /**
     * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description A repository was deleted. GitHub Apps and repository webhooks will not receive this event.
     */
    post: operations["repository/deleted"];
  };
  "repository-dispatch-sample.collected": {
    /**
     * This event occurs when a GitHub App sends a `POST` request to `/repos/{owner}/{repo}/dispatches`. For more information, see [the REST API documentation for creating a repository dispatch event](https://docs.github.com/github-ae@latest/rest/repos/repos#create-a-repository-dispatch-event).
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
     * @description The `event_type` that was specified in the `POST /repos/{owner}/{repo}/dispatches` request body.
     */
    post: operations["repository-dispatch/sample.collected"];
  };
  "repository-edited": {
    /**
     * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description The topics, default branch, description, or homepage of a repository was changed.
     */
    post: operations["repository/edited"];
  };
  "repository-privatized": {
    /**
     * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description The visibility of a repository was changed to `private`.
     */
    post: operations["repository/privatized"];
  };
  "repository-publicized": {
    /**
     * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description The visibility of a repository was changed to `public`.
     */
    post: operations["repository/publicized"];
  };
  "repository-renamed": {
    /**
     * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description The name of a repository was changed.
     */
    post: operations["repository/renamed"];
  };
  "repository-transferred": {
    /**
     * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description Ownership of the repository was transferred to a user or organization account. This event is only sent to the account where the ownership is transferred. To receive the `repository.transferred` event, the new owner account must have the GitHub App installed, and the App must be subscribed to "Repository" events.
     */
    post: operations["repository/transferred"];
  };
  "repository-unarchived": {
    /**
     * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description A previously archived repository was unarchived.
     */
    post: operations["repository/unarchived"];
  };
  "secret-scanning-alert-created": {
    /**
     * This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "[About secret scanning](https://docs.github.com/github-ae@latest/code-security/secret-scanning/about-secret-scanning)." For information about the API to manage secret scanning alerts, see "[Secret scanning](https://docs.github.com/github-ae@latest/rest/secret-scanning)" in the REST API documentation.
     *
     * For activity relating to secret scanning alert locations, use the `secret_scanning_alert_location` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.
     * @description A secret scanning alert was created.
     */
    post: operations["secret-scanning-alert/created"];
  };
  "secret-scanning-alert-location-created": {
    /**
     * This event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
     *
     * For more information about secret scanning, see "[About secret scanning](https://docs.github.com/github-ae@latest/code-security/secret-scanning/about-secret-scanning)." For information about the API to manage secret scanning alerts, see "[Secret scanning](https://docs.github.com/github-ae@latest/rest/secret-scanning)" in the REST API documentation.
     *
     * For activity relating to secret scanning alerts, use the `secret_scanning_alert` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.
     * @description A new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.
     */
    post: operations["secret-scanning-alert-location/created"];
  };
  "secret-scanning-alert-reopened": {
    /**
     * This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "[About secret scanning](https://docs.github.com/github-ae@latest/code-security/secret-scanning/about-secret-scanning)." For information about the API to manage secret scanning alerts, see "[Secret scanning](https://docs.github.com/github-ae@latest/rest/secret-scanning)" in the REST API documentation.
     *
     * For activity relating to secret scanning alert locations, use the `secret_scanning_alert_location` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.
     * @description A previously closed secret scanning alert was reopened.
     */
    post: operations["secret-scanning-alert/reopened"];
  };
  "secret-scanning-alert-resolved": {
    /**
     * This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "[About secret scanning](https://docs.github.com/github-ae@latest/code-security/secret-scanning/about-secret-scanning)." For information about the API to manage secret scanning alerts, see "[Secret scanning](https://docs.github.com/github-ae@latest/rest/secret-scanning)" in the REST API documentation.
     *
     * For activity relating to secret scanning alert locations, use the `secret_scanning_alert_location` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.
     * @description A secret scanning alert was closed.
     */
    post: operations["secret-scanning-alert/resolved"];
  };
  "secret-scanning-alert-revoked": {
    /**
     * This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "[About secret scanning](https://docs.github.com/github-ae@latest/code-security/secret-scanning/about-secret-scanning)." For information about the API to manage secret scanning alerts, see "[Secret scanning](https://docs.github.com/github-ae@latest/rest/secret-scanning)" in the REST API documentation.
     *
     * For activity relating to secret scanning alert locations, use the `secret_scanning_alert_location` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.
     * @description A secret scanning alert was marked as revoked.
     */
    post: operations["secret-scanning-alert/revoked"];
  };
  "security-and-analysis": {
    /**
     * This event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "[GitHub security features](https://docs.github.com/github-ae@latest/code-security/getting-started/github-security-features)."
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.
     */
    post: operations["security-and-analysis"];
  };
  "sponsorship-cancelled": {
    /**
     * This event occurs when there is activity relating to a sponsorship listing. For more information, see "[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors)." For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).
     *
     * You can only create a sponsorship webhook on GitHub.com. For more information, see "[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
     * @description A sponsorship was cancelled and the last billing cycle has ended.
     *
     * This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.
     */
    post: operations["sponsorship/cancelled"];
  };
  "sponsorship-created": {
    /**
     * This event occurs when there is activity relating to a sponsorship listing. For more information, see "[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors)." For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).
     *
     * You can only create a sponsorship webhook on GitHub.com. For more information, see "[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
     * @description A sponsor created a sponsorship for a sponsored account. This event occurs once the payment is successfully processed.
     */
    post: operations["sponsorship/created"];
  };
  "sponsorship-edited": {
    /**
     * This event occurs when there is activity relating to a sponsorship listing. For more information, see "[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors)." For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).
     *
     * You can only create a sponsorship webhook on GitHub.com. For more information, see "[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
     * @description A monthly sponsor changed who can see their sponsorship. If you recognize your sponsors publicly, you may want to update your sponsor recognition to reflect the change when this event occurs.
     */
    post: operations["sponsorship/edited"];
  };
  "sponsorship-pending-cancellation": {
    /**
     * This event occurs when there is activity relating to a sponsorship listing. For more information, see "[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors)." For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).
     *
     * You can only create a sponsorship webhook on GitHub.com. For more information, see "[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
     * @description A sponsor scheduled a cancellation for their sponsorship. The cancellation will become effective on their next billing date.
     *
     * This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.
     */
    post: operations["sponsorship/pending-cancellation"];
  };
  "sponsorship-pending-tier-change": {
    /**
     * This event occurs when there is activity relating to a sponsorship listing. For more information, see "[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors)." For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).
     *
     * You can only create a sponsorship webhook on GitHub.com. For more information, see "[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
     * @description A sponsor scheduled a downgrade to a lower sponsorship tier. The new tier will become effective on their next billing date.
     */
    post: operations["sponsorship/pending-tier-change"];
  };
  "sponsorship-tier-changed": {
    /**
     * This event occurs when there is activity relating to a sponsorship listing. For more information, see "[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors)." For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).
     *
     * You can only create a sponsorship webhook on GitHub.com. For more information, see "[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
     * @description A sponsor changed the tier of their sponsorship and the change has taken effect. If a sponsor upgraded their tier, the change took effect immediately. If a sponsor downgraded their tier, the change took effect at the beginning of the sponsor's next billing cycle.
     */
    post: operations["sponsorship/tier-changed"];
  };
  "star-created": {
    /**
     * This event occurs when there is activity relating to repository stars. For more information about stars, see "[Saving repositories with stars](https://docs.github.com/github-ae@latest/get-started/exploring-projects-on-github/saving-repositories-with-stars)." For information about the APIs to manage stars, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#starredrepositoryconnection) or "[Starring](https://docs.github.com/github-ae@latest/rest/activity/starring)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description Someone starred a repository.
     */
    post: operations["star/created"];
  };
  "star-deleted": {
    /**
     * This event occurs when there is activity relating to repository stars. For more information about stars, see "[Saving repositories with stars](https://docs.github.com/github-ae@latest/get-started/exploring-projects-on-github/saving-repositories-with-stars)." For information about the APIs to manage stars, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#starredrepositoryconnection) or "[Starring](https://docs.github.com/github-ae@latest/rest/activity/starring)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description Someone unstarred the repository.
     */
    post: operations["star/deleted"];
  };
  status: {
    /**
     * This event occurs when the status of a Git commit changes. For example, commits can be marked as `error`, `failure`, `pending`, or `success`. For more information, see "[About status checks](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks)." For information about the APIs to manage commit statuses, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#status) or "[Statuses](https://docs.github.com/github-ae@latest/rest/reference/commits#commit-statuses)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.
     */
    post: operations["status"];
  };
  "team-add": {
    /**
     * This event occurs when a team is added to a repository.
     * For more information, see "[Managing teams and people with access to your repository](https://docs.github.com/github-ae@latest/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-teams-and-people-with-access-to-your-repository)."
     *
     * For activity relating to teams, see the `teams` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     */
    post: operations["team-add"];
  };
  "team-added-to-repository": {
    /**
     * This event occurs when there is activity relating to teams in an organization.
     * For more information, see "[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams)."
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     * @description A team was granted access to a repository.
     */
    post: operations["team/added-to-repository"];
  };
  "team-created": {
    /**
     * This event occurs when there is activity relating to teams in an organization.
     * For more information, see "[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams)."
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     * @description A team was created.
     */
    post: operations["team/created"];
  };
  "team-deleted": {
    /**
     * This event occurs when there is activity relating to teams in an organization.
     * For more information, see "[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams)."
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     * @description A team was deleted.
     */
    post: operations["team/deleted"];
  };
  "team-edited": {
    /**
     * This event occurs when there is activity relating to teams in an organization.
     * For more information, see "[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams)."
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     * @description The name, description, or visibility of a team was changed.
     */
    post: operations["team/edited"];
  };
  "team-removed-from-repository": {
    /**
     * This event occurs when there is activity relating to teams in an organization.
     * For more information, see "[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams)."
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
     * @description A team's access to a repository was removed.
     */
    post: operations["team/removed-from-repository"];
  };
  "user-created": {
    /**
     * This event occurs when there is activity relating to user accounts in an enterprise.
     * @description A user account was added to the enterprise.
     */
    post: operations["user/created"];
  };
  "user-deleted": {
    /**
     * This event occurs when there is activity relating to user accounts in an enterprise.
     * @description A user account was removed from the enterprise.
     */
    post: operations["user/deleted"];
  };
  "watch-started": {
    /**
     * This event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "[Managing your subscriptions](https://docs.github.com/github-ae@latest/account-and-profile/managing-subscriptions-and-notifications-on-github/managing-subscriptions-for-activity-on-github/managing-your-subscriptions)." For information about the APIs to manage watching, see "[Watching](https://docs.github.com/github-ae@latest/rest/activity/watching)" in the REST API documentation.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
     * @description Someone started watching the repository.
     */
    post: operations["watch/started"];
  };
  "workflow-dispatch": {
    /**
     * This event occurs when a GitHub Actions workflow is manually triggered. For more information, see "[Manually running a workflow](https://docs.github.com/github-ae@latest/actions/managing-workflow-runs/manually-running-a-workflow)."
     *
     * For activity relating to workflow runs, use the `workflow_run` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
     */
    post: operations["workflow-dispatch"];
  };
  "workflow-job-completed": {
    /**
     * This event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "[Using jobs in a workflow](https://docs.github.com/github-ae@latest/actions/using-jobs/using-jobs-in-a-workflow)." For information about the API to manage workflow jobs, see "[Workflow jobs](https://docs.github.com/github-ae@latest/rest/actions/workflow-jobs)" in the REST API documentation.
     *
     * For activity relating to a workflow run instead of a job in a workflow run, use the `workflow_run` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.
     * @description A job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.
     */
    post: operations["workflow-job/completed"];
  };
  "workflow-job-in-progress": {
    /**
     * This event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "[Using jobs in a workflow](https://docs.github.com/github-ae@latest/actions/using-jobs/using-jobs-in-a-workflow)." For information about the API to manage workflow jobs, see "[Workflow jobs](https://docs.github.com/github-ae@latest/rest/actions/workflow-jobs)" in the REST API documentation.
     *
     * For activity relating to a workflow run instead of a job in a workflow run, use the `workflow_run` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.
     * @description A job in a workflow run started processing on a runner.
     */
    post: operations["workflow-job/in-progress"];
  };
  "workflow-job-queued": {
    /**
     * This event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "[Using jobs in a workflow](https://docs.github.com/github-ae@latest/actions/using-jobs/using-jobs-in-a-workflow)." For information about the API to manage workflow jobs, see "[Workflow jobs](https://docs.github.com/github-ae@latest/rest/actions/workflow-jobs)" in the REST API documentation.
     *
     * For activity relating to a workflow run instead of a job in a workflow run, use the `workflow_run` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.
     * @description A job in a workflow run was created.
     */
    post: operations["workflow-job/queued"];
  };
  "workflow-run-completed": {
    /**
     * This event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "[About workflows](https://docs.github.com/github-ae@latest/actions/using-workflows/about-workflows)." For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#workflowrun) or "[Workflow runs](https://docs.github.com/github-ae@latest/rest/actions/workflow-runs)" in the REST API documentation.
     *
     * For activity relating to a job in a workflow run, use the `workflow_job` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.
     * @description A workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.
     */
    post: operations["workflow-run/completed"];
  };
  "workflow-run-in-progress": {
    /**
     * This event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "[About workflows](https://docs.github.com/github-ae@latest/actions/using-workflows/about-workflows)." For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#workflowrun) or "[Workflow runs](https://docs.github.com/github-ae@latest/rest/actions/workflow-runs)" in the REST API documentation.
     *
     * For activity relating to a job in a workflow run, use the `workflow_job` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.
     * @description A workflow run started processing on a runner.
     */
    post: operations["workflow-run/in-progress"];
  };
  "workflow-run-requested": {
    /**
     * This event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "[About workflows](https://docs.github.com/github-ae@latest/actions/using-workflows/about-workflows)." For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#workflowrun) or "[Workflow runs](https://docs.github.com/github-ae@latest/rest/actions/workflow-runs)" in the REST API documentation.
     *
     * For activity relating to a job in a workflow run, use the `workflow_job` event.
     *
     * To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.
     * @description A workflow run was triggered.
     */
    post: operations["workflow-run/requested"];
  };
}

export interface components {
  schemas: {
    root: {
      /** Format: uri-template */
      current_user_url: string;
      /** Format: uri-template */
      current_user_authorizations_html_url: string;
      /** Format: uri-template */
      authorizations_url: string;
      /** Format: uri-template */
      code_search_url: string;
      /** Format: uri-template */
      commit_search_url: string;
      /** Format: uri-template */
      emails_url: string;
      /** Format: uri-template */
      emojis_url: string;
      /** Format: uri-template */
      events_url: string;
      /** Format: uri-template */
      feeds_url: string;
      /** Format: uri-template */
      followers_url: string;
      /** Format: uri-template */
      following_url: string;
      /** Format: uri-template */
      gists_url: string;
      /** Format: uri-template */
      hub_url: string;
      /** Format: uri-template */
      issue_search_url: string;
      /** Format: uri-template */
      issues_url: string;
      /** Format: uri-template */
      keys_url: string;
      /** Format: uri-template */
      label_search_url: string;
      /** Format: uri-template */
      notifications_url: string;
      /** Format: uri-template */
      organization_url: string;
      /** Format: uri-template */
      organization_repositories_url: string;
      /** Format: uri-template */
      organization_teams_url: string;
      /** Format: uri-template */
      public_gists_url: string;
      /** Format: uri-template */
      rate_limit_url: string;
      /** Format: uri-template */
      repository_url: string;
      /** Format: uri-template */
      repository_search_url: string;
      /** Format: uri-template */
      current_user_repositories_url: string;
      /** Format: uri-template */
      starred_url: string;
      /** Format: uri-template */
      starred_gists_url: string;
      /** Format: uri-template */
      topic_search_url?: string;
      /** Format: uri-template */
      user_url: string;
      /** Format: uri-template */
      user_organizations_url: string;
      /** Format: uri-template */
      user_repositories_url: string;
      /** Format: uri-template */
      user_search_url: string;
    };
    "global-hook": {
      type?: string;
      id?: number;
      name?: string;
      active?: boolean;
      events?: string[];
      config?: {
        url?: string;
        content_type?: string;
        insecure_ssl?: string;
        secret?: string;
      };
      updated_at?: string;
      created_at?: string;
      url?: string;
      ping_url?: string;
    };
    "global-hook-2": {
      type?: string;
      id?: number;
      name?: string;
      active?: boolean;
      events?: string[];
      config?: {
        url?: string;
        content_type?: string;
        insecure_ssl?: string;
      };
      updated_at?: string;
      created_at?: string;
      url?: string;
      ping_url?: string;
    };
    "public-key-full": {
      id: number;
      key: string;
      user_id: OneOf<[number, null]>;
      repository_id: OneOf<[number, null]>;
      url: string;
      title: string;
      read_only: boolean;
      verified: boolean;
      /** Format: date-time */
      created_at: string;
    };
    /**
     * Organization Simple
     * @description A GitHub organization.
     */
    "organization-simple": {
      login: string;
      id: number;
      node_id: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      repos_url: string;
      /** Format: uri */
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: OneOf<[string, null]>;
    };
    "pre-receive-environment": {
      id?: number;
      name?: string;
      image_url?: string;
      url?: string;
      html_url?: string;
      default_environment?: boolean;
      created_at?: string;
      hooks_count?: number;
      download?: {
        url?: string;
        state?: string;
        downloaded_at?: OneOf<[string, null]>;
        message?: OneOf<[string, null]>;
      };
    };
    "pre-receive-environment-download-status": {
      url?: string;
      state?: string;
      downloaded_at?: OneOf<[string, null]>;
      message?: OneOf<[string, null]>;
    };
    /**
     * Simple User
     * @description A GitHub user.
     */
    "simple-user": {
      name?: OneOf<[string, null]>;
      email?: OneOf<[string, null]>;
      login: string;
      id: number;
      node_id: string;
      /** Format: uri */
      avatar_url: string;
      gravatar_id: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      /** Format: uri */
      subscriptions_url: string;
      /** Format: uri */
      organizations_url: string;
      /** Format: uri */
      repos_url: string;
      events_url: string;
      /** Format: uri */
      received_events_url: string;
      type: string;
      site_admin: boolean;
      starred_at?: string;
    };
    /**
     * App Permissions
     * @description The permissions granted to the user-to-server access token.
     * @example {
     *   "contents": "read",
     *   "issues": "read",
     *   "deployments": "write",
     *   "single_file": "read"
     * }
     */
    "app-permissions": {
      /**
       * @description The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
       * @enum {string}
       */
      actions?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
       * @enum {string}
       */
      administration?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for checks on code.
       * @enum {string}
       */
      checks?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
       * @enum {string}
       */
      contents?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for deployments and deployment statuses.
       * @enum {string}
       */
      deployments?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for managing repository environments.
       * @enum {string}
       */
      environments?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
       * @enum {string}
       */
      issues?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
       * @enum {string}
       */
      metadata?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for packages published to GitHub Packages.
       * @enum {string}
       */
      packages?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
       * @enum {string}
       */
      pages?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
       * @enum {string}
       */
      pull_requests?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage the post-receive hooks for a repository.
       * @enum {string}
       */
      repository_hooks?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage repository projects, columns, and cards.
       * @enum {string}
       */
      repository_projects?: "read" | "write" | "admin";
      /**
       * @description The level of permission to grant the access token to view and manage secret scanning alerts.
       * @enum {string}
       */
      secret_scanning_alerts?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage repository secrets.
       * @enum {string}
       */
      secrets?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to view and manage security events like code scanning alerts.
       * @enum {string}
       */
      security_events?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage just a single file.
       * @enum {string}
       */
      single_file?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for commit statuses.
       * @enum {string}
       */
      statuses?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage Dependabot alerts.
       * @enum {string}
       */
      vulnerability_alerts?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to update GitHub Actions workflow files.
       * @enum {string}
       */
      workflows?: "write";
      /**
       * @description The level of permission to grant the access token for organization teams and members.
       * @enum {string}
       */
      members?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage access to an organization.
       * @enum {string}
       */
      organization_administration?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage the post-receive hooks for an organization.
       * @enum {string}
       */
      organization_hooks?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
       * @enum {string}
       */
      organization_personal_access_tokens?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
       * @enum {string}
       */
      organization_personal_access_token_requests?: "read" | "write";
      /**
       * @description The level of permission to grant the access token for viewing an organization's plan.
       * @enum {string}
       */
      organization_plan?: "read";
      /**
       * @description The level of permission to grant the access token to manage organization projects and projects beta (where available).
       * @enum {string}
       */
      organization_projects?: "read" | "write" | "admin";
      /**
       * @description The level of permission to grant the access token for organization packages published to GitHub Packages.
       * @enum {string}
       */
      organization_packages?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage organization secrets.
       * @enum {string}
       */
      organization_secrets?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
       * @enum {string}
       */
      organization_self_hosted_runners?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to view and manage users blocked by the organization.
       * @enum {string}
       */
      organization_user_blocking?: "read" | "write";
      /**
       * @description The level of permission to grant the access token to manage team discussions and related comments.
       * @enum {string}
       */
      team_discussions?: "read" | "write";
    };
    /** Scoped Installation */
    "scoped-installation": {
      permissions: components["schemas"]["app-permissions"];
      /**
       * @description Describe whether all repositories have been selected or there's a selection involved
       * @enum {string}
       */
      repository_selection: "all" | "selected";
      single_file_name: OneOf<[string, null]>;
      has_multiple_single_files?: boolean;
      single_file_paths?: string[];
      /** Format: uri */
      repositories_url: string;
      account: components["schemas"]["simple-user"];
    };
    /**
     * Authorization
     * @description The authorization for an OAuth app, GitHub App, or a Personal Access Token.
     */
    authorization: {
      id: number;
      /** Format: uri */
      url: string;
      /** @description A list of scopes that this authorization is in. */
      scopes: OneOf<[string[], null]>;
      token: string;
      token_last_eight: OneOf<[string, null]>;
      hashed_token: OneOf<[string, null]>;
      app: {
        client_id: string;
        name: string;
        /** Format: uri */
        url: string;
      };
      note: OneOf<[string, null]>;
      /** Format: uri */
      note_url: OneOf<[string, null]>;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      created_at: string;
      fingerprint: OneOf<[string, null]>;
      user?: null | components["schemas"]["simple-user"];
      installation?: null | components["schemas"]["scoped-installation"];
      /** Format: date-time */
      expires_at: OneOf<[string, null]>;
    };
    /**
     * GitHub app
     * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    integration: {
      /** @description Unique identifier of the GitHub app */
      id: number;
      /** @description The slug name of the GitHub app */
      slug?: string;
      node_id: string;
      owner: null | components["schemas"]["simple-user"];
      /** @description The name of the GitHub app */
      name: string;
      description: OneOf<[string, null]>;
      /** Format: uri */
      external_url: string;
      /** Format: uri */
      html_url: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /**
       * @description The set of permissions for the GitHub app
       * @example {
       *   "issues": "read",
       *   "deployments": "write"
       * }
       */
      permissions: {
        issues?: string;
        checks?: string;
        metadata?: string;
        contents?: string;
        deployments?: string;
        [key: string]: string | undefined;
      };
      /** @description The list of events for the GitHub app */
      events: string[];
      /** @description The number of installations associated with the GitHub app */
      installations_count?: number;
      client_id?: string;
      client_secret?: string;
      webhook_secret?: OneOf<[string, null]>;
      pem?: string;
    };
    /**
     * Basic Error
     * @description Basic Error
     */
    "basic-error": {
      message?: string;
      documentation_url?: string;
      url?: string;
      status?: string;
    };
    /**
     * Validation Error Simple
     * @description Validation Error Simple
     */
    "validation-error-simple": {
      message: string;
      documentation_url: string;
      errors?: string[];
    };
    /**
     * Format: uri
     * @description The URL to which the payloads will be delivered.
     */
    "webhook-config-url": string;
    /** @description The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    "webhook-config-content-type": string;
    /** @description If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/github-ae@latest/webhooks/event-payloads/#delivery-headers). */
    "webhook-config-secret": string;
    "webhook-config-insecure-ssl": string | number;
    /**
     * Webhook Configuration
     * @description Configuration object of the webhook
     */
    "webhook-config": {
      url?: components["schemas"]["webhook-config-url"];
      content_type?: components["schemas"]["webhook-config-content-type"];
      secret?: components["schemas"]["webhook-config-secret"];
      insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
    };
    /**
     * Simple webhook delivery
     * @description Delivery made by a webhook, without request and response information.
     */
    "hook-delivery-item": {
      /** @description Unique identifier of the webhook delivery. */
      id: number;
      /** @description Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event). */
      guid: string;
      /**
       * Format: date-time
       * @description Time when the webhook delivery occurred.
       */
      delivered_at: string;
      /** @description Whether the webhook delivery is a redelivery. */
      redelivery: boolean;
      /** @description Time spent delivering. */
      duration: number;
      /** @description Describes the response returned after attempting the delivery. */
      status: string;
      /** @description Status code received when delivery was made. */
      status_code: number;
      /** @description The event that triggered the delivery. */
      event: string;
      /** @description The type of activity for the event that triggered the delivery. */
      action: OneOf<[string, null]>;
      /** @description The id of the GitHub App installation associated with this event. */
      installation_id: OneOf<[number, null]>;
      /** @description The id of the repository associated with this event. */
      repository_id: OneOf<[number, null]>;
    };
    /**
     * Scim Error
     * @description Scim Error
     */
    "scim-error": {
      message?: OneOf<[string, null]>;
      documentation_url?: OneOf<[string, null]>;
      detail?: OneOf<[string, null]>;
      status?: number;
      scimType?: OneOf<[string, null]>;
      schemas?: string[];
    };
    /**
     * Validation Error
     * @description Validation Error
     */
    "validation-error": {
      message: string;
      documentation_url: string;
      errors?: {
        resource?: string;
        field?: string;
        message?: string;
        code: string;
        index?: number;
        value?:
          | OneOf<[string, null]>
          | OneOf<[number, null]>
          | OneOf<[string[], null]>;
      }[];
    };
    /**
     * Webhook delivery
     * @description Delivery made by a webhook.
     */
    "hook-delivery": {
      /** @description Unique identifier of the delivery. */
      id: number;
      /** @description Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event). */
      guid: string;
      /**
       * Format: date-time
       * @description Time when the delivery was delivered.
       */
      delivered_at: string;
      /** @description Whether the delivery is a redelivery. */
      redelivery: boolean;
      /** @description Time spent delivering. */
      duration: number;
      /** @description Description of the status of the attempted delivery */
      status: string;
      /** @description Status code received when delivery was made. */
      status_code: number;
      /** @description The event that triggered the delivery. */
      event: string;
      /** @description The type of activity for the event that triggered the delivery. */
      action: OneOf<[string, null]>;
      /** @description The id of the GitHub App installation associated with this event. */
      installation_id: OneOf<[number, null]>;
      /** @description The id of the repository associated with this event. */
      repository_id: OneOf<[number, null]>;
      /** @description The URL target of the delivery. */
      url?: string;
      request: {
        /** @description The request headers sent with the webhook delivery. */
        headers: OneOf<
          [
            {
              [key: string]: unknown | undefined;
            },
            null
          ]
        >;
        /** @description The webhook payload. */
        payload: OneOf<
          [
            {
              [key: string]: unknown | undefined;
            },
            null
          ]
        >;
      };
      response: {
        /** @description The response headers received when the delivery was made. */
        headers: OneOf<
          [
            {
              [key: string]: unknown | undefined;
            },
            null
          ]
        >;
        /** @description The response payload received. */
        payload: OneOf<[string, null]>;
      };
    };
    /**
     * Enterprise
     * @description An enterprise on GitHub.
     */
    enterprise: {
      /** @description A short description of the enterprise. */
      description?: OneOf<[string, null]>;
      /** Format: uri */
      html_url: string;
      /**
       * Format: uri
       * @description The enterprise's website URL.
       */
      website_url?: OneOf<[string, null]>;
      /** @description Unique identifier of the enterprise */
      id: number;
      node_id: string;
      /** @description The name of the enterprise. */
      name: string;
      /** @description The slug url identifier for the enterprise. */
      slug: string;
      /** Format: date-time */
      created_at: OneOf<[string, null]>;
      /** Format: date-time */
      updated_at: OneOf<[string, null]>;
      /** Format: uri */
      avatar_url: string;
    };
    /**
     * Integration Installation Request
     * @description Request to install an integration on a target
     */
    "integration-installation-request": {
      /** @description Unique identifier of the request installation. */
      id: number;
      node_id?: string;
      account:
        | components["schemas"]["simple-user"]
        | components["schemas"]["enterprise"];
      requester: components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
    };
    /**
     * Installation
     * @description Installation
     */
    installation: {
      /** @description The ID of the installation. */
      id: number;
      account: OneOf<
        [
          null,
          (
            | components["schemas"]["simple-user"]
            | components["schemas"]["enterprise"]
          )
        ]
      >;
      /**
       * @description Describe whether all repositories have been selected or there's a selection involved
       * @enum {string}
       */
      repository_selection: "all" | "selected";
      /** Format: uri */
      access_tokens_url: string;
      /** Format: uri */
      repositories_url: string;
      /** Format: uri */
      html_url: string;
      app_id: number;
      /** @description The ID of the user or organization this token is being scoped to. */
      target_id: number;
      target_type: string;
      permissions: components["schemas"]["app-permissions"];
      events: string[];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      single_file_name: OneOf<[string, null]>;
      has_multiple_single_files?: boolean;
      single_file_paths?: string[];
      app_slug: string;
      suspended_by: null | components["schemas"]["simple-user"];
      /** Format: date-time */
      suspended_at: OneOf<[string, null]>;
      contact_email?: OneOf<[string, null]>;
    };
    /**
     * License Simple
     * @description License Simple
     */
    "license-simple": {
      key: string;
      name: string;
      /** Format: uri */
      url: OneOf<[string, null]>;
      spdx_id: OneOf<[string, null]>;
      node_id: string;
      /** Format: uri */
      html_url?: string;
    };
    /**
     * Repository
     * @description A repository on GitHub.
     */
    repository: {
      /** @description Unique identifier of the repository */
      id: number;
      node_id: string;
      /** @description The name of the repository. */
      name: string;
      full_name: string;
      license: null | components["schemas"]["license-simple"];
      organization?: null | components["schemas"]["simple-user"];
      forks: number;
      permissions?: {
        admin: boolean;
        pull: boolean;
        triage?: boolean;
        push: boolean;
        maintain?: boolean;
      };
      owner: components["schemas"]["simple-user"];
      /**
       * @description Whether the repository is private or public.
       * @default false
       */
      private: boolean;
      /** Format: uri */
      html_url: string;
      description: OneOf<[string, null]>;
      fork: boolean;
      /** Format: uri */
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /** Format: uri */
      contributors_url: string;
      /** Format: uri */
      deployments_url: string;
      /** Format: uri */
      downloads_url: string;
      /** Format: uri */
      events_url: string;
      /** Format: uri */
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      /** Format: uri */
      languages_url: string;
      /** Format: uri */
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url: string;
      /** Format: uri */
      stargazers_url: string;
      statuses_url: string;
      /** Format: uri */
      subscribers_url: string;
      /** Format: uri */
      subscription_url: string;
      /** Format: uri */
      tags_url: string;
      /** Format: uri */
      teams_url: string;
      trees_url: string;
      clone_url: string;
      /** Format: uri */
      mirror_url: OneOf<[string, null]>;
      /** Format: uri */
      hooks_url: string;
      /** Format: uri */
      svn_url: string;
      /** Format: uri */
      homepage: OneOf<[string, null]>;
      language: OneOf<[string, null]>;
      forks_count: number;
      stargazers_count: number;
      watchers_count: number;
      /** @description The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0. */
      size: number;
      /** @description The default branch of the repository. */
      default_branch: string;
      open_issues_count: number;
      /**
       * @description Whether this repository acts as a template that can be used to generate new repositories.
       * @default false
       */
      is_template?: boolean;
      topics?: string[];
      /**
       * @description Whether issues are enabled.
       * @default true
       */
      has_issues: boolean;
      /**
       * @description Whether projects are enabled.
       * @default true
       */
      has_projects: boolean;
      /**
       * @description Whether the wiki is enabled.
       * @default true
       */
      has_wiki: boolean;
      has_pages: boolean;
      /**
       * @description Whether downloads are enabled.
       * @default true
       */
      has_downloads: boolean;
      /**
       * @description Whether the repository is archived.
       * @default false
       */
      archived: boolean;
      /** @description Returns whether or not this repository disabled. */
      disabled: boolean;
      /**
       * @description The repository visibility: public, private, or internal.
       * @default public
       */
      visibility?: string;
      /** Format: date-time */
      pushed_at: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: OneOf<[string, null]>;
      /** Format: date-time */
      updated_at: OneOf<[string, null]>;
      /**
       * @description Whether to allow rebase merges for pull requests.
       * @default true
       */
      allow_rebase_merge?: boolean;
      template_repository?: OneOf<
        [
          {
            id?: number;
            node_id?: string;
            name?: string;
            full_name?: string;
            owner?: {
              login?: string;
              id?: number;
              node_id?: string;
              avatar_url?: string;
              gravatar_id?: string;
              url?: string;
              html_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              starred_url?: string;
              subscriptions_url?: string;
              organizations_url?: string;
              repos_url?: string;
              events_url?: string;
              received_events_url?: string;
              type?: string;
              site_admin?: boolean;
            };
            private?: boolean;
            html_url?: string;
            description?: string;
            fork?: boolean;
            url?: string;
            archive_url?: string;
            assignees_url?: string;
            blobs_url?: string;
            branches_url?: string;
            collaborators_url?: string;
            comments_url?: string;
            commits_url?: string;
            compare_url?: string;
            contents_url?: string;
            contributors_url?: string;
            deployments_url?: string;
            downloads_url?: string;
            events_url?: string;
            forks_url?: string;
            git_commits_url?: string;
            git_refs_url?: string;
            git_tags_url?: string;
            git_url?: string;
            issue_comment_url?: string;
            issue_events_url?: string;
            issues_url?: string;
            keys_url?: string;
            labels_url?: string;
            languages_url?: string;
            merges_url?: string;
            milestones_url?: string;
            notifications_url?: string;
            pulls_url?: string;
            releases_url?: string;
            ssh_url?: string;
            stargazers_url?: string;
            statuses_url?: string;
            subscribers_url?: string;
            subscription_url?: string;
            tags_url?: string;
            teams_url?: string;
            trees_url?: string;
            clone_url?: string;
            mirror_url?: string;
            hooks_url?: string;
            svn_url?: string;
            homepage?: string;
            language?: string;
            forks_count?: number;
            stargazers_count?: number;
            watchers_count?: number;
            size?: number;
            default_branch?: string;
            open_issues_count?: number;
            is_template?: boolean;
            topics?: string[];
            has_issues?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            has_pages?: boolean;
            has_downloads?: boolean;
            archived?: boolean;
            disabled?: boolean;
            visibility?: string;
            pushed_at?: string;
            created_at?: string;
            updated_at?: string;
            permissions?: {
              admin?: boolean;
              maintain?: boolean;
              push?: boolean;
              triage?: boolean;
              pull?: boolean;
            };
            allow_rebase_merge?: boolean;
            temp_clone_token?: string;
            allow_squash_merge?: boolean;
            allow_auto_merge?: boolean;
            delete_branch_on_merge?: boolean;
            allow_update_branch?: boolean;
            allow_merge_commit?: boolean;
            subscribers_count?: number;
            network_count?: number;
          },
          null
        ]
      >;
      temp_clone_token?: string;
      /**
       * @description Whether to allow squash merges for pull requests.
       * @default true
       */
      allow_squash_merge?: boolean;
      /**
       * @description Whether to allow Auto-merge to be used on pull requests.
       * @default false
       */
      allow_auto_merge?: boolean;
      /**
       * @description Whether to delete head branches when pull requests are merged
       * @default false
       */
      delete_branch_on_merge?: boolean;
      /**
       * @description Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
       * @default false
       */
      allow_update_branch?: boolean;
      /**
       * @description Whether to allow merge commits for pull requests.
       * @default true
       */
      allow_merge_commit?: boolean;
      /** @description Whether to allow forking this repo */
      allow_forking?: boolean;
      /**
       * @description Whether to require contributors to sign off on web-based commits
       * @default false
       */
      web_commit_signoff_required?: boolean;
      subscribers_count?: number;
      network_count?: number;
      open_issues: number;
      watchers: number;
      master_branch?: string;
      starred_at?: string;
      /** @description Whether anonymous git access is enabled for this repository */
      anonymous_access_enabled?: boolean;
    };
    /**
     * Installation Token
     * @description Authentication token for a GitHub App installed on a user or org.
     */
    "installation-token": {
      token: string;
      expires_at: string;
      permissions?: components["schemas"]["app-permissions"];
      /** @enum {string} */
      repository_selection?: "all" | "selected";
      repositories?: components["schemas"]["repository"][];
      single_file?: string;
      has_multiple_single_files?: boolean;
      single_file_paths?: string[];
    };
    /**
     * Code Of Conduct
     * @description Code Of Conduct
     */
    "code-of-conduct": {
      key: string;
      name: string;
      /** Format: uri */
      url: string;
      body?: string;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
    };
    /** @description The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see "[Basic writing and formatting syntax](https://docs.github.com/github-ae@latest/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)." */
    "announcement-message": OneOf<[string, null]>;
    /**
     * Format: date-time
     * @description The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.
     */
    "announcement-expiration": OneOf<[string, null]>;
    /**
     * Enterprise Announcement
     * @description Enterprise global announcement
     */
    announcement: {
      announcement: components["schemas"]["announcement-message"];
      expires_at?: components["schemas"]["announcement-expiration"];
    };
    "license-info": {
      seats?: string | number;
      seats_used?: number;
      seats_available?: string | number;
      kind?: string;
      days_until_expiration?: number;
      expire_at?: string;
    };
    /** Repository Enterprise Stats */
    "enterprise-repository-overview": {
      total_repos: number;
      root_repos: number;
      fork_repos: number;
      org_repos: number;
      total_pushes: number;
      total_wikis: number;
    };
    /** Hooks Enterprise Stats */
    "enterprise-hook-overview": {
      total_hooks: number;
      active_hooks: number;
      inactive_hooks: number;
    };
    /** Enterprise Pages Stats */
    "enterprise-page-overview": {
      total_pages: number;
    };
    /** Enterprise Organization Stats */
    "enterprise-organization-overview": {
      total_orgs: number;
      disabled_orgs: number;
      total_teams: number;
      total_team_members: number;
    };
    /** Enterprise User Stats */
    "enterprise-user-overview": {
      total_users: number;
      admin_users: number;
      suspended_users: number;
    };
    /** Enterprise Pull Request Stats */
    "enterprise-pull-request-overview": {
      total_pulls: number;
      merged_pulls: number;
      mergeable_pulls: number;
      unmergeable_pulls: number;
    };
    /** Enterprise Issue Stats */
    "enterprise-issue-overview": {
      total_issues: number;
      open_issues: number;
      closed_issues: number;
    };
    /** Enterprise Milestone Stats */
    "enterprise-milestone-overview": {
      total_milestones: number;
      open_milestones: number;
      closed_milestones: number;
    };
    /** Enterprise Gist Stats */
    "enterprise-gist-overview": {
      total_gists: number;
      private_gists: number;
      public_gists: number;
    };
    /** Enterprise Comment Stats */
    "enterprise-comment-overview": {
      total_commit_comments: number;
      total_gist_comments: number;
      total_issue_comments: number;
      total_pull_request_comments: number;
    };
    "enterprise-overview": {
      repos?: components["schemas"]["enterprise-repository-overview"];
      hooks?: components["schemas"]["enterprise-hook-overview"];
      pages?: components["schemas"]["enterprise-page-overview"];
      orgs?: components["schemas"]["enterprise-organization-overview"];
      users?: components["schemas"]["enterprise-user-overview"];
      pulls?: components["schemas"]["enterprise-pull-request-overview"];
      issues?: components["schemas"]["enterprise-issue-overview"];
      milestones?: components["schemas"]["enterprise-milestone-overview"];
      gists?: components["schemas"]["enterprise-gist-overview"];
      comments?: components["schemas"]["enterprise-comment-overview"];
    };
    /**
     * @description The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.
     * @enum {string}
     */
    "enabled-organizations": "all" | "none" | "selected";
    /**
     * @description The permissions policy that controls the actions that are allowed to run.
     * @enum {string}
     */
    "allowed-actions": "all" | "local_only" | "selected";
    /** @description The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
    "selected-actions-url": string;
    "actions-enterprise-permissions": {
      enabled_organizations: components["schemas"]["enabled-organizations"];
      /** @description The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`. */
      selected_organizations_url?: string;
      allowed_actions?: components["schemas"]["allowed-actions"];
      selected_actions_url?: components["schemas"]["selected-actions-url"];
    };
    "selected-actions": {
      /** @description Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization. */
      github_owned_allowed?: boolean;
      /** @description Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators. */
      verified_allowed?: boolean;
      /** @description Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`. */
      patterns_allowed?: string[];
    };
    "runner-groups-enterprise": {
      id: number;
      name: string;
      visibility: string;
      default: boolean;
      selected_organizations_url?: string;
      runners_url: string;
      allows_public_repositories: boolean;
      /**
       * @description If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
       * @default false
       */
      workflow_restrictions_read_only?: boolean;
      /**
       * @description If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
       * @default false
       */
      restricted_to_workflows?: boolean;
      /** @description List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
      selected_workflows?: string[];
    };
    /**
     * Self hosted runner label
     * @description A label for a self hosted runner
     */
    "runner-label": {
      /** @description Unique identifier of the label. */
      id?: number;
      /** @description Name of the label. */
      name: string;
      /**
       * @description The type of label. Read-only labels are applied automatically when the runner is configured.
       * @enum {string}
       */
      type?: "read-only" | "custom";
    };
    /**
     * Self hosted runners
     * @description A self hosted runner
     */
    runner: {
      /** @description The id of the runner. */
      id: number;
      /** @description The name of the runner. */
      name: string;
      /** @description The Operating System of the runner. */
      os: string;
      /** @description The status of the runner. */
      status: string;
      busy: boolean;
      labels: components["schemas"]["runner-label"][];
    };
    /**
     * Runner Application
     * @description Runner Application
     */
    "runner-application": {
      os: string;
      architecture: string;
      download_url: string;
      filename: string;
      /** @description A short lived bearer token used to download the runner, if needed. */
      temp_download_token?: string;
      sha256_checksum?: string;
    };
    /**
     * Authentication Token
     * @description Authentication Token
     */
    "authentication-token": {
      /** @description The token used for authentication */
      token: string;
      /**
       * Format: date-time
       * @description The time this token expires
       */
      expires_at: string;
      permissions?: Record<string, never>;
      /** @description The repositories this token has access to */
      repositories?: components["schemas"]["repository"][];
      single_file?: OneOf<[string, null]>;
      /**
       * @description Describe whether all repositories have been selected or there's a selection involved
       * @enum {string}
       */
      repository_selection?: "all" | "selected";
    };
    "audit-log-event": {
      /** @description The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
      "@timestamp"?: number;
      /** @description The name of the action that was performed, for example `user.login` or `repo.create`. */
      action?: string;
      active?: boolean;
      active_was?: boolean;
      /** @description The actor who performed the action. */
      actor?: string;
      /** @description The id of the actor who performed the action. */
      actor_id?: number;
      actor_location?: {
        country_name?: string;
      };
      data?: {
        [key: string]: unknown | undefined;
      };
      org_id?: number;
      user_id?: number;
      business_id?: number;
      /** @description The username of the account being blocked. */
      blocked_user?: string;
      business?: string;
      config?: Record<string, never>[];
      config_was?: Record<string, never>[];
      content_type?: string;
      operation_type?: string;
      /** @description The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
      created_at?: number;
      deploy_key_fingerprint?: string;
      /** @description A unique identifier for an audit event. */
      _document_id?: string;
      emoji?: string;
      events?: Record<string, never>[];
      events_were?: Record<string, never>[];
      explanation?: string;
      fingerprint?: string;
      hook_id?: number;
      limited_availability?: boolean;
      message?: string;
      name?: string;
      old_user?: string;
      openssh_public_key?: string;
      org?: string;
      previous_visibility?: string;
      read_only?: boolean;
      /** @description The name of the repository. */
      repo?: string;
      /** @description The name of the repository. */
      repository?: string;
      repository_public?: boolean;
      target_login?: string;
      team?: string;
      /** @description The type of protocol (for example, HTTP or SSH) used to transfer Git data. */
      transport_protocol?: number;
      /** @description A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data. */
      transport_protocol_name?: string;
      /** @description The user that was affected by the action performed (if available). */
      user?: string;
      /** @description The repository visibility, for example `public` or `private`. */
      visibility?: string;
    };
    /** @description The security alert number. */
    readonly "alert-number": number;
    /**
     * Format: date-time
     * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly "alert-created-at": string;
    /**
     * Format: date-time
     * @description The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly "alert-updated-at": string;
    /**
     * Format: uri
     * @description The REST API URL of the alert resource.
     */
    readonly "alert-url": string;
    /**
     * Format: uri
     * @description The GitHub URL of the alert resource.
     */
    readonly "alert-html-url": string;
    /**
     * @description Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.
     * @enum {string}
     */
    "secret-scanning-alert-state": "open" | "resolved";
    /**
     * @description **Required when the `state` is `resolved`.** The reason for resolving the alert.
     * @enum {string|null}
     */
    "secret-scanning-alert-resolution":
      | "false_positive"
      | "wont_fix"
      | "revoked"
      | "used_in_tests"
      | ""
      | null;
    /**
     * Simple Repository
     * @description A GitHub repository.
     */
    "simple-repository": {
      /** @description A unique identifier of the repository. */
      id: number;
      /** @description The GraphQL identifier of the repository. */
      node_id: string;
      /** @description The name of the repository. */
      name: string;
      /** @description The full, globally unique, name of the repository. */
      full_name: string;
      owner: components["schemas"]["simple-user"];
      /** @description Whether the repository is private. */
      private: boolean;
      /**
       * Format: uri
       * @description The URL to view the repository on GitHub.com.
       */
      html_url: string;
      /** @description The repository description. */
      description: OneOf<[string, null]>;
      /** @description Whether the repository is a fork. */
      fork: boolean;
      /**
       * Format: uri
       * @description The URL to get more information about the repository from the GitHub API.
       */
      url: string;
      /** @description A template for the API URL to download the repository as an archive. */
      archive_url: string;
      /** @description A template for the API URL to list the available assignees for issues in the repository. */
      assignees_url: string;
      /** @description A template for the API URL to create or retrieve a raw Git blob in the repository. */
      blobs_url: string;
      /** @description A template for the API URL to get information about branches in the repository. */
      branches_url: string;
      /** @description A template for the API URL to get information about collaborators of the repository. */
      collaborators_url: string;
      /** @description A template for the API URL to get information about comments on the repository. */
      comments_url: string;
      /** @description A template for the API URL to get information about commits on the repository. */
      commits_url: string;
      /** @description A template for the API URL to compare two commits or refs. */
      compare_url: string;
      /** @description A template for the API URL to get the contents of the repository. */
      contents_url: string;
      /**
       * Format: uri
       * @description A template for the API URL to list the contributors to the repository.
       */
      contributors_url: string;
      /**
       * Format: uri
       * @description The API URL to list the deployments of the repository.
       */
      deployments_url: string;
      /**
       * Format: uri
       * @description The API URL to list the downloads on the repository.
       */
      downloads_url: string;
      /**
       * Format: uri
       * @description The API URL to list the events of the repository.
       */
      events_url: string;
      /**
       * Format: uri
       * @description The API URL to list the forks of the repository.
       */
      forks_url: string;
      /** @description A template for the API URL to get information about Git commits of the repository. */
      git_commits_url: string;
      /** @description A template for the API URL to get information about Git refs of the repository. */
      git_refs_url: string;
      /** @description A template for the API URL to get information about Git tags of the repository. */
      git_tags_url: string;
      /** @description A template for the API URL to get information about issue comments on the repository. */
      issue_comment_url: string;
      /** @description A template for the API URL to get information about issue events on the repository. */
      issue_events_url: string;
      /** @description A template for the API URL to get information about issues on the repository. */
      issues_url: string;
      /** @description A template for the API URL to get information about deploy keys on the repository. */
      keys_url: string;
      /** @description A template for the API URL to get information about labels of the repository. */
      labels_url: string;
      /**
       * Format: uri
       * @description The API URL to get information about the languages of the repository.
       */
      languages_url: string;
      /**
       * Format: uri
       * @description The API URL to merge branches in the repository.
       */
      merges_url: string;
      /** @description A template for the API URL to get information about milestones of the repository. */
      milestones_url: string;
      /** @description A template for the API URL to get information about notifications on the repository. */
      notifications_url: string;
      /** @description A template for the API URL to get information about pull requests on the repository. */
      pulls_url: string;
      /** @description A template for the API URL to get information about releases on the repository. */
      releases_url: string;
      /**
       * Format: uri
       * @description The API URL to list the stargazers on the repository.
       */
      stargazers_url: string;
      /** @description A template for the API URL to get information about statuses of a commit. */
      statuses_url: string;
      /**
       * Format: uri
       * @description The API URL to list the subscribers on the repository.
       */
      subscribers_url: string;
      /**
       * Format: uri
       * @description The API URL to subscribe to notifications for this repository.
       */
      subscription_url: string;
      /**
       * Format: uri
       * @description The API URL to get information about tags on the repository.
       */
      tags_url: string;
      /**
       * Format: uri
       * @description The API URL to list the teams on the repository.
       */
      teams_url: string;
      /** @description A template for the API URL to create or retrieve a raw Git tree of the repository. */
      trees_url: string;
      /**
       * Format: uri
       * @description The API URL to list the hooks on the repository.
       */
      hooks_url: string;
    };
    "organization-secret-scanning-alert": {
      number?: components["schemas"]["alert-number"];
      created_at?: components["schemas"]["alert-created-at"];
      updated_at?: null | components["schemas"]["alert-updated-at"];
      url?: components["schemas"]["alert-url"];
      html_url?: components["schemas"]["alert-html-url"];
      /**
       * Format: uri
       * @description The REST API URL of the code locations for this alert.
       */
      locations_url?: string;
      state?: components["schemas"]["secret-scanning-alert-state"];
      resolution?: components["schemas"]["secret-scanning-alert-resolution"];
      /**
       * Format: date-time
       * @description The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      resolved_at?: OneOf<[string, null]>;
      resolved_by?: null | components["schemas"]["simple-user"];
      /** @description The type of secret that secret scanning detected. */
      secret_type?: string;
      /**
       * @description User-friendly name for the detected secret, matching the `secret_type`.
       * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/github-ae@latest/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
       */
      secret_type_display_name?: string;
      /** @description The secret that was detected. */
      secret?: string;
      repository?: components["schemas"]["simple-repository"];
      /** @description Whether push protection was bypassed for the detected secret. */
      push_protection_bypassed?: OneOf<[boolean, null]>;
      push_protection_bypassed_by?: null | components["schemas"]["simple-user"];
      /**
       * Format: date-time
       * @description The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      push_protection_bypassed_at?: OneOf<[string, null]>;
      /** @description The comment that was optionally added when this alert was closed */
      resolution_comment?: OneOf<[string, null]>;
    };
    /**
     * Link With Type
     * @description Hypermedia Link with Type
     */
    "link-with-type": {
      href: string;
      type: string;
    };
    /**
     * Feed
     * @description Feed
     */
    feed: {
      timeline_url: string;
      user_url: string;
      current_user_public_url?: string;
      current_user_url?: string;
      current_user_actor_url?: string;
      current_user_organization_url?: string;
      current_user_organization_urls?: string[];
      security_advisories_url?: string;
      /** @description A feed of discussions for a given repository. */
      repository_discussions_url?: string;
      /** @description A feed of discussions for a given repository and category. */
      repository_discussions_category_url?: string;
      _links: {
        timeline: components["schemas"]["link-with-type"];
        user: components["schemas"]["link-with-type"];
        security_advisories?: components["schemas"]["link-with-type"];
        current_user?: components["schemas"]["link-with-type"];
        current_user_public?: components["schemas"]["link-with-type"];
        current_user_actor?: components["schemas"]["link-with-type"];
        current_user_organization?: components["schemas"]["link-with-type"];
        current_user_organizations?: components["schemas"]["link-with-type"][];
        repository_discussions?: components["schemas"]["link-with-type"];
        repository_discussions_category?: components["schemas"]["link-with-type"];
      };
    };
    /**
     * Base Gist
     * @description Base Gist
     */
    "base-gist": {
      /** Format: uri */
      url: string;
      /** Format: uri */
      forks_url: string;
      /** Format: uri */
      commits_url: string;
      id: string;
      node_id: string;
      /** Format: uri */
      git_pull_url: string;
      /** Format: uri */
      git_push_url: string;
      /** Format: uri */
      html_url: string;
      files: {
        [key: string]:
          | {
              filename?: string;
              type?: string;
              language?: string;
              raw_url?: string;
              size?: number;
            }
          | undefined;
      };
      public: boolean;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      description: OneOf<[string, null]>;
      comments: number;
      user: null | components["schemas"]["simple-user"];
      /** Format: uri */
      comments_url: string;
      owner?: components["schemas"]["simple-user"];
      truncated?: boolean;
      forks?: Record<string, never>[];
      history?: Record<string, never>[];
    };
    /**
     * Public User
     * @description Public User
     */
    "public-user": {
      login: string;
      id: number;
      node_id: string;
      /** Format: uri */
      avatar_url: string;
      gravatar_id: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      /** Format: uri */
      subscriptions_url: string;
      /** Format: uri */
      organizations_url: string;
      /** Format: uri */
      repos_url: string;
      events_url: string;
      /** Format: uri */
      received_events_url: string;
      type: string;
      site_admin: boolean;
      name: OneOf<[string, null]>;
      company: OneOf<[string, null]>;
      blog: OneOf<[string, null]>;
      location: OneOf<[string, null]>;
      /** Format: email */
      email: OneOf<[string, null]>;
      hireable: OneOf<[boolean, null]>;
      bio: OneOf<[string, null]>;
      twitter_username?: OneOf<[string, null]>;
      public_repos: number;
      public_gists: number;
      followers: number;
      following: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      plan?: {
        collaborators: number;
        name: string;
        space: number;
        private_repos: number;
      };
      /** Format: date-time */
      suspended_at?: OneOf<[string, null]>;
      private_gists?: number;
      total_private_repos?: number;
      owned_private_repos?: number;
      disk_usage?: number;
      collaborators?: number;
    };
    /**
     * Gist History
     * @description Gist History
     */
    "gist-history": {
      user?: null | components["schemas"]["simple-user"];
      version?: string;
      /** Format: date-time */
      committed_at?: string;
      change_status?: {
        total?: number;
        additions?: number;
        deletions?: number;
      };
      /** Format: uri */
      url?: string;
    };
    /**
     * Gist Simple
     * @description Gist Simple
     */
    "gist-simple": {
      /** @deprecated */
      forks?: OneOf<
        [
          {
            id?: string;
            /** Format: uri */
            url?: string;
            user?: components["schemas"]["public-user"];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
          }[],
          null
        ]
      >;
      /** @deprecated */
      history?: OneOf<[components["schemas"]["gist-history"][], null]>;
      /**
       * Gist
       * @description Gist
       */
      fork_of?: OneOf<
        [
          {
            /** Format: uri */
            url: string;
            /** Format: uri */
            forks_url: string;
            /** Format: uri */
            commits_url: string;
            id: string;
            node_id: string;
            /** Format: uri */
            git_pull_url: string;
            /** Format: uri */
            git_push_url: string;
            /** Format: uri */
            html_url: string;
            files: {
              [key: string]:
                | {
                    filename?: string;
                    type?: string;
                    language?: string;
                    raw_url?: string;
                    size?: number;
                  }
                | undefined;
            };
            public: boolean;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            description: OneOf<[string, null]>;
            comments: number;
            user: null | components["schemas"]["simple-user"];
            /** Format: uri */
            comments_url: string;
            owner?: null | components["schemas"]["simple-user"];
            truncated?: boolean;
            forks?: Record<string, never>[];
            history?: Record<string, never>[];
          },
          null
        ]
      >;
      url?: string;
      forks_url?: string;
      commits_url?: string;
      id?: string;
      node_id?: string;
      git_pull_url?: string;
      git_push_url?: string;
      html_url?: string;
      files?: {
        [key: string]:
          | OneOf<
              [
                {
                  filename?: string;
                  type?: string;
                  language?: string;
                  raw_url?: string;
                  size?: number;
                  truncated?: boolean;
                  content?: string;
                },
                null
              ]
            >
          | undefined;
      };
      public?: boolean;
      created_at?: string;
      updated_at?: string;
      description?: OneOf<[string, null]>;
      comments?: number;
      user?: OneOf<[string, null]>;
      comments_url?: string;
      owner?: components["schemas"]["simple-user"];
      truncated?: boolean;
    };
    /**
     * author_association
     * @description How the author is associated with the repository.
     * @enum {string}
     */
    "author-association":
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * Gist Comment
     * @description A comment made to a gist.
     */
    "gist-comment": {
      id: number;
      node_id: string;
      /** Format: uri */
      url: string;
      /** @description The comment text. */
      body: string;
      user: null | components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      author_association: components["schemas"]["author-association"];
    };
    /**
     * Gist Commit
     * @description Gist Commit
     */
    "gist-commit": {
      /** Format: uri */
      url: string;
      version: string;
      user: null | components["schemas"]["simple-user"];
      change_status: {
        total?: number;
        additions?: number;
        deletions?: number;
      };
      /** Format: date-time */
      committed_at: string;
    };
    /**
     * Gitignore Template
     * @description Gitignore Template
     */
    "gitignore-template": {
      name: string;
      source: string;
    };
    /**
     * Milestone
     * @description A collection of related issues and pull requests.
     */
    milestone: {
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      labels_url: string;
      id: number;
      node_id: string;
      /** @description The number of the milestone. */
      number: number;
      /**
       * @description The state of the milestone.
       * @default open
       * @enum {string}
       */
      state: "open" | "closed";
      /** @description The title of the milestone. */
      title: string;
      description: OneOf<[string, null]>;
      creator: null | components["schemas"]["simple-user"];
      open_issues: number;
      closed_issues: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      closed_at: OneOf<[string, null]>;
      /** Format: date-time */
      due_on: OneOf<[string, null]>;
    };
    /** Reaction Rollup */
    "reaction-rollup": {
      /** Format: uri */
      url: string;
      total_count: number;
      "+1": number;
      "-1": number;
      laugh: number;
      confused: number;
      heart: number;
      hooray: number;
      eyes: number;
      rocket: number;
    };
    /**
     * Issue
     * @description Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
     */
    issue: {
      /** Format: int64 */
      id: number;
      node_id: string;
      /**
       * Format: uri
       * @description URL for the issue
       */
      url: string;
      /** Format: uri */
      repository_url: string;
      labels_url: string;
      /** Format: uri */
      comments_url: string;
      /** Format: uri */
      events_url: string;
      /** Format: uri */
      html_url: string;
      /** @description Number uniquely identifying the issue within its repository */
      number: number;
      /** @description State of the issue; either 'open' or 'closed' */
      state: string;
      /**
       * @description The reason for the current state
       * @enum {string|null}
       */
      state_reason?: "completed" | "reopened" | "not_planned" | "" | null;
      /** @description Title of the issue */
      title: string;
      /** @description Contents of the issue */
      body?: OneOf<[string, null]>;
      user: null | components["schemas"]["simple-user"];
      /** @description Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository */
      labels: OneOf<
        [
          string,
          {
            /** Format: int64 */
            id?: number;
            node_id?: string;
            /** Format: uri */
            url?: string;
            name?: string;
            description?: OneOf<[string, null]>;
            color?: OneOf<[string, null]>;
            default?: boolean;
          }
        ]
      >[];
      assignee: null | components["schemas"]["simple-user"];
      assignees?: OneOf<[components["schemas"]["simple-user"][], null]>;
      milestone: null | components["schemas"]["milestone"];
      locked: boolean;
      active_lock_reason?: OneOf<[string, null]>;
      comments: number;
      pull_request?: {
        /** Format: date-time */
        merged_at?: OneOf<[string, null]>;
        /** Format: uri */
        diff_url: OneOf<[string, null]>;
        /** Format: uri */
        html_url: OneOf<[string, null]>;
        /** Format: uri */
        patch_url: OneOf<[string, null]>;
        /** Format: uri */
        url: OneOf<[string, null]>;
      };
      /** Format: date-time */
      closed_at: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      draft?: boolean;
      closed_by?: null | components["schemas"]["simple-user"];
      body_html?: string;
      body_text?: string;
      /** Format: uri */
      timeline_url?: string;
      repository?: components["schemas"]["repository"];
      performed_via_github_app?: null | components["schemas"]["integration"];
      author_association: components["schemas"]["author-association"];
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * License
     * @description License
     */
    license: {
      key: string;
      name: string;
      spdx_id: OneOf<[string, null]>;
      /** Format: uri */
      url: OneOf<[string, null]>;
      node_id: string;
      /** Format: uri */
      html_url: string;
      description: string;
      implementation: string;
      permissions: string[];
      conditions: string[];
      limitations: string[];
      body: string;
      featured: boolean;
    };
    /**
     * Api Overview
     * @description Api Overview
     */
    "api-overview": {
      verifiable_password_authentication: boolean;
      ssh_key_fingerprints?: {
        SHA256_RSA?: string;
        SHA256_DSA?: string;
        SHA256_ECDSA?: string;
        SHA256_ED25519?: string;
      };
      hooks?: string[];
      web?: string[];
      api?: string[];
      git?: string[];
      packages?: string[];
      pages?: string[];
      importer?: string[];
      actions?: string[];
      dependabot?: string[];
    };
    /**
     * Minimal Repository
     * @description Minimal Repository
     */
    "minimal-repository": {
      id: number;
      node_id: string;
      name: string;
      full_name: string;
      owner: components["schemas"]["simple-user"];
      private: boolean;
      /** Format: uri */
      html_url: string;
      description: OneOf<[string, null]>;
      fork: boolean;
      /** Format: uri */
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /** Format: uri */
      contributors_url: string;
      /** Format: uri */
      deployments_url: string;
      /** Format: uri */
      downloads_url: string;
      /** Format: uri */
      events_url: string;
      /** Format: uri */
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url?: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      /** Format: uri */
      languages_url: string;
      /** Format: uri */
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url?: string;
      /** Format: uri */
      stargazers_url: string;
      statuses_url: string;
      /** Format: uri */
      subscribers_url: string;
      /** Format: uri */
      subscription_url: string;
      /** Format: uri */
      tags_url: string;
      /** Format: uri */
      teams_url: string;
      trees_url: string;
      clone_url?: string;
      mirror_url?: OneOf<[string, null]>;
      /** Format: uri */
      hooks_url: string;
      svn_url?: string;
      homepage?: OneOf<[string, null]>;
      language?: OneOf<[string, null]>;
      forks_count?: number;
      stargazers_count?: number;
      watchers_count?: number;
      /** @description The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0. */
      size?: number;
      default_branch?: string;
      open_issues_count?: number;
      is_template?: boolean;
      topics?: string[];
      has_issues?: boolean;
      has_projects?: boolean;
      has_wiki?: boolean;
      has_pages?: boolean;
      has_downloads?: boolean;
      has_discussions?: boolean;
      archived?: boolean;
      disabled?: boolean;
      visibility?: string;
      /** Format: date-time */
      pushed_at?: OneOf<[string, null]>;
      /** Format: date-time */
      created_at?: OneOf<[string, null]>;
      /** Format: date-time */
      updated_at?: OneOf<[string, null]>;
      permissions?: {
        admin?: boolean;
        maintain?: boolean;
        push?: boolean;
        triage?: boolean;
        pull?: boolean;
      };
      role_name?: string;
      temp_clone_token?: string;
      delete_branch_on_merge?: boolean;
      subscribers_count?: number;
      network_count?: number;
      code_of_conduct?: components["schemas"]["code-of-conduct"];
      license?: OneOf<
        [
          {
            key?: string;
            name?: string;
            spdx_id?: string;
            url?: string;
            node_id?: string;
          },
          null
        ]
      >;
      forks?: number;
      open_issues?: number;
      watchers?: number;
      allow_forking?: boolean;
      web_commit_signoff_required?: boolean;
    };
    /**
     * Thread
     * @description Thread
     */
    thread: {
      id: string;
      repository: components["schemas"]["minimal-repository"];
      subject: {
        title: string;
        url: string;
        latest_comment_url: string;
        type: string;
      };
      reason: string;
      unread: boolean;
      updated_at: string;
      last_read_at: OneOf<[string, null]>;
      url: string;
      subscription_url: string;
    };
    /**
     * Thread Subscription
     * @description Thread Subscription
     */
    "thread-subscription": {
      subscribed: boolean;
      ignored: boolean;
      reason: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: uri */
      thread_url?: string;
      /** Format: uri */
      repository_url?: string;
    };
    /**
     * Organization Full
     * @description Organization Full
     */
    "organization-full": {
      login: string;
      id: number;
      node_id: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      repos_url: string;
      /** Format: uri */
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: OneOf<[string, null]>;
      name?: string;
      company?: string;
      /** Format: uri */
      blog?: string;
      location?: string;
      /** Format: email */
      email?: string;
      twitter_username?: OneOf<[string, null]>;
      is_verified?: boolean;
      has_organization_projects: boolean;
      has_repository_projects: boolean;
      public_repos: number;
      public_gists: number;
      followers: number;
      following: number;
      /** Format: uri */
      html_url: string;
      /** Format: date-time */
      created_at: string;
      type: string;
      total_private_repos?: number;
      owned_private_repos?: number;
      private_gists?: OneOf<[number, null]>;
      disk_usage?: OneOf<[number, null]>;
      collaborators?: OneOf<[number, null]>;
      /** Format: email */
      billing_email?: OneOf<[string, null]>;
      plan?: {
        name: string;
        space: number;
        private_repos: number;
        filled_seats?: number;
        seats?: number;
      };
      default_repository_permission?: OneOf<[string, null]>;
      members_can_create_repositories?: OneOf<[boolean, null]>;
      two_factor_requirement_enabled?: OneOf<[boolean, null]>;
      members_allowed_repository_creation_type?: string;
      members_can_create_public_repositories?: boolean;
      members_can_create_private_repositories?: boolean;
      members_can_create_internal_repositories?: boolean;
      members_can_create_pages?: boolean;
      members_can_create_public_pages?: boolean;
      members_can_create_private_pages?: boolean;
      members_can_fork_private_repositories?: OneOf<[boolean, null]>;
      web_commit_signoff_required?: boolean;
      /** Format: date-time */
      updated_at: string;
      /**
       * @description Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
       *
       * This field is only visible to organization owners or members of a team with the security manager role.
       */
      advanced_security_enabled_for_new_repositories?: boolean;
      /**
       * @description Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to
       * this organization.
       *
       * This field is only visible to organization owners or members of a team with the security manager role.
       */
      dependabot_alerts_enabled_for_new_repositories?: boolean;
      /**
       * @description Whether dependabot security updates are automatically enabled for new repositories and repositories transferred
       * to this organization.
       *
       * This field is only visible to organization owners or members of a team with the security manager role.
       */
      dependabot_security_updates_enabled_for_new_repositories?: boolean;
      /**
       * @description Whether dependency graph is automatically enabled for new repositories and repositories transferred to this
       * organization.
       *
       * This field is only visible to organization owners or members of a team with the security manager role.
       */
      dependency_graph_enabled_for_new_repositories?: boolean;
      /**
       * @description Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
       * organization.
       *
       * This field is only visible to organization owners or members of a team with the security manager role.
       */
      secret_scanning_enabled_for_new_repositories?: boolean;
      /**
       * @description Whether secret scanning push protection is automatically enabled for new repositories and repositories
       * transferred to this organization.
       *
       * This field is only visible to organization owners or members of a team with the security manager role.
       */
      secret_scanning_push_protection_enabled_for_new_repositories?: boolean;
      /** @description Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection. */
      secret_scanning_push_protection_custom_link_enabled?: boolean;
      /** @description An optional URL string to display to contributors who are blocked from pushing a secret. */
      secret_scanning_push_protection_custom_link?: OneOf<[string, null]>;
    };
    /**
     * @description The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
     * @enum {string}
     */
    "enabled-repositories": "all" | "none" | "selected";
    "actions-organization-permissions": {
      enabled_repositories: components["schemas"]["enabled-repositories"];
      /** @description The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`. */
      selected_repositories_url?: string;
      allowed_actions?: components["schemas"]["allowed-actions"];
      selected_actions_url?: components["schemas"]["selected-actions-url"];
    };
    /**
     * @description The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
     * @enum {string}
     */
    "actions-default-workflow-permissions": "read" | "write";
    /** @description Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. */
    "actions-can-approve-pull-request-reviews": boolean;
    "actions-get-default-workflow-permissions": {
      default_workflow_permissions: components["schemas"]["actions-default-workflow-permissions"];
      can_approve_pull_request_reviews: components["schemas"]["actions-can-approve-pull-request-reviews"];
    };
    "actions-set-default-workflow-permissions": {
      default_workflow_permissions?: components["schemas"]["actions-default-workflow-permissions"];
      can_approve_pull_request_reviews?: components["schemas"]["actions-can-approve-pull-request-reviews"];
    };
    "runner-groups-org": {
      id: number;
      name: string;
      visibility: string;
      default: boolean;
      /** @description Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected` */
      selected_repositories_url?: string;
      runners_url: string;
      inherited: boolean;
      inherited_allows_public_repositories?: boolean;
      allows_public_repositories: boolean;
      /**
       * @description If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
       * @default false
       */
      workflow_restrictions_read_only?: boolean;
      /**
       * @description If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
       * @default false
       */
      restricted_to_workflows?: boolean;
      /** @description List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
      selected_workflows?: string[];
    };
    /**
     * Actions Secret for an Organization
     * @description Secrets for GitHub Actions for an organization.
     */
    "organization-actions-secret": {
      /** @description The name of the secret. */
      name: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /**
       * @description Visibility of a secret
       * @enum {string}
       */
      visibility: "all" | "private" | "selected";
      /** Format: uri */
      selected_repositories_url?: string;
    };
    /**
     * ActionsPublicKey
     * @description The public key used for setting Actions Secrets.
     */
    "actions-public-key": {
      /** @description The identifier for the key. */
      key_id: string;
      /** @description The Base64 encoded public key. */
      key: string;
      id?: number;
      url?: string;
      title?: string;
      created_at?: string;
    };
    /**
     * Empty Object
     * @description An object without any properties.
     */
    "empty-object": Record<string, never>;
    /** @description The name of the tool used to generate the code scanning analysis. */
    "code-scanning-analysis-tool-name": string;
    /** @description The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
    "code-scanning-analysis-tool-guid": OneOf<[string, null]>;
    /**
     * @description State of a code scanning alert.
     * @enum {string}
     */
    "code-scanning-alert-state": "open" | "closed" | "dismissed" | "fixed";
    /**
     * Format: uri
     * @description The REST API URL for fetching the list of instances for an alert.
     */
    readonly "alert-instances-url": string;
    /**
     * Format: date-time
     * @description The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly "alert-fixed-at": OneOf<[string, null]>;
    /**
     * Format: date-time
     * @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly "alert-dismissed-at": OneOf<[string, null]>;
    /**
     * @description **Required when the state is dismissed.** The reason for dismissing or closing the alert.
     * @enum {string|null}
     */
    "code-scanning-alert-dismissed-reason":
      | ""
      | "false positive"
      | "won't fix"
      | "used in tests"
      | null;
    "code-scanning-alert-rule": {
      /** @description A unique identifier for the rule used to detect the alert. */
      id?: OneOf<[string, null]>;
      /** @description The name of the rule used to detect the alert. */
      name?: string;
      /**
       * @description The severity of the alert.
       * @enum {string|null}
       */
      severity?: "none" | "note" | "warning" | "error" | "" | null;
      /**
       * @description The security severity of the alert.
       * @enum {string|null}
       */
      security_severity_level?:
        | "low"
        | "medium"
        | "high"
        | "critical"
        | ""
        | null;
      /** @description A short description of the rule used to detect the alert. */
      description?: string;
      /** @description description of the rule used to detect the alert. */
      full_description?: string;
      /** @description A set of tags applicable for the rule. */
      tags?: OneOf<[string[], null]>;
      /** @description Detailed documentation for the rule as GitHub Flavored Markdown. */
      help?: OneOf<[string, null]>;
      /** @description A link to the documentation for the rule used to detect the alert. */
      help_uri?: OneOf<[string, null]>;
    };
    /** @description The version of the tool used to generate the code scanning analysis. */
    "code-scanning-analysis-tool-version": OneOf<[string, null]>;
    "code-scanning-analysis-tool": {
      name?: components["schemas"]["code-scanning-analysis-tool-name"];
      version?: components["schemas"]["code-scanning-analysis-tool-version"];
      guid?: components["schemas"]["code-scanning-analysis-tool-guid"];
    };
    /**
     * @description The full Git reference, formatted as `refs/heads/<branch name>`,
     * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
     */
    "code-scanning-ref": string;
    /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
    "code-scanning-analysis-analysis-key": string;
    /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
    "code-scanning-alert-environment": string;
    /** @description Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
    "code-scanning-analysis-category": string;
    /** @description Describe a region within a file for the alert. */
    "code-scanning-alert-location": {
      path?: string;
      start_line?: number;
      end_line?: number;
      start_column?: number;
      end_column?: number;
    };
    /**
     * @description A classification of the file. For example to identify it as generated.
     * @enum {string|null}
     */
    "code-scanning-alert-classification":
      | "source"
      | "generated"
      | "test"
      | "library"
      | ""
      | null;
    "code-scanning-alert-instance": {
      ref?: components["schemas"]["code-scanning-ref"];
      analysis_key?: components["schemas"]["code-scanning-analysis-analysis-key"];
      environment?: components["schemas"]["code-scanning-alert-environment"];
      category?: components["schemas"]["code-scanning-analysis-category"];
      state?: components["schemas"]["code-scanning-alert-state"];
      commit_sha?: string;
      message?: {
        text?: string;
      };
      location?: components["schemas"]["code-scanning-alert-location"];
      html_url?: string;
      /**
       * @description Classifications that have been applied to the file that triggered the alert.
       * For example identifying it as documentation, or a generated file.
       */
      classifications?: components["schemas"]["code-scanning-alert-classification"][];
    };
    "code-scanning-organization-alert-items": {
      number: components["schemas"]["alert-number"];
      created_at: components["schemas"]["alert-created-at"];
      updated_at?: components["schemas"]["alert-updated-at"];
      url: components["schemas"]["alert-url"];
      html_url: components["schemas"]["alert-html-url"];
      instances_url: components["schemas"]["alert-instances-url"];
      state: components["schemas"]["code-scanning-alert-state"];
      fixed_at?: components["schemas"]["alert-fixed-at"];
      dismissed_by: null | components["schemas"]["simple-user"];
      dismissed_at: components["schemas"]["alert-dismissed-at"];
      dismissed_reason: components["schemas"]["code-scanning-alert-dismissed-reason"];
      rule: components["schemas"]["code-scanning-alert-rule"];
      tool: components["schemas"]["code-scanning-analysis-tool"];
      most_recent_instance: components["schemas"]["code-scanning-alert-instance"];
      repository: components["schemas"]["simple-repository"];
    };
    /**
     * ExternalGroup
     * @description Information about an external group's usage and its members
     */
    "external-group": {
      /** @description The internal ID of the group */
      group_id: number;
      /** @description The display name for the group */
      group_name: string;
      /** @description The date when the group was last updated_at */
      updated_at?: string;
      /** @description An array of teams linked to this group */
      teams: {
        /** @description The id for a team */
        team_id: number;
        /** @description The name of the team */
        team_name: string;
      }[];
      /** @description An array of external members linked to this group */
      members: {
        /** @description The internal user ID of the identity */
        member_id: number;
        /** @description The handle/login for the user */
        member_login: string;
        /** @description The user display name/profile name */
        member_name: string;
        /** @description An email attached to a user */
        member_email: string;
      }[];
    };
    /**
     * ExternalGroups
     * @description A list of external groups available to be connected to a team
     */
    "external-groups": {
      /** @description An array of external groups available to be mapped to a team */
      groups?: {
        /** @description The internal ID of the group */
        group_id: number;
        /** @description The display name of the group */
        group_name: string;
        /** @description The time of the last update for this group */
        updated_at: string;
      }[];
    };
    /**
     * Org Hook
     * @description Org Hook
     */
    "org-hook": {
      id: number;
      /** Format: uri */
      url: string;
      /** Format: uri */
      ping_url: string;
      /** Format: uri */
      deliveries_url?: string;
      name: string;
      events: string[];
      active: boolean;
      config: {
        url?: string;
        insecure_ssl?: string;
        content_type?: string;
        secret?: string;
      };
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      created_at: string;
      type: string;
    };
    /**
     * Org Membership
     * @description Org Membership
     */
    "org-membership": {
      /** Format: uri */
      url: string;
      /**
       * @description The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
       * @enum {string}
       */
      state: "active" | "pending";
      /**
       * @description The user's membership type in the organization.
       * @enum {string}
       */
      role: "admin" | "member" | "billing_manager";
      /** Format: uri */
      organization_url: string;
      organization: components["schemas"]["organization-simple"];
      user: null | components["schemas"]["simple-user"];
      permissions?: {
        can_create_repository: boolean;
      };
    };
    /**
     * Migration
     * @description A migration.
     */
    migration: {
      id: number;
      owner: null | components["schemas"]["simple-user"];
      guid: string;
      state: string;
      lock_repositories: boolean;
      exclude_metadata: boolean;
      exclude_git_data: boolean;
      exclude_attachments: boolean;
      exclude_releases: boolean;
      exclude_owner_projects: boolean;
      org_metadata_only: boolean;
      /** @description The repositories included in the migration. Only returned for export migrations. */
      repositories: components["schemas"]["repository"][];
      /** Format: uri */
      url: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      node_id: string;
      /** Format: uri */
      archive_url?: string;
      /** @description Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`. */
      exclude?: string[];
    };
    /**
     * Project
     * @description Projects are a way to organize columns and cards of work.
     */
    project: {
      /** Format: uri */
      owner_url: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      columns_url: string;
      id: number;
      node_id: string;
      /** @description Name of the project */
      name: string;
      /** @description Body of the project */
      body: OneOf<[string, null]>;
      number: number;
      /** @description State of the project; either 'open' or 'closed' */
      state: string;
      creator: null | components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /**
       * @description The baseline permission that all organization members have on this project. Only present if owner is an organization.
       * @enum {string}
       */
      organization_permission?: "read" | "write" | "admin" | "none";
      /** @description Whether or not this project can be seen by everyone. Only present if owner is an organization. */
      private?: boolean;
    };
    /**
     * Team Simple
     * @description Groups of organization members that gives permissions on specified repositories.
     */
    "team-simple": {
      /** @description Unique identifier of the team */
      id: number;
      node_id: string;
      /**
       * Format: uri
       * @description URL for the team
       */
      url: string;
      members_url: string;
      /** @description Name of the team */
      name: string;
      /** @description Description of the team */
      description: OneOf<[string, null]>;
      /** @description Permission that the team will have for its repositories */
      permission: string;
      /** @description The level of privacy this team should have */
      privacy?: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      repositories_url: string;
      slug: string;
      /** @description Distinguished Name (DN) that team maps to within LDAP environment */
      ldap_dn?: string;
    };
    /**
     * Team
     * @description Groups of organization members that gives permissions on specified repositories.
     */
    team: {
      id: number;
      node_id: string;
      name: string;
      slug: string;
      description: OneOf<[string, null]>;
      privacy?: string;
      permission: string;
      permissions?: {
        pull: boolean;
        triage: boolean;
        push: boolean;
        maintain: boolean;
        admin: boolean;
      };
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      members_url: string;
      /** Format: uri */
      repositories_url: string;
      parent: null | components["schemas"]["team-simple"];
    };
    /**
     * Team Organization
     * @description Team Organization
     */
    "team-organization": {
      login: string;
      id: number;
      node_id: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      repos_url: string;
      /** Format: uri */
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: OneOf<[string, null]>;
      name?: string;
      company?: string;
      /** Format: uri */
      blog?: string;
      location?: string;
      /** Format: email */
      email?: string;
      twitter_username?: OneOf<[string, null]>;
      is_verified?: boolean;
      has_organization_projects: boolean;
      has_repository_projects: boolean;
      public_repos: number;
      public_gists: number;
      followers: number;
      following: number;
      /** Format: uri */
      html_url: string;
      /** Format: date-time */
      created_at: string;
      type: string;
      total_private_repos?: number;
      owned_private_repos?: number;
      private_gists?: OneOf<[number, null]>;
      disk_usage?: OneOf<[number, null]>;
      collaborators?: OneOf<[number, null]>;
      /** Format: email */
      billing_email?: OneOf<[string, null]>;
      plan?: {
        name: string;
        space: number;
        private_repos: number;
        filled_seats?: number;
        seats?: number;
      };
      default_repository_permission?: OneOf<[string, null]>;
      members_can_create_repositories?: OneOf<[boolean, null]>;
      two_factor_requirement_enabled?: OneOf<[boolean, null]>;
      members_allowed_repository_creation_type?: string;
      members_can_create_public_repositories?: boolean;
      members_can_create_private_repositories?: boolean;
      members_can_create_internal_repositories?: boolean;
      members_can_create_pages?: boolean;
      members_can_create_public_pages?: boolean;
      members_can_create_private_pages?: boolean;
      members_can_fork_private_repositories?: OneOf<[boolean, null]>;
      web_commit_signoff_required?: boolean;
      /** Format: date-time */
      updated_at: string;
    };
    /**
     * Full Team
     * @description Groups of organization members that gives permissions on specified repositories.
     */
    "team-full": {
      /** @description Unique identifier of the team */
      id: number;
      node_id: string;
      /**
       * Format: uri
       * @description URL for the team
       */
      url: string;
      /** Format: uri */
      html_url: string;
      /** @description Name of the team */
      name: string;
      slug: string;
      description: OneOf<[string, null]>;
      /**
       * @description The level of privacy this team should have
       * @enum {string}
       */
      privacy?: "closed" | "secret";
      /** @description Permission that the team will have for its repositories */
      permission: string;
      members_url: string;
      /** Format: uri */
      repositories_url: string;
      parent?: null | components["schemas"]["team-simple"];
      members_count: number;
      repos_count: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      organization: components["schemas"]["team-organization"];
      /** @description Distinguished Name (DN) that team maps to within LDAP environment */
      ldap_dn?: string;
    };
    /**
     * Team Discussion
     * @description A team discussion is a persistent record of a free-form conversation within a team.
     */
    "team-discussion": {
      author: null | components["schemas"]["simple-user"];
      /** @description The main text of the discussion. */
      body: string;
      body_html: string;
      /** @description The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
      body_version: string;
      comments_count: number;
      /** Format: uri */
      comments_url: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      last_edited_at: OneOf<[string, null]>;
      /** Format: uri */
      html_url: string;
      node_id: string;
      /** @description The unique sequence number of a team discussion. */
      number: number;
      /** @description Whether or not this discussion should be pinned for easy retrieval. */
      pinned: boolean;
      /** @description Whether or not this discussion should be restricted to team members and organization administrators. */
      private: boolean;
      /** Format: uri */
      team_url: string;
      /** @description The title of the discussion. */
      title: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      url: string;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Team Discussion Comment
     * @description A reply to a discussion within a team.
     */
    "team-discussion-comment": {
      author: null | components["schemas"]["simple-user"];
      /** @description The main text of the comment. */
      body: string;
      body_html: string;
      /** @description The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
      body_version: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      last_edited_at: OneOf<[string, null]>;
      /** Format: uri */
      discussion_url: string;
      /** Format: uri */
      html_url: string;
      node_id: string;
      /** @description The unique sequence number of a team discussion comment. */
      number: number;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      url: string;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Reaction
     * @description Reactions to conversations provide a way to help people express their feelings more simply and effectively.
     */
    reaction: {
      id: number;
      node_id: string;
      user: null | components["schemas"]["simple-user"];
      /**
       * @description The reaction to use
       * @enum {string}
       */
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes";
      /** Format: date-time */
      created_at: string;
    };
    /**
     * Team Membership
     * @description Team Membership
     */
    "team-membership": {
      /** Format: uri */
      url: string;
      /**
       * @description The role of the user in the team.
       * @default member
       * @enum {string}
       */
      role: "member" | "maintainer";
      /**
       * @description The state of the user's membership in the team.
       * @enum {string}
       */
      state: "active" | "pending";
    };
    /**
     * Team Project
     * @description A team's access to a project.
     */
    "team-project": {
      owner_url: string;
      url: string;
      html_url: string;
      columns_url: string;
      id: number;
      node_id: string;
      name: string;
      body: OneOf<[string, null]>;
      number: number;
      state: string;
      creator: components["schemas"]["simple-user"];
      created_at: string;
      updated_at: string;
      /** @description The organization permission for this project. Only present when owner is an organization. */
      organization_permission?: string;
      /** @description Whether the project is private or not. Only present when owner is an organization. */
      private?: boolean;
      permissions: {
        read: boolean;
        write: boolean;
        admin: boolean;
      };
    };
    /**
     * Team Repository
     * @description A team's access to a repository.
     */
    "team-repository": {
      /** @description Unique identifier of the repository */
      id: number;
      node_id: string;
      /** @description The name of the repository. */
      name: string;
      full_name: string;
      license: null | components["schemas"]["license-simple"];
      forks: number;
      permissions?: {
        admin: boolean;
        pull: boolean;
        triage?: boolean;
        push: boolean;
        maintain?: boolean;
      };
      role_name?: string;
      owner: null | components["schemas"]["simple-user"];
      /**
       * @description Whether the repository is private or public.
       * @default false
       */
      private: boolean;
      /** Format: uri */
      html_url: string;
      description: OneOf<[string, null]>;
      fork: boolean;
      /** Format: uri */
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /** Format: uri */
      contributors_url: string;
      /** Format: uri */
      deployments_url: string;
      /** Format: uri */
      downloads_url: string;
      /** Format: uri */
      events_url: string;
      /** Format: uri */
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      /** Format: uri */
      languages_url: string;
      /** Format: uri */
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url: string;
      /** Format: uri */
      stargazers_url: string;
      statuses_url: string;
      /** Format: uri */
      subscribers_url: string;
      /** Format: uri */
      subscription_url: string;
      /** Format: uri */
      tags_url: string;
      /** Format: uri */
      teams_url: string;
      trees_url: string;
      clone_url: string;
      /** Format: uri */
      mirror_url: OneOf<[string, null]>;
      /** Format: uri */
      hooks_url: string;
      /** Format: uri */
      svn_url: string;
      /** Format: uri */
      homepage: OneOf<[string, null]>;
      language: OneOf<[string, null]>;
      forks_count: number;
      stargazers_count: number;
      watchers_count: number;
      size: number;
      /** @description The default branch of the repository. */
      default_branch: string;
      open_issues_count: number;
      /**
       * @description Whether this repository acts as a template that can be used to generate new repositories.
       * @default false
       */
      is_template?: boolean;
      topics?: string[];
      /**
       * @description Whether issues are enabled.
       * @default true
       */
      has_issues: boolean;
      /**
       * @description Whether projects are enabled.
       * @default true
       */
      has_projects: boolean;
      /**
       * @description Whether the wiki is enabled.
       * @default true
       */
      has_wiki: boolean;
      has_pages: boolean;
      /**
       * @description Whether downloads are enabled.
       * @default true
       */
      has_downloads: boolean;
      /**
       * @description Whether the repository is archived.
       * @default false
       */
      archived: boolean;
      /** @description Returns whether or not this repository disabled. */
      disabled: boolean;
      /**
       * @description The repository visibility: public, private, or internal.
       * @default public
       */
      visibility?: string;
      /** Format: date-time */
      pushed_at: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: OneOf<[string, null]>;
      /** Format: date-time */
      updated_at: OneOf<[string, null]>;
      /**
       * @description Whether to allow rebase merges for pull requests.
       * @default true
       */
      allow_rebase_merge?: boolean;
      template_repository?: null | components["schemas"]["repository"];
      temp_clone_token?: string;
      /**
       * @description Whether to allow squash merges for pull requests.
       * @default true
       */
      allow_squash_merge?: boolean;
      /**
       * @description Whether to allow Auto-merge to be used on pull requests.
       * @default false
       */
      allow_auto_merge?: boolean;
      /**
       * @description Whether to delete head branches when pull requests are merged
       * @default false
       */
      delete_branch_on_merge?: boolean;
      /**
       * @description Whether to allow merge commits for pull requests.
       * @default true
       */
      allow_merge_commit?: boolean;
      /**
       * @description Whether to allow forking this repo
       * @default false
       */
      allow_forking?: boolean;
      /**
       * @description Whether to require contributors to sign off on web-based commits
       * @default false
       */
      web_commit_signoff_required?: boolean;
      subscribers_count?: number;
      network_count?: number;
      open_issues: number;
      watchers: number;
      master_branch?: string;
    };
    /**
     * Project Card
     * @description Project cards represent a scope of work.
     */
    "project-card": {
      /** Format: uri */
      url: string;
      /** @description The project card's ID */
      id: number;
      node_id: string;
      note: OneOf<[string, null]>;
      creator: null | components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** @description Whether or not the card is archived */
      archived?: boolean;
      column_name?: string;
      project_id?: string;
      /** Format: uri */
      column_url: string;
      /** Format: uri */
      content_url?: string;
      /** Format: uri */
      project_url: string;
    };
    /**
     * Project Column
     * @description Project columns contain cards of work.
     */
    "project-column": {
      /** Format: uri */
      url: string;
      /** Format: uri */
      project_url: string;
      /** Format: uri */
      cards_url: string;
      /** @description The unique identifier of the project column */
      id: number;
      node_id: string;
      /** @description Name of the project column */
      name: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    /**
     * Project Collaborator Permission
     * @description Project Collaborator Permission
     */
    "project-collaborator-permission": {
      permission: string;
      user: null | components["schemas"]["simple-user"];
    };
    /** Rate Limit */
    "rate-limit": {
      limit: number;
      remaining: number;
      reset: number;
      used: number;
    };
    /**
     * Rate Limit Overview
     * @description Rate Limit Overview
     */
    "rate-limit-overview": {
      resources: {
        core: components["schemas"]["rate-limit"];
        graphql?: components["schemas"]["rate-limit"];
        search: components["schemas"]["rate-limit"];
        source_import?: components["schemas"]["rate-limit"];
        integration_manifest?: components["schemas"]["rate-limit"];
        code_scanning_upload?: components["schemas"]["rate-limit"];
        actions_runner_registration?: components["schemas"]["rate-limit"];
        scim?: components["schemas"]["rate-limit"];
      };
      rate: components["schemas"]["rate-limit"];
    };
    /**
     * Code Of Conduct Simple
     * @description Code of Conduct Simple
     */
    "code-of-conduct-simple": {
      /** Format: uri */
      url: string;
      key: string;
      name: string;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
    };
    "security-and-analysis": OneOf<
      [
        {
          advanced_security?: {
            /** @enum {string} */
            status?: "enabled" | "disabled";
          };
          secret_scanning?: {
            /** @enum {string} */
            status?: "enabled" | "disabled";
          };
          secret_scanning_push_protection?: {
            /** @enum {string} */
            status?: "enabled" | "disabled";
          };
        },
        null
      ]
    >;
    /**
     * Full Repository
     * @description Full Repository
     */
    "full-repository": {
      id: number;
      node_id: string;
      name: string;
      full_name: string;
      owner: components["schemas"]["simple-user"];
      private: boolean;
      /** Format: uri */
      html_url: string;
      description: OneOf<[string, null]>;
      fork: boolean;
      /** Format: uri */
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /** Format: uri */
      contributors_url: string;
      /** Format: uri */
      deployments_url: string;
      /** Format: uri */
      downloads_url: string;
      /** Format: uri */
      events_url: string;
      /** Format: uri */
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      /** Format: uri */
      languages_url: string;
      /** Format: uri */
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url: string;
      /** Format: uri */
      stargazers_url: string;
      statuses_url: string;
      /** Format: uri */
      subscribers_url: string;
      /** Format: uri */
      subscription_url: string;
      /** Format: uri */
      tags_url: string;
      /** Format: uri */
      teams_url: string;
      trees_url: string;
      clone_url: string;
      /** Format: uri */
      mirror_url: OneOf<[string, null]>;
      /** Format: uri */
      hooks_url: string;
      /** Format: uri */
      svn_url: string;
      /** Format: uri */
      homepage: OneOf<[string, null]>;
      language: OneOf<[string, null]>;
      forks_count: number;
      stargazers_count: number;
      watchers_count: number;
      /** @description The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0. */
      size: number;
      default_branch: string;
      open_issues_count: number;
      is_template?: boolean;
      topics?: string[];
      has_issues: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_pages: boolean;
      has_downloads: boolean;
      has_discussions: boolean;
      archived: boolean;
      /** @description Returns whether or not this repository disabled. */
      disabled: boolean;
      /** @description The repository visibility: public, private, or internal. */
      visibility?: string;
      /** Format: date-time */
      pushed_at: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        push: boolean;
        triage?: boolean;
        pull: boolean;
      };
      allow_rebase_merge?: boolean;
      template_repository?: null | components["schemas"]["repository"];
      temp_clone_token?: OneOf<[string, null]>;
      allow_squash_merge?: boolean;
      allow_auto_merge?: boolean;
      delete_branch_on_merge?: boolean;
      allow_merge_commit?: boolean;
      allow_update_branch?: boolean;
      use_squash_pr_title_as_default?: boolean;
      allow_forking?: boolean;
      web_commit_signoff_required?: boolean;
      subscribers_count: number;
      network_count: number;
      license: null | components["schemas"]["license-simple"];
      organization?: null | components["schemas"]["simple-user"];
      parent?: components["schemas"]["repository"];
      source?: components["schemas"]["repository"];
      forks: number;
      master_branch?: string;
      open_issues: number;
      watchers: number;
      /**
       * @description Whether anonymous git access is allowed.
       * @default true
       */
      anonymous_access_enabled?: boolean;
      code_of_conduct?: components["schemas"]["code-of-conduct-simple"];
      security_and_analysis?: components["schemas"]["security-and-analysis"];
    };
    /**
     * Artifact
     * @description An artifact
     */
    artifact: {
      id: number;
      node_id: string;
      /** @description The name of the artifact. */
      name: string;
      /** @description The size in bytes of the artifact. */
      size_in_bytes: number;
      url: string;
      archive_download_url: string;
      /** @description Whether or not the artifact has expired. */
      expired: boolean;
      /** Format: date-time */
      created_at: OneOf<[string, null]>;
      /** Format: date-time */
      expires_at: OneOf<[string, null]>;
      /** Format: date-time */
      updated_at: OneOf<[string, null]>;
      workflow_run?: OneOf<
        [
          {
            id?: number;
            repository_id?: number;
            head_repository_id?: number;
            head_branch?: string;
            head_sha?: string;
          },
          null
        ]
      >;
    };
    /**
     * Job
     * @description Information of a job execution in a workflow run
     */
    job: {
      /** @description The id of the job. */
      id: number;
      /** @description The id of the associated workflow run. */
      run_id: number;
      run_url: string;
      /** @description Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run. */
      run_attempt?: number;
      node_id: string;
      /** @description The SHA of the commit that is being run. */
      head_sha: string;
      url: string;
      html_url: OneOf<[string, null]>;
      /**
       * @description The phase of the lifecycle that the job is currently in.
       * @enum {string}
       */
      status: "queued" | "in_progress" | "completed";
      /**
       * @description The outcome of the job.
       * @enum {string|null}
       */
      conclusion:
        | "success"
        | "failure"
        | "neutral"
        | "cancelled"
        | "skipped"
        | "timed_out"
        | "action_required"
        | ""
        | null;
      /**
       * Format: date-time
       * @description The time that the job started, in ISO 8601 format.
       */
      started_at: string;
      /**
       * Format: date-time
       * @description The time that the job finished, in ISO 8601 format.
       */
      completed_at: OneOf<[string, null]>;
      /** @description The name of the job. */
      name: string;
      /** @description Steps in this job. */
      steps?: {
        /**
         * @description The phase of the lifecycle that the job is currently in.
         * @enum {string}
         */
        status: "queued" | "in_progress" | "completed";
        /** @description The outcome of the job. */
        conclusion: OneOf<[string, null]>;
        /** @description The name of the job. */
        name: string;
        number: number;
        /**
         * Format: date-time
         * @description The time that the step started, in ISO 8601 format.
         */
        started_at?: OneOf<[string, null]>;
        /**
         * Format: date-time
         * @description The time that the job finished, in ISO 8601 format.
         */
        completed_at?: OneOf<[string, null]>;
      }[];
      check_run_url: string;
      /** @description Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file. */
      labels: string[];
      /** @description The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
      runner_id: OneOf<[number, null]>;
      /** @description The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
      runner_name: OneOf<[string, null]>;
      /** @description The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
      runner_group_id: OneOf<[number, null]>;
      /** @description The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
      runner_group_name: OneOf<[string, null]>;
      /** @description The name of the workflow. */
      workflow_name: OneOf<[string, null]>;
      /** @description The name of the current branch. */
      head_branch: OneOf<[string, null]>;
    };
    /**
     * Actions Secret
     * @description Set secrets for GitHub Actions.
     */
    "actions-secret": {
      /** @description The name of the secret. */
      name: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    /** @description Whether GitHub Actions is enabled on the repository. */
    "actions-enabled": boolean;
    "actions-repository-permissions": {
      enabled: components["schemas"]["actions-enabled"];
      allowed_actions?: components["schemas"]["allowed-actions"];
      selected_actions_url?: components["schemas"]["selected-actions-url"];
    };
    /**
     * Referenced workflow
     * @description A workflow referenced/reused by the initial caller workflow
     */
    "referenced-workflow": {
      path: string;
      sha: string;
      ref?: string;
    };
    /** Pull Request Minimal */
    "pull-request-minimal": {
      id: number;
      number: number;
      url: string;
      head: {
        ref: string;
        sha: string;
        repo: {
          id: number;
          url: string;
          name: string;
        };
      };
      base: {
        ref: string;
        sha: string;
        repo: {
          id: number;
          url: string;
          name: string;
        };
      };
    };
    /**
     * Simple Commit
     * @description A commit.
     */
    "simple-commit": {
      id: string;
      tree_id: string;
      message: string;
      /** Format: date-time */
      timestamp: string;
      author: OneOf<
        [
          {
            name: string;
            email: string;
          },
          null
        ]
      >;
      committer: OneOf<
        [
          {
            name: string;
            email: string;
          },
          null
        ]
      >;
    };
    /**
     * Workflow Run
     * @description An invocation of a workflow
     */
    "workflow-run": {
      /** @description The ID of the workflow run. */
      id: number;
      /** @description The name of the workflow run. */
      name?: OneOf<[string, null]>;
      node_id: string;
      /** @description The ID of the associated check suite. */
      check_suite_id?: number;
      /** @description The node ID of the associated check suite. */
      check_suite_node_id?: string;
      head_branch: OneOf<[string, null]>;
      /** @description The SHA of the head commit that points to the version of the workflow being run. */
      head_sha: string;
      /** @description The full path of the workflow */
      path: string;
      /** @description The auto incrementing run number for the workflow run. */
      run_number: number;
      /** @description Attempt number of the run, 1 for first attempt and higher if the workflow was re-run. */
      run_attempt?: number;
      referenced_workflows?: OneOf<
        [components["schemas"]["referenced-workflow"][], null]
      >;
      event: string;
      status: OneOf<[string, null]>;
      conclusion: OneOf<[string, null]>;
      /** @description The ID of the parent workflow. */
      workflow_id: number;
      /** @description The URL to the workflow run. */
      url: string;
      html_url: string;
      pull_requests: OneOf<
        [components["schemas"]["pull-request-minimal"][], null]
      >;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      actor?: components["schemas"]["simple-user"];
      triggering_actor?: components["schemas"]["simple-user"];
      /**
       * Format: date-time
       * @description The start time of the latest run. Resets on re-run.
       */
      run_started_at?: string;
      /** @description The URL to the jobs for the workflow run. */
      jobs_url: string;
      /** @description The URL to download the logs for the workflow run. */
      logs_url: string;
      /** @description The URL to the associated check suite. */
      check_suite_url: string;
      /** @description The URL to the artifacts for the workflow run. */
      artifacts_url: string;
      /** @description The URL to cancel the workflow run. */
      cancel_url: string;
      /** @description The URL to rerun the workflow run. */
      rerun_url: string;
      /** @description The URL to the previous attempted run of this workflow, if one exists. */
      previous_attempt_url?: OneOf<[string, null]>;
      /** @description The URL to the workflow. */
      workflow_url: string;
      head_commit: null | components["schemas"]["simple-commit"];
      repository: components["schemas"]["minimal-repository"];
      head_repository: components["schemas"]["minimal-repository"];
      head_repository_id?: number;
      /** @description The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow. */
      display_title: string;
    };
    /**
     * Workflow Run Usage
     * @description Workflow Run Usage
     */
    "workflow-run-usage": {
      billable: {
        UBUNTU?: {
          total_ms: number;
          jobs: number;
          job_runs?: {
            job_id: number;
            duration_ms: number;
          }[];
        };
        MACOS?: {
          total_ms: number;
          jobs: number;
          job_runs?: {
            job_id: number;
            duration_ms: number;
          }[];
        };
        WINDOWS?: {
          total_ms: number;
          jobs: number;
          job_runs?: {
            job_id: number;
            duration_ms: number;
          }[];
        };
      };
      run_duration_ms?: number;
    };
    /**
     * Workflow
     * @description A GitHub Actions workflow
     */
    workflow: {
      id: number;
      node_id: string;
      name: string;
      path: string;
      /** @enum {string} */
      state:
        | "active"
        | "deleted"
        | "disabled_fork"
        | "disabled_inactivity"
        | "disabled_manually";
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      url: string;
      html_url: string;
      badge_url: string;
      /** Format: date-time */
      deleted_at?: string;
    };
    /**
     * Workflow Usage
     * @description Workflow Usage
     */
    "workflow-usage": {
      billable: {
        UBUNTU?: {
          total_ms?: number;
        };
        MACOS?: {
          total_ms?: number;
        };
        WINDOWS?: {
          total_ms?: number;
        };
      };
    };
    /**
     * Autolink reference
     * @description An autolink reference.
     */
    autolink: {
      id: number;
      /** @description The prefix of a key that is linkified. */
      key_prefix: string;
      /** @description A template for the target URL that is generated if a key was found. */
      url_template: string;
    };
    /**
     * Protected Branch Required Status Check
     * @description Protected Branch Required Status Check
     */
    "protected-branch-required-status-check": {
      url?: string;
      enforcement_level?: string;
      contexts: string[];
      checks: {
        context: string;
        app_id: OneOf<[number, null]>;
      }[];
      contexts_url?: string;
      strict?: boolean;
    };
    /**
     * Protected Branch Admin Enforced
     * @description Protected Branch Admin Enforced
     */
    "protected-branch-admin-enforced": {
      /** Format: uri */
      url: string;
      enabled: boolean;
    };
    /**
     * Protected Branch Pull Request Review
     * @description Protected Branch Pull Request Review
     */
    "protected-branch-pull-request-review": {
      /** Format: uri */
      url?: string;
      dismissal_restrictions?: {
        /** @description The list of users with review dismissal access. */
        users?: components["schemas"]["simple-user"][];
        /** @description The list of teams with review dismissal access. */
        teams?: components["schemas"]["team"][];
        /** @description The list of apps with review dismissal access. */
        apps?: components["schemas"]["integration"][];
        url?: string;
        users_url?: string;
        teams_url?: string;
      };
      /** @description Allow specific users, teams, or apps to bypass pull request requirements. */
      bypass_pull_request_allowances?: {
        /** @description The list of users allowed to bypass pull request requirements. */
        users?: components["schemas"]["simple-user"][];
        /** @description The list of teams allowed to bypass pull request requirements. */
        teams?: components["schemas"]["team"][];
        /** @description The list of apps allowed to bypass pull request requirements. */
        apps?: components["schemas"]["integration"][];
      };
      dismiss_stale_reviews: boolean;
      require_code_owner_reviews: boolean;
      required_approving_review_count?: number;
    };
    /**
     * Branch Restriction Policy
     * @description Branch Restriction Policy
     */
    "branch-restriction-policy": {
      /** Format: uri */
      url: string;
      /** Format: uri */
      users_url: string;
      /** Format: uri */
      teams_url: string;
      /** Format: uri */
      apps_url: string;
      users: {
        login?: string;
        id?: number;
        node_id?: string;
        avatar_url?: string;
        gravatar_id?: string;
        url?: string;
        html_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        starred_url?: string;
        subscriptions_url?: string;
        organizations_url?: string;
        repos_url?: string;
        events_url?: string;
        received_events_url?: string;
        type?: string;
        site_admin?: boolean;
      }[];
      teams: {
        id?: number;
        node_id?: string;
        url?: string;
        html_url?: string;
        name?: string;
        slug?: string;
        description?: OneOf<[string, null]>;
        privacy?: string;
        permission?: string;
        members_url?: string;
        repositories_url?: string;
        parent?: OneOf<[string, null]>;
      }[];
      apps: {
        id?: number;
        slug?: string;
        node_id?: string;
        owner?: {
          login?: string;
          id?: number;
          node_id?: string;
          url?: string;
          repos_url?: string;
          events_url?: string;
          hooks_url?: string;
          issues_url?: string;
          members_url?: string;
          public_members_url?: string;
          avatar_url?: string;
          description?: string;
          gravatar_id?: string;
          html_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          starred_url?: string;
          subscriptions_url?: string;
          organizations_url?: string;
          received_events_url?: string;
          type?: string;
          site_admin?: boolean;
        };
        name?: string;
        description?: string;
        external_url?: string;
        html_url?: string;
        created_at?: string;
        updated_at?: string;
        permissions?: {
          metadata?: string;
          contents?: string;
          issues?: string;
          single_file?: string;
        };
        events?: string[];
      }[];
    };
    /**
     * Branch Protection
     * @description Branch Protection
     */
    "branch-protection": {
      url?: string;
      enabled?: boolean;
      required_status_checks?: components["schemas"]["protected-branch-required-status-check"];
      enforce_admins?: components["schemas"]["protected-branch-admin-enforced"];
      required_pull_request_reviews?: components["schemas"]["protected-branch-pull-request-review"];
      restrictions?: components["schemas"]["branch-restriction-policy"];
      required_linear_history?: {
        enabled?: boolean;
      };
      allow_force_pushes?: {
        enabled?: boolean;
      };
      allow_deletions?: {
        enabled?: boolean;
      };
      block_creations?: {
        enabled?: boolean;
      };
      required_conversation_resolution?: {
        enabled?: boolean;
      };
      name?: string;
      protection_url?: string;
      required_signatures?: {
        /** Format: uri */
        url: string;
        enabled: boolean;
      };
    };
    /**
     * Short Branch
     * @description Short Branch
     */
    "short-branch": {
      name: string;
      commit: {
        sha: string;
        /** Format: uri */
        url: string;
      };
      protected: boolean;
      protection?: components["schemas"]["branch-protection"];
      /** Format: uri */
      protection_url?: string;
    };
    /**
     * Git User
     * @description Metaproperties for Git author/committer information.
     */
    "git-user": {
      name?: string;
      email?: string;
      date?: string;
    };
    /** Verification */
    verification: {
      verified: boolean;
      reason: string;
      payload: OneOf<[string, null]>;
      signature: OneOf<[string, null]>;
    };
    /**
     * Diff Entry
     * @description Diff Entry
     */
    "diff-entry": {
      sha: string;
      filename: string;
      /** @enum {string} */
      status:
        | "added"
        | "removed"
        | "modified"
        | "renamed"
        | "copied"
        | "changed"
        | "unchanged";
      additions: number;
      deletions: number;
      changes: number;
      /** Format: uri */
      blob_url: string;
      /** Format: uri */
      raw_url: string;
      /** Format: uri */
      contents_url: string;
      patch?: string;
      previous_filename?: string;
    };
    /**
     * Commit
     * @description Commit
     */
    commit: {
      /** Format: uri */
      url: string;
      sha: string;
      node_id: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      comments_url: string;
      commit: {
        /** Format: uri */
        url: string;
        author: null | components["schemas"]["git-user"];
        committer: null | components["schemas"]["git-user"];
        message: string;
        comment_count: number;
        tree: {
          sha: string;
          /** Format: uri */
          url: string;
        };
        verification?: components["schemas"]["verification"];
      };
      author: null | components["schemas"]["simple-user"];
      committer: null | components["schemas"]["simple-user"];
      parents: {
        sha: string;
        /** Format: uri */
        url: string;
        /** Format: uri */
        html_url?: string;
      }[];
      stats?: {
        additions?: number;
        deletions?: number;
        total?: number;
      };
      files?: components["schemas"]["diff-entry"][];
    };
    /**
     * Branch With Protection
     * @description Branch With Protection
     */
    "branch-with-protection": {
      name: string;
      commit: components["schemas"]["commit"];
      _links: {
        html: string;
        /** Format: uri */
        self: string;
      };
      protected: boolean;
      protection: components["schemas"]["branch-protection"];
      /** Format: uri */
      protection_url: string;
      pattern?: string;
      required_approving_review_count?: number;
    };
    /**
     * Status Check Policy
     * @description Status Check Policy
     */
    "status-check-policy": {
      /** Format: uri */
      url: string;
      strict: boolean;
      contexts: string[];
      checks: {
        context: string;
        app_id: OneOf<[number, null]>;
      }[];
      /** Format: uri */
      contexts_url: string;
    };
    /**
     * Protected Branch
     * @description Branch protections protect branches
     */
    "protected-branch": {
      /** Format: uri */
      url: string;
      required_status_checks?: components["schemas"]["status-check-policy"];
      required_pull_request_reviews?: {
        /** Format: uri */
        url: string;
        dismiss_stale_reviews?: boolean;
        require_code_owner_reviews?: boolean;
        required_approving_review_count?: number;
        dismissal_restrictions?: {
          /** Format: uri */
          url: string;
          /** Format: uri */
          users_url: string;
          /** Format: uri */
          teams_url: string;
          users: components["schemas"]["simple-user"][];
          teams: components["schemas"]["team"][];
          apps?: components["schemas"]["integration"][];
        };
        bypass_pull_request_allowances?: {
          users: components["schemas"]["simple-user"][];
          teams: components["schemas"]["team"][];
          apps?: components["schemas"]["integration"][];
        };
      };
      required_signatures?: {
        /** Format: uri */
        url: string;
        enabled: boolean;
      };
      enforce_admins?: {
        /** Format: uri */
        url: string;
        enabled: boolean;
      };
      required_linear_history?: {
        enabled: boolean;
      };
      allow_force_pushes?: {
        enabled: boolean;
      };
      allow_deletions?: {
        enabled: boolean;
      };
      restrictions?: components["schemas"]["branch-restriction-policy"];
      required_conversation_resolution?: {
        enabled?: boolean;
      };
      block_creations?: {
        enabled: boolean;
      };
    };
    /**
     * Deployment
     * @description A deployment created as the result of an Actions check run from a workflow that references an environment
     */
    "deployment-simple": {
      /** Format: uri */
      url: string;
      /** @description Unique identifier of the deployment */
      id: number;
      node_id: string;
      /** @description Parameter to specify a task to execute */
      task: string;
      original_environment?: string;
      /** @description Name for the target deployment environment. */
      environment: string;
      description: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      statuses_url: string;
      /** Format: uri */
      repository_url: string;
      /** @description Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
      transient_environment?: boolean;
      /** @description Specifies if the given environment is one that end-users directly interact with. Default: false. */
      production_environment?: boolean;
      performed_via_github_app?: null | components["schemas"]["integration"];
    };
    /**
     * CheckRun
     * @description A check performed on the code of a given code change
     */
    "check-run": {
      /** @description The id of the check. */
      id: number;
      /** @description The SHA of the commit that is being checked. */
      head_sha: string;
      node_id: string;
      external_id: OneOf<[string, null]>;
      url: string;
      html_url: OneOf<[string, null]>;
      details_url: OneOf<[string, null]>;
      /**
       * @description The phase of the lifecycle that the check is currently in.
       * @enum {string}
       */
      status: "queued" | "in_progress" | "completed";
      /** @enum {string|null} */
      conclusion:
        | "success"
        | "failure"
        | "neutral"
        | "cancelled"
        | "skipped"
        | "timed_out"
        | "action_required"
        | ""
        | null;
      /** Format: date-time */
      started_at: OneOf<[string, null]>;
      /** Format: date-time */
      completed_at: OneOf<[string, null]>;
      output: {
        title: OneOf<[string, null]>;
        summary: OneOf<[string, null]>;
        text: OneOf<[string, null]>;
        annotations_count: number;
        /** Format: uri */
        annotations_url: string;
      };
      /** @description The name of the check. */
      name: string;
      check_suite: OneOf<
        [
          {
            id: number;
          },
          null
        ]
      >;
      app: null | components["schemas"]["integration"];
      pull_requests: components["schemas"]["pull-request-minimal"][];
      deployment?: components["schemas"]["deployment-simple"];
    };
    /**
     * Check Annotation
     * @description Check Annotation
     */
    "check-annotation": {
      path: string;
      start_line: number;
      end_line: number;
      start_column: OneOf<[number, null]>;
      end_column: OneOf<[number, null]>;
      annotation_level: OneOf<[string, null]>;
      title: OneOf<[string, null]>;
      message: OneOf<[string, null]>;
      raw_details: OneOf<[string, null]>;
      blob_href: string;
    };
    /**
     * CheckSuite
     * @description A suite of checks performed on the code of a given code change
     */
    "check-suite": {
      id: number;
      node_id: string;
      head_branch: OneOf<[string, null]>;
      /** @description The SHA of the head commit that is being checked. */
      head_sha: string;
      /** @enum {string|null} */
      status: "queued" | "in_progress" | "completed" | "" | null;
      /** @enum {string|null} */
      conclusion:
        | "success"
        | "failure"
        | "neutral"
        | "cancelled"
        | "skipped"
        | "timed_out"
        | "action_required"
        | "startup_failure"
        | "stale"
        | ""
        | null;
      url: OneOf<[string, null]>;
      before: OneOf<[string, null]>;
      after: OneOf<[string, null]>;
      pull_requests: OneOf<
        [components["schemas"]["pull-request-minimal"][], null]
      >;
      app: null | components["schemas"]["integration"];
      repository: components["schemas"]["minimal-repository"];
      /** Format: date-time */
      created_at: OneOf<[string, null]>;
      /** Format: date-time */
      updated_at: OneOf<[string, null]>;
      head_commit: components["schemas"]["simple-commit"];
      latest_check_runs_count: number;
      check_runs_url: string;
      rerequestable?: boolean;
      runs_rerequestable?: boolean;
    };
    /**
     * Check Suite Preference
     * @description Check suite configuration preferences for a repository.
     */
    "check-suite-preference": {
      preferences: {
        auto_trigger_checks?: {
          app_id: number;
          setting: boolean;
        }[];
      };
      repository: components["schemas"]["minimal-repository"];
    };
    "code-scanning-alert-rule-summary": {
      /** @description A unique identifier for the rule used to detect the alert. */
      id?: OneOf<[string, null]>;
      /** @description The name of the rule used to detect the alert. */
      name?: string;
      /**
       * @description The severity of the alert.
       * @enum {string|null}
       */
      severity?: "none" | "note" | "warning" | "error" | "" | null;
      /** @description A short description of the rule used to detect the alert. */
      description?: string;
    };
    "code-scanning-alert-items": {
      number: components["schemas"]["alert-number"];
      created_at: components["schemas"]["alert-created-at"];
      url: components["schemas"]["alert-url"];
      html_url: components["schemas"]["alert-html-url"];
      instances_url: components["schemas"]["alert-instances-url"];
      state: components["schemas"]["code-scanning-alert-state"];
      dismissed_by: null | components["schemas"]["simple-user"];
      dismissed_at: components["schemas"]["alert-dismissed-at"];
      dismissed_reason: components["schemas"]["code-scanning-alert-dismissed-reason"];
      rule: components["schemas"]["code-scanning-alert-rule-summary"];
      tool: components["schemas"]["code-scanning-analysis-tool"];
      most_recent_instance: components["schemas"]["code-scanning-alert-instance"];
    };
    "code-scanning-alert": {
      number: components["schemas"]["alert-number"];
      created_at: components["schemas"]["alert-created-at"];
      url: components["schemas"]["alert-url"];
      html_url: components["schemas"]["alert-html-url"];
      instances_url: components["schemas"]["alert-instances-url"];
      state: components["schemas"]["code-scanning-alert-state"];
      dismissed_by: null | components["schemas"]["simple-user"];
      dismissed_at: components["schemas"]["alert-dismissed-at"];
      dismissed_reason: components["schemas"]["code-scanning-alert-dismissed-reason"];
      rule: components["schemas"]["code-scanning-alert-rule"];
      tool: components["schemas"]["code-scanning-analysis-tool"];
      most_recent_instance: components["schemas"]["code-scanning-alert-instance"];
    };
    /**
     * @description Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
     * @enum {string}
     */
    "code-scanning-alert-set-state": "open" | "dismissed";
    /** @description An identifier for the upload. */
    "code-scanning-analysis-sarif-id": string;
    /** @description The SHA of the commit to which the analysis you are uploading relates. */
    "code-scanning-analysis-commit-sha": string;
    /** @description Identifies the variable values associated with the environment in which this analysis was performed. */
    "code-scanning-analysis-environment": string;
    /**
     * Format: date-time
     * @description The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly "code-scanning-analysis-created-at": string;
    /**
     * Format: uri
     * @description The REST API URL of the analysis resource.
     */
    readonly "code-scanning-analysis-url": string;
    "code-scanning-analysis": {
      ref: components["schemas"]["code-scanning-ref"];
      commit_sha: components["schemas"]["code-scanning-analysis-commit-sha"];
      analysis_key: components["schemas"]["code-scanning-analysis-analysis-key"];
      environment: components["schemas"]["code-scanning-analysis-environment"];
      category?: components["schemas"]["code-scanning-analysis-category"];
      error: string;
      created_at: components["schemas"]["code-scanning-analysis-created-at"];
      /** @description The total number of results in the analysis. */
      results_count: number;
      /** @description The total number of rules used in the analysis. */
      rules_count: number;
      /** @description Unique identifier for this analysis. */
      id: number;
      url: components["schemas"]["code-scanning-analysis-url"];
      sarif_id: components["schemas"]["code-scanning-analysis-sarif-id"];
      tool: components["schemas"]["code-scanning-analysis-tool"];
      deletable: boolean;
      /** @description Warning generated when processing the analysis */
      warning: string;
    };
    /**
     * Analysis deletion
     * @description Successful deletion of a code scanning analysis
     */
    "code-scanning-analysis-deletion": {
      /**
       * Format: uri
       * @description Next deletable analysis in chain, without last analysis deletion confirmation
       */
      next_analysis_url: OneOf<[string, null]>;
      /**
       * Format: uri
       * @description Next deletable analysis in chain, with last analysis deletion confirmation
       */
      confirm_delete_url: OneOf<[string, null]>;
    };
    /** @description A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/github-ae@latest/code-security/secure-coding/sarif-support-for-code-scanning)." */
    "code-scanning-analysis-sarif-file": string;
    "code-scanning-sarifs-receipt": {
      id?: components["schemas"]["code-scanning-analysis-sarif-id"];
      /**
       * Format: uri
       * @description The REST API URL for checking the status of the upload.
       */
      url?: string;
    };
    "code-scanning-sarifs-status": {
      /**
       * @description `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
       * @enum {string}
       */
      processing_status?: "pending" | "complete" | "failed";
      /**
       * Format: uri
       * @description The REST API URL for getting the analyses associated with the upload.
       */
      analyses_url?: OneOf<[string, null]>;
      /** @description Any errors that ocurred during processing of the delivery. */
      errors?: OneOf<[readonly string[], null]>;
    };
    /**
     * CODEOWNERS errors
     * @description A list of errors found in a repo's CODEOWNERS file
     */
    "codeowners-errors": {
      errors: {
        /** @description The line number where this errors occurs. */
        line: number;
        /** @description The column number where this errors occurs. */
        column: number;
        /** @description The contents of the line where the error occurs. */
        source?: string;
        /** @description The type of error. */
        kind: string;
        /** @description Suggested action to fix the error. This will usually be `null`, but is provided for some common errors. */
        suggestion?: OneOf<[string, null]>;
        /** @description A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting). */
        message: string;
        /** @description The path of the file where the error occured. */
        path: string;
      }[];
    };
    /**
     * Collaborator
     * @description Collaborator
     */
    collaborator: {
      login: string;
      id: number;
      email?: OneOf<[string, null]>;
      name?: OneOf<[string, null]>;
      node_id: string;
      /** Format: uri */
      avatar_url: string;
      gravatar_id: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      /** Format: uri */
      subscriptions_url: string;
      /** Format: uri */
      organizations_url: string;
      /** Format: uri */
      repos_url: string;
      events_url: string;
      /** Format: uri */
      received_events_url: string;
      type: string;
      site_admin: boolean;
      permissions?: {
        pull: boolean;
        triage?: boolean;
        push: boolean;
        maintain?: boolean;
        admin: boolean;
      };
      role_name?: string;
    };
    /**
     * Repository Invitation
     * @description Repository invitations let you manage who you collaborate with.
     */
    "repository-invitation": {
      /** @description Unique identifier of the repository invitation. */
      id: number;
      repository: components["schemas"]["minimal-repository"];
      invitee: null | components["schemas"]["simple-user"];
      inviter: null | components["schemas"]["simple-user"];
      /**
       * @description The permission associated with the invitation.
       * @enum {string}
       */
      permissions: "read" | "write" | "admin" | "triage" | "maintain";
      /** Format: date-time */
      created_at: string;
      /** @description Whether or not the invitation has expired */
      expired?: boolean;
      /** @description URL for the repository invitation */
      url: string;
      html_url: string;
      node_id: string;
    };
    /**
     * Repository Collaborator Permission
     * @description Repository Collaborator Permission
     */
    "repository-collaborator-permission": {
      permission: string;
      role_name: string;
      user: null | components["schemas"]["collaborator"];
    };
    /**
     * Commit Comment
     * @description Commit Comment
     */
    "commit-comment": {
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      url: string;
      id: number;
      node_id: string;
      body: string;
      path: OneOf<[string, null]>;
      position: OneOf<[number, null]>;
      line: OneOf<[number, null]>;
      commit_id: string;
      user: null | components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      author_association: components["schemas"]["author-association"];
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Branch Short
     * @description Branch Short
     */
    "branch-short": {
      name: string;
      commit: {
        sha: string;
        url: string;
      };
      protected: boolean;
    };
    /**
     * Link
     * @description Hypermedia Link
     */
    link: {
      href: string;
    };
    /**
     * Auto merge
     * @description The status of auto merging a pull request.
     */
    "auto-merge": OneOf<
      [
        {
          enabled_by: components["schemas"]["simple-user"];
          /**
           * @description The merge method to use.
           * @enum {string}
           */
          merge_method: "merge" | "squash" | "rebase";
          /** @description Title for the merge commit message. */
          commit_title: string;
          /** @description Commit message for the merge commit. */
          commit_message: string;
        },
        null
      ]
    >;
    /**
     * Pull Request Simple
     * @description Pull Request Simple
     */
    "pull-request-simple": {
      /** Format: uri */
      url: string;
      id: number;
      node_id: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      diff_url: string;
      /** Format: uri */
      patch_url: string;
      /** Format: uri */
      issue_url: string;
      /** Format: uri */
      commits_url: string;
      /** Format: uri */
      review_comments_url: string;
      review_comment_url: string;
      /** Format: uri */
      comments_url: string;
      /** Format: uri */
      statuses_url: string;
      number: number;
      state: string;
      locked: boolean;
      title: string;
      user: null | components["schemas"]["simple-user"];
      body: OneOf<[string, null]>;
      labels: {
        /** Format: int64 */
        id: number;
        node_id: string;
        url: string;
        name: string;
        description: string;
        color: string;
        default: boolean;
      }[];
      milestone: null | components["schemas"]["milestone"];
      active_lock_reason?: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      closed_at: OneOf<[string, null]>;
      /** Format: date-time */
      merged_at: OneOf<[string, null]>;
      merge_commit_sha: OneOf<[string, null]>;
      assignee: null | components["schemas"]["simple-user"];
      assignees?: OneOf<[components["schemas"]["simple-user"][], null]>;
      requested_reviewers?: OneOf<
        [components["schemas"]["simple-user"][], null]
      >;
      requested_teams?: OneOf<[components["schemas"]["team"][], null]>;
      head: {
        label: string;
        ref: string;
        repo: components["schemas"]["repository"];
        sha: string;
        user: null | components["schemas"]["simple-user"];
      };
      base: {
        label: string;
        ref: string;
        repo: components["schemas"]["repository"];
        sha: string;
        user: null | components["schemas"]["simple-user"];
      };
      _links: {
        comments: components["schemas"]["link"];
        commits: components["schemas"]["link"];
        statuses: components["schemas"]["link"];
        html: components["schemas"]["link"];
        issue: components["schemas"]["link"];
        review_comments: components["schemas"]["link"];
        review_comment: components["schemas"]["link"];
        self: components["schemas"]["link"];
      };
      author_association: components["schemas"]["author-association"];
      auto_merge: components["schemas"]["auto-merge"];
      /** @description Indicates whether or not the pull request is a draft. */
      draft?: boolean;
    };
    /** Simple Commit Status */
    "simple-commit-status": {
      description: OneOf<[string, null]>;
      id: number;
      node_id: string;
      state: string;
      context: string;
      /** Format: uri */
      target_url: OneOf<[string, null]>;
      required?: OneOf<[boolean, null]>;
      /** Format: uri */
      avatar_url: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    /**
     * Combined Commit Status
     * @description Combined Commit Status
     */
    "combined-commit-status": {
      state: string;
      statuses: components["schemas"]["simple-commit-status"][];
      sha: string;
      total_count: number;
      repository: components["schemas"]["minimal-repository"];
      /** Format: uri */
      commit_url: string;
      /** Format: uri */
      url: string;
    };
    /**
     * Status
     * @description The status of a commit.
     */
    status: {
      url: string;
      avatar_url: OneOf<[string, null]>;
      id: number;
      node_id: string;
      state: string;
      description: OneOf<[string, null]>;
      target_url: OneOf<[string, null]>;
      context: string;
      created_at: string;
      updated_at: string;
      creator: null | components["schemas"]["simple-user"];
    };
    /**
     * Commit Comparison
     * @description Commit Comparison
     */
    "commit-comparison": {
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      permalink_url: string;
      /** Format: uri */
      diff_url: string;
      /** Format: uri */
      patch_url: string;
      base_commit: components["schemas"]["commit"];
      merge_base_commit: components["schemas"]["commit"];
      /** @enum {string} */
      status: "diverged" | "ahead" | "behind" | "identical";
      ahead_by: number;
      behind_by: number;
      total_commits: number;
      commits: components["schemas"]["commit"][];
      files?: components["schemas"]["diff-entry"][];
    };
    /**
     * Content Tree
     * @description Content Tree
     */
    "content-tree": {
      type: string;
      size: number;
      name: string;
      path: string;
      sha: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      git_url: OneOf<[string, null]>;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
      /** Format: uri */
      download_url: OneOf<[string, null]>;
      entries?: {
        type: string;
        size: number;
        name: string;
        path: string;
        content?: string;
        sha: string;
        /** Format: uri */
        url: string;
        /** Format: uri */
        git_url: OneOf<[string, null]>;
        /** Format: uri */
        html_url: OneOf<[string, null]>;
        /** Format: uri */
        download_url: OneOf<[string, null]>;
        _links: {
          /** Format: uri */
          git: OneOf<[string, null]>;
          /** Format: uri */
          html: OneOf<[string, null]>;
          /** Format: uri */
          self: string;
        };
      }[];
      _links: {
        /** Format: uri */
        git: OneOf<[string, null]>;
        /** Format: uri */
        html: OneOf<[string, null]>;
        /** Format: uri */
        self: string;
      };
    };
    /**
     * Content Directory
     * @description A list of directory items
     */
    "content-directory": {
      /** @enum {string} */
      type: "dir" | "file" | "submodule" | "symlink";
      size: number;
      name: string;
      path: string;
      content?: string;
      sha: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      git_url: OneOf<[string, null]>;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
      /** Format: uri */
      download_url: OneOf<[string, null]>;
      _links: {
        /** Format: uri */
        git: OneOf<[string, null]>;
        /** Format: uri */
        html: OneOf<[string, null]>;
        /** Format: uri */
        self: string;
      };
    }[];
    /**
     * Content File
     * @description Content File
     */
    "content-file": {
      /** @enum {string} */
      type: "file";
      encoding: string;
      size: number;
      name: string;
      path: string;
      content: string;
      sha: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      git_url: OneOf<[string, null]>;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
      /** Format: uri */
      download_url: OneOf<[string, null]>;
      _links: {
        /** Format: uri */
        git: OneOf<[string, null]>;
        /** Format: uri */
        html: OneOf<[string, null]>;
        /** Format: uri */
        self: string;
      };
      target?: string;
      submodule_git_url?: string;
    };
    /**
     * Symlink Content
     * @description An object describing a symlink
     */
    "content-symlink": {
      /** @enum {string} */
      type: "symlink";
      target: string;
      size: number;
      name: string;
      path: string;
      sha: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      git_url: OneOf<[string, null]>;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
      /** Format: uri */
      download_url: OneOf<[string, null]>;
      _links: {
        /** Format: uri */
        git: OneOf<[string, null]>;
        /** Format: uri */
        html: OneOf<[string, null]>;
        /** Format: uri */
        self: string;
      };
    };
    /**
     * Submodule Content
     * @description An object describing a submodule
     */
    "content-submodule": {
      /** @enum {string} */
      type: "submodule";
      /** Format: uri */
      submodule_git_url: string;
      size: number;
      name: string;
      path: string;
      sha: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      git_url: OneOf<[string, null]>;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
      /** Format: uri */
      download_url: OneOf<[string, null]>;
      _links: {
        /** Format: uri */
        git: OneOf<[string, null]>;
        /** Format: uri */
        html: OneOf<[string, null]>;
        /** Format: uri */
        self: string;
      };
    };
    /**
     * File Commit
     * @description File Commit
     */
    "file-commit": {
      content: OneOf<
        [
          {
            name?: string;
            path?: string;
            sha?: string;
            size?: number;
            url?: string;
            html_url?: string;
            git_url?: string;
            download_url?: string;
            type?: string;
            _links?: {
              self?: string;
              git?: string;
              html?: string;
            };
          },
          null
        ]
      >;
      commit: {
        sha?: string;
        node_id?: string;
        url?: string;
        html_url?: string;
        author?: {
          date?: string;
          name?: string;
          email?: string;
        };
        committer?: {
          date?: string;
          name?: string;
          email?: string;
        };
        message?: string;
        tree?: {
          url?: string;
          sha?: string;
        };
        parents?: {
          url?: string;
          html_url?: string;
          sha?: string;
        }[];
        verification?: {
          verified?: boolean;
          reason?: string;
          signature?: OneOf<[string, null]>;
          payload?: OneOf<[string, null]>;
        };
      };
    };
    /**
     * Contributor
     * @description Contributor
     */
    contributor: {
      login?: string;
      id?: number;
      node_id?: string;
      /** Format: uri */
      avatar_url?: string;
      gravatar_id?: OneOf<[string, null]>;
      /** Format: uri */
      url?: string;
      /** Format: uri */
      html_url?: string;
      /** Format: uri */
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      /** Format: uri */
      subscriptions_url?: string;
      /** Format: uri */
      organizations_url?: string;
      /** Format: uri */
      repos_url?: string;
      events_url?: string;
      /** Format: uri */
      received_events_url?: string;
      type: string;
      site_admin?: boolean;
      contributions: number;
      email?: string;
      name?: string;
    };
    /**
     * Deployment
     * @description A request for a specific ref(branch,sha,tag) to be deployed
     */
    deployment: {
      /** Format: uri */
      url: string;
      /** @description Unique identifier of the deployment */
      id: number;
      node_id: string;
      sha: string;
      /** @description The ref to deploy. This can be a branch, tag, or sha. */
      ref: string;
      /** @description Parameter to specify a task to execute */
      task: string;
      payload: OneOf<
        [
          {
            [key: string]: unknown | undefined;
          },
          string
        ]
      >;
      original_environment?: string;
      /** @description Name for the target deployment environment. */
      environment: string;
      description: OneOf<[string, null]>;
      creator: null | components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      statuses_url: string;
      /** Format: uri */
      repository_url: string;
      /** @description Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
      transient_environment?: boolean;
      /** @description Specifies if the given environment is one that end-users directly interact with. Default: false. */
      production_environment?: boolean;
      performed_via_github_app?: null | components["schemas"]["integration"];
    };
    /**
     * Deployment Status
     * @description The status of a deployment.
     */
    "deployment-status": {
      /** Format: uri */
      url: string;
      id: number;
      node_id: string;
      /**
       * @description The state of the status.
       * @enum {string}
       */
      state:
        | "error"
        | "failure"
        | "inactive"
        | "pending"
        | "success"
        | "queued"
        | "in_progress";
      creator: null | components["schemas"]["simple-user"];
      /**
       * @description A short description of the status.
       * @default
       */
      description: string;
      /**
       * @description The environment of the deployment that the status is for.
       * @default
       */
      environment?: string;
      /**
       * Format: uri
       * @description Deprecated: the URL to associate with this status.
       * @default
       */
      target_url: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      deployment_url: string;
      /** Format: uri */
      repository_url: string;
      /**
       * Format: uri
       * @description The URL for accessing your environment.
       * @default
       */
      environment_url?: string;
      /**
       * Format: uri
       * @description The URL to associate with this status.
       * @default
       */
      log_url?: string;
      performed_via_github_app?: null | components["schemas"]["integration"];
    };
    /** @description The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days). */
    "wait-timer": number;
    /**
     * @description The type of reviewer.
     * @enum {string}
     */
    "deployment-reviewer-type": "User" | "Team";
    /** @description The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
    "deployment-branch-policy-settings": OneOf<
      [
        {
          /** @description Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`. */
          protected_branches: boolean;
          /** @description Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`. */
          custom_branch_policies: boolean;
        },
        null
      ]
    >;
    /**
     * Environment
     * @description Details of a deployment environment
     */
    environment: {
      /** @description The id of the environment. */
      id: number;
      node_id: string;
      /** @description The name of the environment. */
      name: string;
      url: string;
      html_url: string;
      /**
       * Format: date-time
       * @description The time that the environment was created, in ISO 8601 format.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description The time that the environment was last updated, in ISO 8601 format.
       */
      updated_at: string;
      /** @description Built-in deployment protection rules for the environment. */
      protection_rules?: (
        | {
            id: number;
            node_id: string;
            type: string;
            wait_timer?: components["schemas"]["wait-timer"];
          }
        | {
            id: number;
            node_id: string;
            type: string;
            /** @description The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
            reviewers?: {
              type?: components["schemas"]["deployment-reviewer-type"];
              reviewer?:
                | components["schemas"]["simple-user"]
                | components["schemas"]["team"];
            }[];
          }
        | {
            id: number;
            node_id: string;
            type: string;
          }
      )[];
      deployment_branch_policy?: components["schemas"]["deployment-branch-policy-settings"];
    };
    /**
     * Deployment branch policy
     * @description Details of a deployment branch policy.
     */
    "deployment-branch-policy": {
      /** @description The unique identifier of the branch policy. */
      id?: number;
      node_id?: string;
      /** @description The name pattern that branches must match in order to deploy to the environment. */
      name?: string;
    };
    /** Deployment branch policy name pattern */
    "deployment-branch-policy-name-pattern": {
      /**
       * @description The name pattern that branches must match in order to deploy to the environment.
       *
       * Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*\/*`.
       * For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
       */
      name: string;
    };
    /**
     * Actor
     * @description Actor
     */
    actor: {
      id: number;
      login: string;
      display_login?: string;
      gravatar_id: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: uri */
      avatar_url: string;
    };
    /**
     * Issue Comment
     * @description Comments provide a way for people to collaborate on an issue.
     */
    "issue-comment": {
      /**
       * Format: int64
       * @description Unique identifier of the issue comment
       */
      id: number;
      node_id: string;
      /**
       * Format: uri
       * @description URL for the issue comment
       */
      url: string;
      /** @description Contents of the issue comment */
      body?: string;
      body_text?: string;
      body_html?: string;
      /** Format: uri */
      html_url: string;
      user: null | components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      issue_url: string;
      author_association: components["schemas"]["author-association"];
      performed_via_github_app?: null | components["schemas"]["integration"];
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Event
     * @description Event
     */
    event: {
      id: string;
      type: OneOf<[string, null]>;
      actor: components["schemas"]["actor"];
      repo: {
        id: number;
        name: string;
        /** Format: uri */
        url: string;
      };
      org?: components["schemas"]["actor"];
      payload: {
        action?: string;
        issue?: components["schemas"]["issue"];
        comment?: components["schemas"]["issue-comment"];
        pages?: {
          page_name?: string;
          title?: string;
          summary?: OneOf<[string, null]>;
          action?: string;
          sha?: string;
          html_url?: string;
        }[];
      };
      public: boolean;
      /** Format: date-time */
      created_at: OneOf<[string, null]>;
    };
    /**
     * Short Blob
     * @description Short Blob
     */
    "short-blob": {
      url: string;
      sha: string;
    };
    /**
     * Blob
     * @description Blob
     */
    blob: {
      content: string;
      encoding: string;
      /** Format: uri */
      url: string;
      sha: string;
      size: OneOf<[number, null]>;
      node_id: string;
      highlighted_content?: string;
    };
    /**
     * Git Commit
     * @description Low-level Git commit operations within a repository
     */
    "git-commit": {
      /** @description SHA for the commit */
      sha: string;
      node_id: string;
      /** Format: uri */
      url: string;
      /** @description Identifying information for the git-user */
      author: {
        /**
         * Format: date-time
         * @description Timestamp of the commit
         */
        date: string;
        /** @description Git email address of the user */
        email: string;
        /** @description Name of the git user */
        name: string;
      };
      /** @description Identifying information for the git-user */
      committer: {
        /**
         * Format: date-time
         * @description Timestamp of the commit
         */
        date: string;
        /** @description Git email address of the user */
        email: string;
        /** @description Name of the git user */
        name: string;
      };
      /** @description Message describing the purpose of the commit */
      message: string;
      tree: {
        /** @description SHA for the commit */
        sha: string;
        /** Format: uri */
        url: string;
      };
      parents: {
        /** @description SHA for the commit */
        sha: string;
        /** Format: uri */
        url: string;
        /** Format: uri */
        html_url: string;
      }[];
      verification: {
        verified: boolean;
        reason: string;
        signature: OneOf<[string, null]>;
        payload: OneOf<[string, null]>;
      };
      /** Format: uri */
      html_url: string;
    };
    /**
     * Git Reference
     * @description Git references within a repository
     */
    "git-ref": {
      ref: string;
      node_id: string;
      /** Format: uri */
      url: string;
      object: {
        type: string;
        /** @description SHA for the reference */
        sha: string;
        /** Format: uri */
        url: string;
      };
    };
    /**
     * Git Tag
     * @description Metadata for a Git tag
     */
    "git-tag": {
      node_id: string;
      /** @description Name of the tag */
      tag: string;
      sha: string;
      /**
       * Format: uri
       * @description URL for the tag
       */
      url: string;
      /** @description Message describing the purpose of the tag */
      message: string;
      tagger: {
        date: string;
        email: string;
        name: string;
      };
      object: {
        sha: string;
        type: string;
        /** Format: uri */
        url: string;
      };
      verification?: components["schemas"]["verification"];
    };
    /**
     * Git Tree
     * @description The hierarchy between files in a Git repository.
     */
    "git-tree": {
      sha: string;
      /** Format: uri */
      url: string;
      truncated: boolean;
      /** @description Objects specifying a tree structure */
      tree: {
        path?: string;
        mode?: string;
        type?: string;
        sha?: string;
        size?: number;
        url?: string;
      }[];
    };
    /** Hook Response */
    "hook-response": {
      code: OneOf<[number, null]>;
      status: OneOf<[string, null]>;
      message: OneOf<[string, null]>;
    };
    /**
     * Webhook
     * @description Webhooks for repositories.
     */
    hook: {
      type: string;
      /** @description Unique identifier of the webhook. */
      id: number;
      /** @description The name of a valid service, use 'web' for a webhook. */
      name: string;
      /** @description Determines whether the hook is actually triggered on pushes. */
      active: boolean;
      /** @description Determines what events the hook is triggered for. Default: ['push']. */
      events: string[];
      config: {
        email?: string;
        password?: string;
        room?: string;
        subdomain?: string;
        url?: components["schemas"]["webhook-config-url"];
        insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
        content_type?: components["schemas"]["webhook-config-content-type"];
        digest?: string;
        secret?: components["schemas"]["webhook-config-secret"];
        token?: string;
      };
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      created_at: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      test_url: string;
      /** Format: uri */
      ping_url: string;
      /** Format: uri */
      deliveries_url?: string;
      last_response: components["schemas"]["hook-response"];
    };
    /**
     * Issue Event Label
     * @description Issue Event Label
     */
    "issue-event-label": {
      name: OneOf<[string, null]>;
      color: OneOf<[string, null]>;
    };
    /** Issue Event Dismissed Review */
    "issue-event-dismissed-review": {
      state: string;
      review_id: number;
      dismissal_message: OneOf<[string, null]>;
      dismissal_commit_id?: OneOf<[string, null]>;
    };
    /**
     * Issue Event Milestone
     * @description Issue Event Milestone
     */
    "issue-event-milestone": {
      title: string;
    };
    /**
     * Issue Event Project Card
     * @description Issue Event Project Card
     */
    "issue-event-project-card": {
      /** Format: uri */
      url: string;
      id: number;
      /** Format: uri */
      project_url: string;
      project_id: number;
      column_name: string;
      previous_column_name?: string;
    };
    /**
     * Issue Event Rename
     * @description Issue Event Rename
     */
    "issue-event-rename": {
      from: string;
      to: string;
    };
    /**
     * Issue Event
     * @description Issue Event
     */
    "issue-event": {
      /** Format: int64 */
      id: number;
      node_id: string;
      /** Format: uri */
      url: string;
      actor: null | components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: string;
      issue?: null | components["schemas"]["issue"];
      label?: components["schemas"]["issue-event-label"];
      assignee?: null | components["schemas"]["simple-user"];
      assigner?: null | components["schemas"]["simple-user"];
      review_requester?: null | components["schemas"]["simple-user"];
      requested_reviewer?: null | components["schemas"]["simple-user"];
      requested_team?: components["schemas"]["team"];
      dismissed_review?: components["schemas"]["issue-event-dismissed-review"];
      milestone?: components["schemas"]["issue-event-milestone"];
      project_card?: components["schemas"]["issue-event-project-card"];
      rename?: components["schemas"]["issue-event-rename"];
      author_association?: components["schemas"]["author-association"];
      lock_reason?: OneOf<[string, null]>;
      performed_via_github_app?: null | components["schemas"]["integration"];
    };
    /**
     * Labeled Issue Event
     * @description Labeled Issue Event
     */
    "labeled-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      label: {
        name: string;
        color: string;
      };
    };
    /**
     * Unlabeled Issue Event
     * @description Unlabeled Issue Event
     */
    "unlabeled-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      label: {
        name: string;
        color: string;
      };
    };
    /**
     * Assigned Issue Event
     * @description Assigned Issue Event
     */
    "assigned-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: components["schemas"]["integration"];
      assignee: components["schemas"]["simple-user"];
      assigner: components["schemas"]["simple-user"];
    };
    /**
     * Unassigned Issue Event
     * @description Unassigned Issue Event
     */
    "unassigned-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      assignee: components["schemas"]["simple-user"];
      assigner: components["schemas"]["simple-user"];
    };
    /**
     * Milestoned Issue Event
     * @description Milestoned Issue Event
     */
    "milestoned-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      milestone: {
        title: string;
      };
    };
    /**
     * Demilestoned Issue Event
     * @description Demilestoned Issue Event
     */
    "demilestoned-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      milestone: {
        title: string;
      };
    };
    /**
     * Renamed Issue Event
     * @description Renamed Issue Event
     */
    "renamed-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      rename: {
        from: string;
        to: string;
      };
    };
    /**
     * Review Requested Issue Event
     * @description Review Requested Issue Event
     */
    "review-requested-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      review_requester: components["schemas"]["simple-user"];
      requested_team?: components["schemas"]["team"];
      requested_reviewer?: components["schemas"]["simple-user"];
    };
    /**
     * Review Request Removed Issue Event
     * @description Review Request Removed Issue Event
     */
    "review-request-removed-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      review_requester: components["schemas"]["simple-user"];
      requested_team?: components["schemas"]["team"];
      requested_reviewer?: components["schemas"]["simple-user"];
    };
    /**
     * Review Dismissed Issue Event
     * @description Review Dismissed Issue Event
     */
    "review-dismissed-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      dismissed_review: {
        state: string;
        review_id: number;
        dismissal_message: OneOf<[string, null]>;
        dismissal_commit_id?: string;
      };
    };
    /**
     * Locked Issue Event
     * @description Locked Issue Event
     */
    "locked-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      lock_reason: OneOf<[string, null]>;
    };
    /**
     * Added to Project Issue Event
     * @description Added to Project Issue Event
     */
    "added-to-project-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      project_card?: {
        id: number;
        /** Format: uri */
        url: string;
        project_id: number;
        /** Format: uri */
        project_url: string;
        column_name: string;
        previous_column_name?: string;
      };
    };
    /**
     * Moved Column in Project Issue Event
     * @description Moved Column in Project Issue Event
     */
    "moved-column-in-project-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      project_card?: {
        id: number;
        /** Format: uri */
        url: string;
        project_id: number;
        /** Format: uri */
        project_url: string;
        column_name: string;
        previous_column_name?: string;
      };
    };
    /**
     * Removed from Project Issue Event
     * @description Removed from Project Issue Event
     */
    "removed-from-project-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      project_card?: {
        id: number;
        /** Format: uri */
        url: string;
        project_id: number;
        /** Format: uri */
        project_url: string;
        column_name: string;
        previous_column_name?: string;
      };
    };
    /**
     * Converted Note to Issue Issue Event
     * @description Converted Note to Issue Issue Event
     */
    "converted-note-to-issue-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: components["schemas"]["integration"];
      project_card?: {
        id: number;
        /** Format: uri */
        url: string;
        project_id: number;
        /** Format: uri */
        project_url: string;
        column_name: string;
        previous_column_name?: string;
      };
    };
    /**
     * Issue Event for Issue
     * @description Issue Event for Issue
     */
    "issue-event-for-issue":
      | components["schemas"]["labeled-issue-event"]
      | components["schemas"]["unlabeled-issue-event"]
      | components["schemas"]["assigned-issue-event"]
      | components["schemas"]["unassigned-issue-event"]
      | components["schemas"]["milestoned-issue-event"]
      | components["schemas"]["demilestoned-issue-event"]
      | components["schemas"]["renamed-issue-event"]
      | components["schemas"]["review-requested-issue-event"]
      | components["schemas"]["review-request-removed-issue-event"]
      | components["schemas"]["review-dismissed-issue-event"]
      | components["schemas"]["locked-issue-event"]
      | components["schemas"]["added-to-project-issue-event"]
      | components["schemas"]["moved-column-in-project-issue-event"]
      | components["schemas"]["removed-from-project-issue-event"]
      | components["schemas"]["converted-note-to-issue-issue-event"];
    /**
     * Label
     * @description Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
     */
    label: {
      /** Format: int64 */
      id: number;
      node_id: string;
      /**
       * Format: uri
       * @description URL for the label
       */
      url: string;
      /** @description The name of the label. */
      name: string;
      description: OneOf<[string, null]>;
      /** @description 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
    };
    /**
     * Timeline Comment Event
     * @description Timeline Comment Event
     */
    "timeline-comment-event": {
      event: string;
      actor: components["schemas"]["simple-user"];
      /** @description Unique identifier of the issue comment */
      id: number;
      node_id: string;
      /**
       * Format: uri
       * @description URL for the issue comment
       */
      url: string;
      /** @description Contents of the issue comment */
      body?: string;
      body_text?: string;
      body_html?: string;
      /** Format: uri */
      html_url: string;
      user: components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      issue_url: string;
      author_association: components["schemas"]["author-association"];
      performed_via_github_app?: null | components["schemas"]["integration"];
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Timeline Cross Referenced Event
     * @description Timeline Cross Referenced Event
     */
    "timeline-cross-referenced-event": {
      event: string;
      actor?: components["schemas"]["simple-user"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      source: {
        type?: string;
        issue?: components["schemas"]["issue"];
      };
    };
    /**
     * Timeline Committed Event
     * @description Timeline Committed Event
     */
    "timeline-committed-event": {
      event?: string;
      /** @description SHA for the commit */
      sha: string;
      node_id: string;
      /** Format: uri */
      url: string;
      /** @description Identifying information for the git-user */
      author: {
        /**
         * Format: date-time
         * @description Timestamp of the commit
         */
        date: string;
        /** @description Git email address of the user */
        email: string;
        /** @description Name of the git user */
        name: string;
      };
      /** @description Identifying information for the git-user */
      committer: {
        /**
         * Format: date-time
         * @description Timestamp of the commit
         */
        date: string;
        /** @description Git email address of the user */
        email: string;
        /** @description Name of the git user */
        name: string;
      };
      /** @description Message describing the purpose of the commit */
      message: string;
      tree: {
        /** @description SHA for the commit */
        sha: string;
        /** Format: uri */
        url: string;
      };
      parents: {
        /** @description SHA for the commit */
        sha: string;
        /** Format: uri */
        url: string;
        /** Format: uri */
        html_url: string;
      }[];
      verification: {
        verified: boolean;
        reason: string;
        signature: OneOf<[string, null]>;
        payload: OneOf<[string, null]>;
      };
      /** Format: uri */
      html_url: string;
    };
    /**
     * Timeline Reviewed Event
     * @description Timeline Reviewed Event
     */
    "timeline-reviewed-event": {
      event: string;
      /** @description Unique identifier of the review */
      id: number;
      node_id: string;
      user: components["schemas"]["simple-user"];
      /** @description The text of the review. */
      body: OneOf<[string, null]>;
      state: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      pull_request_url: string;
      _links: {
        html: {
          href: string;
        };
        pull_request: {
          href: string;
        };
      };
      /** Format: date-time */
      submitted_at?: string;
      /** @description A commit SHA for the review. */
      commit_id: string;
      body_html?: string;
      body_text?: string;
      author_association: components["schemas"]["author-association"];
    };
    /**
     * Pull Request Review Comment
     * @description Pull Request Review Comments are comments on a portion of the Pull Request's diff.
     */
    "pull-request-review-comment": {
      /** @description URL for the pull request review comment */
      url: string;
      /** @description The ID of the pull request review to which the comment belongs. */
      pull_request_review_id: OneOf<[number, null]>;
      /** @description The ID of the pull request review comment. */
      id: number;
      /** @description The node ID of the pull request review comment. */
      node_id: string;
      /** @description The diff of the line that the comment refers to. */
      diff_hunk: string;
      /** @description The relative path of the file to which the comment applies. */
      path: string;
      /** @description The line index in the diff to which the comment applies. This field is deprecated; use `line` instead. */
      position: number;
      /** @description The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead. */
      original_position: number;
      /** @description The SHA of the commit to which the comment applies. */
      commit_id: string;
      /** @description The SHA of the original commit to which the comment applies. */
      original_commit_id: string;
      /** @description The comment ID to reply to. */
      in_reply_to_id?: number;
      user: components["schemas"]["simple-user"];
      /** @description The text of the comment. */
      body: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /**
       * Format: uri
       * @description HTML URL for the pull request review comment.
       */
      html_url: string;
      /**
       * Format: uri
       * @description URL for the pull request that the review comment belongs to.
       */
      pull_request_url: string;
      author_association: components["schemas"]["author-association"];
      _links: {
        self: {
          /** Format: uri */
          href: string;
        };
        html: {
          /** Format: uri */
          href: string;
        };
        pull_request: {
          /** Format: uri */
          href: string;
        };
      };
      /** @description The first line of the range for a multi-line comment. */
      start_line?: OneOf<[number, null]>;
      /** @description The first line of the range for a multi-line comment. */
      original_start_line?: OneOf<[number, null]>;
      /**
       * @description The side of the first line of the range for a multi-line comment.
       * @default RIGHT
       * @enum {string|null}
       */
      start_side?: "LEFT" | "RIGHT" | "" | null;
      /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      line?: number;
      /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      original_line?: number;
      /**
       * @description The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
       * @default RIGHT
       * @enum {string}
       */
      side?: "LEFT" | "RIGHT";
      /**
       * @description The level at which the comment is targeted, can be a diff line or a file.
       * @enum {string}
       */
      subject_type?: "line" | "file";
      reactions?: components["schemas"]["reaction-rollup"];
      body_html?: string;
      body_text?: string;
    };
    /**
     * Timeline Line Commented Event
     * @description Timeline Line Commented Event
     */
    "timeline-line-commented-event": {
      event?: string;
      node_id?: string;
      comments?: components["schemas"]["pull-request-review-comment"][];
    };
    /**
     * Timeline Commit Commented Event
     * @description Timeline Commit Commented Event
     */
    "timeline-commit-commented-event": {
      event?: string;
      node_id?: string;
      commit_id?: string;
      comments?: components["schemas"]["commit-comment"][];
    };
    /**
     * Timeline Assigned Issue Event
     * @description Timeline Assigned Issue Event
     */
    "timeline-assigned-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      assignee: components["schemas"]["simple-user"];
    };
    /**
     * Timeline Unassigned Issue Event
     * @description Timeline Unassigned Issue Event
     */
    "timeline-unassigned-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      assignee: components["schemas"]["simple-user"];
    };
    /**
     * State Change Issue Event
     * @description State Change Issue Event
     */
    "state-change-issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"];
      event: string;
      commit_id: OneOf<[string, null]>;
      commit_url: OneOf<[string, null]>;
      created_at: string;
      performed_via_github_app: null | components["schemas"]["integration"];
      state_reason?: OneOf<[string, null]>;
    };
    /**
     * Timeline Event
     * @description Timeline Event
     */
    "timeline-issue-events":
      | components["schemas"]["labeled-issue-event"]
      | components["schemas"]["unlabeled-issue-event"]
      | components["schemas"]["milestoned-issue-event"]
      | components["schemas"]["demilestoned-issue-event"]
      | components["schemas"]["renamed-issue-event"]
      | components["schemas"]["review-requested-issue-event"]
      | components["schemas"]["review-request-removed-issue-event"]
      | components["schemas"]["review-dismissed-issue-event"]
      | components["schemas"]["locked-issue-event"]
      | components["schemas"]["added-to-project-issue-event"]
      | components["schemas"]["moved-column-in-project-issue-event"]
      | components["schemas"]["removed-from-project-issue-event"]
      | components["schemas"]["converted-note-to-issue-issue-event"]
      | components["schemas"]["timeline-comment-event"]
      | components["schemas"]["timeline-cross-referenced-event"]
      | components["schemas"]["timeline-committed-event"]
      | components["schemas"]["timeline-reviewed-event"]
      | components["schemas"]["timeline-line-commented-event"]
      | components["schemas"]["timeline-commit-commented-event"]
      | components["schemas"]["timeline-assigned-issue-event"]
      | components["schemas"]["timeline-unassigned-issue-event"]
      | components["schemas"]["state-change-issue-event"];
    /**
     * Deploy Key
     * @description An SSH key granting access to a single repository.
     */
    "deploy-key": {
      id: number;
      key: string;
      url: string;
      title: string;
      verified: boolean;
      created_at: string;
      read_only: boolean;
    };
    /**
     * Language
     * @description Language
     */
    language: {
      [key: string]: number | undefined;
    };
    /**
     * License Content
     * @description License Content
     */
    "license-content": {
      name: string;
      path: string;
      sha: string;
      size: number;
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: OneOf<[string, null]>;
      /** Format: uri */
      git_url: OneOf<[string, null]>;
      /** Format: uri */
      download_url: OneOf<[string, null]>;
      type: string;
      content: string;
      encoding: string;
      _links: {
        /** Format: uri */
        git: OneOf<[string, null]>;
        /** Format: uri */
        html: OneOf<[string, null]>;
        /** Format: uri */
        self: string;
      };
      license: null | components["schemas"]["license-simple"];
    };
    /**
     * Merged upstream
     * @description Results of a successful merge upstream request
     */
    "merged-upstream": {
      message?: string;
      /** @enum {string} */
      merge_type?: "merge" | "fast-forward" | "none";
      base_branch?: string;
    };
    /** Pages Source Hash */
    "pages-source-hash": {
      branch: string;
      path: string;
    };
    /** Pages Https Certificate */
    "pages-https-certificate": {
      /** @enum {string} */
      state:
        | "new"
        | "authorization_created"
        | "authorization_pending"
        | "authorized"
        | "authorization_revoked"
        | "issued"
        | "uploaded"
        | "approved"
        | "errored"
        | "bad_authz"
        | "destroy_pending"
        | "dns_changed";
      description: string;
      /** @description Array of the domain set and its alternate name (if it is configured) */
      domains: string[];
      /** Format: date */
      expires_at?: string;
    };
    /**
     * GitHub Pages
     * @description The configuration for GitHub Pages for a repository.
     */
    page: {
      /**
       * Format: uri
       * @description The API address for accessing this Page resource.
       */
      url: string;
      /**
       * @description The status of the most recent build of the Page.
       * @enum {string|null}
       */
      status: "built" | "building" | "errored" | "" | null;
      /** @description The Pages site's custom domain */
      cname: OneOf<[string, null]>;
      /**
       * @description The state if the domain is verified
       * @enum {string|null}
       */
      protected_domain_state?:
        | "pending"
        | "verified"
        | "unverified"
        | ""
        | null;
      /**
       * Format: date-time
       * @description The timestamp when a pending domain becomes unverified.
       */
      pending_domain_unverified_at?: OneOf<[string, null]>;
      /**
       * @description Whether the Page has a custom 404 page.
       * @default false
       */
      custom_404: boolean;
      /**
       * Format: uri
       * @description The web address the Page can be accessed from.
       */
      html_url?: string;
      /**
       * @description The process in which the Page will be built.
       * @enum {string|null}
       */
      build_type?: "legacy" | "workflow" | "" | null;
      source?: components["schemas"]["pages-source-hash"];
      /** @description Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. */
      public: boolean;
      https_certificate?: components["schemas"]["pages-https-certificate"];
      /** @description Whether https is enabled on the domain */
      https_enforced?: boolean;
    };
    /**
     * Page Build
     * @description Page Build
     */
    "page-build": {
      /** Format: uri */
      url: string;
      status: string;
      error: {
        message: OneOf<[string, null]>;
      };
      pusher: null | components["schemas"]["simple-user"];
      commit: string;
      duration: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    /**
     * Page Build Status
     * @description Page Build Status
     */
    "page-build-status": {
      /** Format: uri */
      url: string;
      status: string;
    };
    /**
     * Pull Request
     * @description Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
     */
    "pull-request": {
      /** Format: uri */
      url: string;
      id: number;
      node_id: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      diff_url: string;
      /** Format: uri */
      patch_url: string;
      /** Format: uri */
      issue_url: string;
      /** Format: uri */
      commits_url: string;
      /** Format: uri */
      review_comments_url: string;
      review_comment_url: string;
      /** Format: uri */
      comments_url: string;
      /** Format: uri */
      statuses_url: string;
      /** @description Number uniquely identifying the pull request within its repository. */
      number: number;
      /**
       * @description State of this Pull Request. Either `open` or `closed`.
       * @enum {string}
       */
      state: "open" | "closed";
      locked: boolean;
      /** @description The title of the pull request. */
      title: string;
      user: null | components["schemas"]["simple-user"];
      body: OneOf<[string, null]>;
      labels: {
        /** Format: int64 */
        id: number;
        node_id: string;
        url: string;
        name: string;
        description: OneOf<[string, null]>;
        color: string;
        default: boolean;
      }[];
      milestone: null | components["schemas"]["milestone"];
      active_lock_reason?: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      closed_at: OneOf<[string, null]>;
      /** Format: date-time */
      merged_at: OneOf<[string, null]>;
      merge_commit_sha: OneOf<[string, null]>;
      assignee: null | components["schemas"]["simple-user"];
      assignees?: OneOf<[components["schemas"]["simple-user"][], null]>;
      requested_reviewers?: OneOf<
        [components["schemas"]["simple-user"][], null]
      >;
      requested_teams?: OneOf<[components["schemas"]["team-simple"][], null]>;
      head: {
        label: string;
        ref: string;
        repo: OneOf<
          [
            {
              archive_url: string;
              assignees_url: string;
              blobs_url: string;
              branches_url: string;
              collaborators_url: string;
              comments_url: string;
              commits_url: string;
              compare_url: string;
              contents_url: string;
              /** Format: uri */
              contributors_url: string;
              /** Format: uri */
              deployments_url: string;
              description: OneOf<[string, null]>;
              /** Format: uri */
              downloads_url: string;
              /** Format: uri */
              events_url: string;
              fork: boolean;
              /** Format: uri */
              forks_url: string;
              full_name: string;
              git_commits_url: string;
              git_refs_url: string;
              git_tags_url: string;
              /** Format: uri */
              hooks_url: string;
              /** Format: uri */
              html_url: string;
              id: number;
              node_id: string;
              issue_comment_url: string;
              issue_events_url: string;
              issues_url: string;
              keys_url: string;
              labels_url: string;
              /** Format: uri */
              languages_url: string;
              /** Format: uri */
              merges_url: string;
              milestones_url: string;
              name: string;
              notifications_url: string;
              owner: {
                /** Format: uri */
                avatar_url: string;
                events_url: string;
                /** Format: uri */
                followers_url: string;
                following_url: string;
                gists_url: string;
                gravatar_id: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                id: number;
                node_id: string;
                login: string;
                /** Format: uri */
                organizations_url: string;
                /** Format: uri */
                received_events_url: string;
                /** Format: uri */
                repos_url: string;
                site_admin: boolean;
                starred_url: string;
                /** Format: uri */
                subscriptions_url: string;
                type: string;
                /** Format: uri */
                url: string;
              };
              private: boolean;
              pulls_url: string;
              releases_url: string;
              /** Format: uri */
              stargazers_url: string;
              statuses_url: string;
              /** Format: uri */
              subscribers_url: string;
              /** Format: uri */
              subscription_url: string;
              /** Format: uri */
              tags_url: string;
              /** Format: uri */
              teams_url: string;
              trees_url: string;
              /** Format: uri */
              url: string;
              clone_url: string;
              default_branch: string;
              forks: number;
              forks_count: number;
              git_url: string;
              has_downloads: boolean;
              has_issues: boolean;
              has_projects: boolean;
              has_wiki: boolean;
              has_pages: boolean;
              has_discussions: boolean;
              /** Format: uri */
              homepage: OneOf<[string, null]>;
              language: OneOf<[string, null]>;
              master_branch?: string;
              archived: boolean;
              disabled: boolean;
              /** @description The repository visibility: public, private, or internal. */
              visibility?: string;
              /** Format: uri */
              mirror_url: OneOf<[string, null]>;
              open_issues: number;
              open_issues_count: number;
              permissions?: {
                admin: boolean;
                maintain?: boolean;
                push: boolean;
                triage?: boolean;
                pull: boolean;
              };
              temp_clone_token?: string;
              allow_merge_commit?: boolean;
              allow_squash_merge?: boolean;
              allow_rebase_merge?: boolean;
              license: OneOf<
                [
                  {
                    key: string;
                    name: string;
                    /** Format: uri */
                    url: OneOf<[string, null]>;
                    spdx_id: OneOf<[string, null]>;
                    node_id: string;
                  },
                  null
                ]
              >;
              /** Format: date-time */
              pushed_at: string;
              size: number;
              ssh_url: string;
              stargazers_count: number;
              /** Format: uri */
              svn_url: string;
              topics?: string[];
              watchers: number;
              watchers_count: number;
              /** Format: date-time */
              created_at: string;
              /** Format: date-time */
              updated_at: string;
              allow_forking?: boolean;
              is_template?: boolean;
              web_commit_signoff_required?: boolean;
            },
            null
          ]
        >;
        sha: string;
        user: {
          /** Format: uri */
          avatar_url: string;
          events_url: string;
          /** Format: uri */
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: OneOf<[string, null]>;
          /** Format: uri */
          html_url: string;
          id: number;
          node_id: string;
          login: string;
          /** Format: uri */
          organizations_url: string;
          /** Format: uri */
          received_events_url: string;
          /** Format: uri */
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          /** Format: uri */
          subscriptions_url: string;
          type: string;
          /** Format: uri */
          url: string;
        };
      };
      base: {
        label: string;
        ref: string;
        repo: {
          archive_url: string;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          /** Format: uri */
          contributors_url: string;
          /** Format: uri */
          deployments_url: string;
          description: OneOf<[string, null]>;
          /** Format: uri */
          downloads_url: string;
          /** Format: uri */
          events_url: string;
          fork: boolean;
          /** Format: uri */
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          /** Format: uri */
          hooks_url: string;
          /** Format: uri */
          html_url: string;
          id: number;
          is_template?: boolean;
          node_id: string;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          /** Format: uri */
          languages_url: string;
          /** Format: uri */
          merges_url: string;
          milestones_url: string;
          name: string;
          notifications_url: string;
          owner: {
            /** Format: uri */
            avatar_url: string;
            events_url: string;
            /** Format: uri */
            followers_url: string;
            following_url: string;
            gists_url: string;
            gravatar_id: OneOf<[string, null]>;
            /** Format: uri */
            html_url: string;
            id: number;
            node_id: string;
            login: string;
            /** Format: uri */
            organizations_url: string;
            /** Format: uri */
            received_events_url: string;
            /** Format: uri */
            repos_url: string;
            site_admin: boolean;
            starred_url: string;
            /** Format: uri */
            subscriptions_url: string;
            type: string;
            /** Format: uri */
            url: string;
          };
          private: boolean;
          pulls_url: string;
          releases_url: string;
          /** Format: uri */
          stargazers_url: string;
          statuses_url: string;
          /** Format: uri */
          subscribers_url: string;
          /** Format: uri */
          subscription_url: string;
          /** Format: uri */
          tags_url: string;
          /** Format: uri */
          teams_url: string;
          trees_url: string;
          /** Format: uri */
          url: string;
          clone_url: string;
          default_branch: string;
          forks: number;
          forks_count: number;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_pages: boolean;
          has_discussions: boolean;
          /** Format: uri */
          homepage: OneOf<[string, null]>;
          language: OneOf<[string, null]>;
          master_branch?: string;
          archived: boolean;
          disabled: boolean;
          /** @description The repository visibility: public, private, or internal. */
          visibility?: string;
          /** Format: uri */
          mirror_url: OneOf<[string, null]>;
          open_issues: number;
          open_issues_count: number;
          permissions?: {
            admin: boolean;
            maintain?: boolean;
            push: boolean;
            triage?: boolean;
            pull: boolean;
          };
          temp_clone_token?: string;
          allow_merge_commit?: boolean;
          allow_squash_merge?: boolean;
          allow_rebase_merge?: boolean;
          license: null | components["schemas"]["license-simple"];
          /** Format: date-time */
          pushed_at: string;
          size: number;
          ssh_url: string;
          stargazers_count: number;
          /** Format: uri */
          svn_url: string;
          topics?: string[];
          watchers: number;
          watchers_count: number;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
          allow_forking?: boolean;
          web_commit_signoff_required?: boolean;
        };
        sha: string;
        user: {
          /** Format: uri */
          avatar_url: string;
          events_url: string;
          /** Format: uri */
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: OneOf<[string, null]>;
          /** Format: uri */
          html_url: string;
          id: number;
          node_id: string;
          login: string;
          /** Format: uri */
          organizations_url: string;
          /** Format: uri */
          received_events_url: string;
          /** Format: uri */
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          /** Format: uri */
          subscriptions_url: string;
          type: string;
          /** Format: uri */
          url: string;
        };
      };
      _links: {
        comments: components["schemas"]["link"];
        commits: components["schemas"]["link"];
        statuses: components["schemas"]["link"];
        html: components["schemas"]["link"];
        issue: components["schemas"]["link"];
        review_comments: components["schemas"]["link"];
        review_comment: components["schemas"]["link"];
        self: components["schemas"]["link"];
      };
      author_association: components["schemas"]["author-association"];
      auto_merge: components["schemas"]["auto-merge"];
      /** @description Indicates whether or not the pull request is a draft. */
      draft?: boolean;
      merged: boolean;
      mergeable: OneOf<[boolean, null]>;
      rebaseable?: OneOf<[boolean, null]>;
      mergeable_state: string;
      merged_by: null | components["schemas"]["simple-user"];
      comments: number;
      review_comments: number;
      /** @description Indicates whether maintainers can modify the pull request. */
      maintainer_can_modify: boolean;
      commits: number;
      additions: number;
      deletions: number;
      changed_files: number;
    };
    /**
     * Pull Request Merge Result
     * @description Pull Request Merge Result
     */
    "pull-request-merge-result": {
      sha: string;
      merged: boolean;
      message: string;
    };
    /**
     * Pull Request Review Request
     * @description Pull Request Review Request
     */
    "pull-request-review-request": {
      users: components["schemas"]["simple-user"][];
      teams: components["schemas"]["team"][];
    };
    /**
     * Pull Request Review
     * @description Pull Request Reviews are reviews on pull requests.
     */
    "pull-request-review": {
      /** @description Unique identifier of the review */
      id: number;
      node_id: string;
      user: null | components["schemas"]["simple-user"];
      /** @description The text of the review. */
      body: string;
      state: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      pull_request_url: string;
      _links: {
        html: {
          href: string;
        };
        pull_request: {
          href: string;
        };
      };
      /** Format: date-time */
      submitted_at?: string;
      /** @description A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`. */
      commit_id: OneOf<[string, null]>;
      body_html?: string;
      body_text?: string;
      author_association: components["schemas"]["author-association"];
    };
    /**
     * Legacy Review Comment
     * @description Legacy Review Comment
     */
    "review-comment": {
      /** Format: uri */
      url: string;
      pull_request_review_id: OneOf<[number, null]>;
      id: number;
      node_id: string;
      diff_hunk: string;
      path: string;
      position: OneOf<[number, null]>;
      original_position: number;
      commit_id: string;
      original_commit_id: string;
      in_reply_to_id?: number;
      user: null | components["schemas"]["simple-user"];
      body: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      pull_request_url: string;
      author_association: components["schemas"]["author-association"];
      _links: {
        self: components["schemas"]["link"];
        html: components["schemas"]["link"];
        pull_request: components["schemas"]["link"];
      };
      body_text?: string;
      body_html?: string;
      reactions?: components["schemas"]["reaction-rollup"];
      /**
       * @description The side of the first line of the range for a multi-line comment.
       * @default RIGHT
       * @enum {string}
       */
      side?: "LEFT" | "RIGHT";
      /**
       * @description The side of the first line of the range for a multi-line comment.
       * @default RIGHT
       * @enum {string|null}
       */
      start_side?: "LEFT" | "RIGHT" | "" | null;
      /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      line?: number;
      /** @description The original line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      original_line?: number;
      /** @description The first line of the range for a multi-line comment. */
      start_line?: OneOf<[number, null]>;
      /** @description The original first line of the range for a multi-line comment. */
      original_start_line?: OneOf<[number, null]>;
    };
    /**
     * Release Asset
     * @description Data related to a release.
     */
    "release-asset": {
      /** Format: uri */
      url: string;
      /** Format: uri */
      browser_download_url: string;
      id: number;
      node_id: string;
      /** @description The file name of the asset. */
      name: string;
      label: OneOf<[string, null]>;
      /**
       * @description State of the release asset.
       * @enum {string}
       */
      state: "uploaded" | "open";
      content_type: string;
      size: number;
      download_count: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      uploader: null | components["schemas"]["simple-user"];
    };
    /**
     * Release
     * @description A release.
     */
    release: {
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      assets_url: string;
      upload_url: string;
      /** Format: uri */
      tarball_url: OneOf<[string, null]>;
      /** Format: uri */
      zipball_url: OneOf<[string, null]>;
      id: number;
      node_id: string;
      /** @description The name of the tag. */
      tag_name: string;
      /** @description Specifies the commitish value that determines where the Git tag is created from. */
      target_commitish: string;
      name: OneOf<[string, null]>;
      body?: OneOf<[string, null]>;
      /** @description true to create a draft (unpublished) release, false to create a published one. */
      draft: boolean;
      /** @description Whether to identify the release as a prerelease or a full release. */
      prerelease: boolean;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      published_at: OneOf<[string, null]>;
      author: components["schemas"]["simple-user"];
      assets: components["schemas"]["release-asset"][];
      body_html?: string;
      body_text?: string;
      mentions_count?: number;
      /**
       * Format: uri
       * @description The URL of the release discussion.
       */
      discussion_url?: string;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    "secret-scanning-alert": {
      number?: components["schemas"]["alert-number"];
      created_at?: components["schemas"]["alert-created-at"];
      updated_at?: null | components["schemas"]["alert-updated-at"];
      url?: components["schemas"]["alert-url"];
      html_url?: components["schemas"]["alert-html-url"];
      /**
       * Format: uri
       * @description The REST API URL of the code locations for this alert.
       */
      locations_url?: string;
      state?: components["schemas"]["secret-scanning-alert-state"];
      resolution?: components["schemas"]["secret-scanning-alert-resolution"];
      /**
       * Format: date-time
       * @description The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      resolved_at?: OneOf<[string, null]>;
      resolved_by?: null | components["schemas"]["simple-user"];
      /** @description An optional comment to resolve an alert. */
      resolution_comment?: OneOf<[string, null]>;
      /** @description The type of secret that secret scanning detected. */
      secret_type?: string;
      /** @description The secret that was detected. */
      secret?: string;
    };
    /** @description An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`. */
    "secret-scanning-alert-resolution-comment": OneOf<[string, null]>;
    /** @description Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository. */
    "secret-scanning-location-commit": {
      /** @description The file path in the repository */
      path: string;
      /** @description Line number at which the secret starts in the file */
      start_line: number;
      /** @description Line number at which the secret ends in the file */
      end_line: number;
      /** @description The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII */
      start_column: number;
      /** @description The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII */
      end_column: number;
      /** @description SHA-1 hash ID of the associated blob */
      blob_sha: string;
      /** @description The API URL to get the associated blob resource */
      blob_url: string;
      /** @description SHA-1 hash ID of the associated commit */
      commit_sha: string;
      /** @description The API URL to get the associated commit resource */
      commit_url: string;
    };
    /** @description Represents an 'issue_title' secret scanning location type. This location type shows that a secret was detected in the title of an issue. */
    "secret-scanning-location-issue-title": {
      /**
       * Format: uri
       * @description The API URL to get the issue where the secret was detected.
       */
      issue_title_url: string;
    };
    /** @description Represents an 'issue_body' secret scanning location type. This location type shows that a secret was detected in the body of an issue. */
    "secret-scanning-location-issue-body": {
      /**
       * Format: uri
       * @description The API URL to get the issue where the secret was detected.
       */
      issue_body_url: string;
    };
    /** @description Represents an 'issue_comment' secret scanning location type. This location type shows that a secret was detected in a comment on an issue. */
    "secret-scanning-location-issue-comment": {
      /**
       * Format: uri
       * @description The API URL to get the issue comment where the secret was detected.
       */
      issue_comment_url: string;
    };
    "secret-scanning-location": {
      /**
       * @description The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.
       * @enum {string}
       */
      type: "commit" | "issue_title" | "issue_body" | "issue_comment";
      details:
        | components["schemas"]["secret-scanning-location-commit"]
        | components["schemas"]["secret-scanning-location-issue-title"]
        | components["schemas"]["secret-scanning-location-issue-body"]
        | components["schemas"]["secret-scanning-location-issue-comment"];
    };
    /**
     * Stargazer
     * @description Stargazer
     */
    stargazer: {
      /** Format: date-time */
      starred_at: string;
      user: null | components["schemas"]["simple-user"];
    };
    /**
     * Code Frequency Stat
     * @description Code Frequency Stat
     */
    "code-frequency-stat": number[];
    /**
     * Commit Activity
     * @description Commit Activity
     */
    "commit-activity": {
      days: number[];
      total: number;
      week: number;
    };
    /**
     * Contributor Activity
     * @description Contributor Activity
     */
    "contributor-activity": {
      author: null | components["schemas"]["simple-user"];
      total: number;
      weeks: {
        w?: number;
        a?: number;
        d?: number;
        c?: number;
      }[];
    };
    /** Participation Stats */
    "participation-stats": {
      all: number[];
      owner: number[];
    };
    /**
     * Repository Invitation
     * @description Repository invitations let you manage who you collaborate with.
     */
    "repository-subscription": {
      /** @description Determines if notifications should be received from this repository. */
      subscribed: boolean;
      /** @description Determines if all notifications should be blocked from this repository. */
      ignored: boolean;
      reason: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      repository_url: string;
    };
    /**
     * Tag
     * @description Tag
     */
    tag: {
      name: string;
      commit: {
        sha: string;
        /** Format: uri */
        url: string;
      };
      /** Format: uri */
      zipball_url: string;
      /** Format: uri */
      tarball_url: string;
      node_id: string;
    };
    /**
     * Topic
     * @description A topic aggregates entities that are related to a subject.
     */
    topic: {
      names: string[];
    };
    /** Search Result Text Matches */
    "search-result-text-matches": {
      object_url?: string;
      object_type?: OneOf<[string, null]>;
      property?: string;
      fragment?: string;
      matches?: {
        text?: string;
        indices?: number[];
      }[];
    }[];
    /**
     * Code Search Result Item
     * @description Code Search Result Item
     */
    "code-search-result-item": {
      name: string;
      path: string;
      sha: string;
      /** Format: uri */
      url: string;
      /** Format: uri */
      git_url: string;
      /** Format: uri */
      html_url: string;
      repository: components["schemas"]["minimal-repository"];
      score: number;
      file_size?: number;
      language?: OneOf<[string, null]>;
      /** Format: date-time */
      last_modified_at?: string;
      line_numbers?: string[];
      text_matches?: components["schemas"]["search-result-text-matches"];
    };
    /**
     * Commit Search Result Item
     * @description Commit Search Result Item
     */
    "commit-search-result-item": {
      /** Format: uri */
      url: string;
      sha: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      comments_url: string;
      commit: {
        author: {
          name: string;
          email: string;
          /** Format: date-time */
          date: string;
        };
        committer: null | components["schemas"]["git-user"];
        comment_count: number;
        message: string;
        tree: {
          sha: string;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        url: string;
        verification?: components["schemas"]["verification"];
      };
      author: null | components["schemas"]["simple-user"];
      committer: null | components["schemas"]["git-user"];
      parents: {
        url?: string;
        html_url?: string;
        sha?: string;
      }[];
      repository: components["schemas"]["minimal-repository"];
      score: number;
      node_id: string;
      text_matches?: components["schemas"]["search-result-text-matches"];
    };
    /**
     * Issue Search Result Item
     * @description Issue Search Result Item
     */
    "issue-search-result-item": {
      /** Format: uri */
      url: string;
      /** Format: uri */
      repository_url: string;
      labels_url: string;
      /** Format: uri */
      comments_url: string;
      /** Format: uri */
      events_url: string;
      /** Format: uri */
      html_url: string;
      /** Format: int64 */
      id: number;
      node_id: string;
      number: number;
      title: string;
      locked: boolean;
      active_lock_reason?: OneOf<[string, null]>;
      assignees?: OneOf<[components["schemas"]["simple-user"][], null]>;
      user: null | components["schemas"]["simple-user"];
      labels: {
        /** Format: int64 */
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        color?: string;
        default?: boolean;
        description?: OneOf<[string, null]>;
      }[];
      state: string;
      state_reason?: OneOf<[string, null]>;
      assignee: null | components["schemas"]["simple-user"];
      milestone: null | components["schemas"]["milestone"];
      comments: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      closed_at: OneOf<[string, null]>;
      text_matches?: components["schemas"]["search-result-text-matches"];
      pull_request?: {
        /** Format: date-time */
        merged_at?: OneOf<[string, null]>;
        /** Format: uri */
        diff_url: OneOf<[string, null]>;
        /** Format: uri */
        html_url: OneOf<[string, null]>;
        /** Format: uri */
        patch_url: OneOf<[string, null]>;
        /** Format: uri */
        url: OneOf<[string, null]>;
      };
      body?: string;
      score: number;
      author_association: components["schemas"]["author-association"];
      draft?: boolean;
      repository?: components["schemas"]["repository"];
      body_html?: string;
      body_text?: string;
      /** Format: uri */
      timeline_url?: string;
      performed_via_github_app?: null | components["schemas"]["integration"];
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Label Search Result Item
     * @description Label Search Result Item
     */
    "label-search-result-item": {
      id: number;
      node_id: string;
      /** Format: uri */
      url: string;
      name: string;
      color: string;
      default: boolean;
      description: OneOf<[string, null]>;
      score: number;
      text_matches?: components["schemas"]["search-result-text-matches"];
    };
    /**
     * Repo Search Result Item
     * @description Repo Search Result Item
     */
    "repo-search-result-item": {
      id: number;
      node_id: string;
      name: string;
      full_name: string;
      owner: null | components["schemas"]["simple-user"];
      private: boolean;
      /** Format: uri */
      html_url: string;
      description: OneOf<[string, null]>;
      fork: boolean;
      /** Format: uri */
      url: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      pushed_at: string;
      /** Format: uri */
      homepage: OneOf<[string, null]>;
      size: number;
      stargazers_count: number;
      watchers_count: number;
      language: OneOf<[string, null]>;
      forks_count: number;
      open_issues_count: number;
      master_branch?: string;
      default_branch: string;
      score: number;
      /** Format: uri */
      forks_url: string;
      keys_url: string;
      collaborators_url: string;
      /** Format: uri */
      teams_url: string;
      /** Format: uri */
      hooks_url: string;
      issue_events_url: string;
      /** Format: uri */
      events_url: string;
      assignees_url: string;
      branches_url: string;
      /** Format: uri */
      tags_url: string;
      blobs_url: string;
      git_tags_url: string;
      git_refs_url: string;
      trees_url: string;
      statuses_url: string;
      /** Format: uri */
      languages_url: string;
      /** Format: uri */
      stargazers_url: string;
      /** Format: uri */
      contributors_url: string;
      /** Format: uri */
      subscribers_url: string;
      /** Format: uri */
      subscription_url: string;
      commits_url: string;
      git_commits_url: string;
      comments_url: string;
      issue_comment_url: string;
      contents_url: string;
      compare_url: string;
      /** Format: uri */
      merges_url: string;
      archive_url: string;
      /** Format: uri */
      downloads_url: string;
      issues_url: string;
      pulls_url: string;
      milestones_url: string;
      notifications_url: string;
      labels_url: string;
      releases_url: string;
      /** Format: uri */
      deployments_url: string;
      git_url: string;
      ssh_url: string;
      clone_url: string;
      /** Format: uri */
      svn_url: string;
      forks: number;
      open_issues: number;
      watchers: number;
      topics?: string[];
      /** Format: uri */
      mirror_url: OneOf<[string, null]>;
      has_issues: boolean;
      has_projects: boolean;
      has_pages: boolean;
      has_wiki: boolean;
      has_downloads: boolean;
      has_discussions?: boolean;
      archived: boolean;
      /** @description Returns whether or not this repository disabled. */
      disabled: boolean;
      /** @description The repository visibility: public, private, or internal. */
      visibility?: string;
      license: null | components["schemas"]["license-simple"];
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        push: boolean;
        triage?: boolean;
        pull: boolean;
      };
      text_matches?: components["schemas"]["search-result-text-matches"];
      temp_clone_token?: string;
      allow_merge_commit?: boolean;
      allow_squash_merge?: boolean;
      allow_rebase_merge?: boolean;
      allow_auto_merge?: boolean;
      delete_branch_on_merge?: boolean;
      allow_forking?: boolean;
      is_template?: boolean;
      web_commit_signoff_required?: boolean;
    };
    /**
     * Topic Search Result Item
     * @description Topic Search Result Item
     */
    "topic-search-result-item": {
      name: string;
      display_name: OneOf<[string, null]>;
      short_description: OneOf<[string, null]>;
      description: OneOf<[string, null]>;
      created_by: OneOf<[string, null]>;
      released: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      featured: boolean;
      curated: boolean;
      score: number;
      repository_count?: OneOf<[number, null]>;
      /** Format: uri */
      logo_url?: OneOf<[string, null]>;
      text_matches?: components["schemas"]["search-result-text-matches"];
      related?: OneOf<
        [
          {
            topic_relation?: {
              id?: number;
              name?: string;
              topic_id?: number;
              relation_type?: string;
            };
          }[],
          null
        ]
      >;
      aliases?: OneOf<
        [
          {
            topic_relation?: {
              id?: number;
              name?: string;
              topic_id?: number;
              relation_type?: string;
            };
          }[],
          null
        ]
      >;
    };
    /**
     * User Search Result Item
     * @description User Search Result Item
     */
    "user-search-result-item": {
      login: string;
      id: number;
      node_id: string;
      /** Format: uri */
      avatar_url: string;
      gravatar_id: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      followers_url: string;
      /** Format: uri */
      subscriptions_url: string;
      /** Format: uri */
      organizations_url: string;
      /** Format: uri */
      repos_url: string;
      /** Format: uri */
      received_events_url: string;
      type: string;
      score: number;
      following_url: string;
      gists_url: string;
      starred_url: string;
      events_url: string;
      public_repos?: number;
      public_gists?: number;
      followers?: number;
      following?: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      name?: OneOf<[string, null]>;
      bio?: OneOf<[string, null]>;
      /** Format: email */
      email?: OneOf<[string, null]>;
      location?: OneOf<[string, null]>;
      site_admin: boolean;
      hireable?: OneOf<[boolean, null]>;
      text_matches?: components["schemas"]["search-result-text-matches"];
      blog?: OneOf<[string, null]>;
      company?: OneOf<[string, null]>;
      /** Format: date-time */
      suspended_at?: OneOf<[string, null]>;
    };
    /**
     * Private User
     * @description Private User
     */
    "private-user": {
      login: string;
      id: number;
      node_id: string;
      /** Format: uri */
      avatar_url: string;
      gravatar_id: OneOf<[string, null]>;
      /** Format: uri */
      url: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      /** Format: uri */
      subscriptions_url: string;
      /** Format: uri */
      organizations_url: string;
      /** Format: uri */
      repos_url: string;
      events_url: string;
      /** Format: uri */
      received_events_url: string;
      type: string;
      site_admin: boolean;
      name: OneOf<[string, null]>;
      company: OneOf<[string, null]>;
      blog: OneOf<[string, null]>;
      location: OneOf<[string, null]>;
      /** Format: email */
      email: OneOf<[string, null]>;
      hireable: OneOf<[boolean, null]>;
      bio: OneOf<[string, null]>;
      twitter_username?: OneOf<[string, null]>;
      public_repos: number;
      public_gists: number;
      followers: number;
      following: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      private_gists: number;
      total_private_repos: number;
      owned_private_repos: number;
      disk_usage: number;
      collaborators: number;
      two_factor_authentication: boolean;
      plan?: {
        collaborators: number;
        name: string;
        space: number;
        private_repos: number;
      };
      /** Format: date-time */
      suspended_at?: OneOf<[string, null]>;
      business_plus?: boolean;
      ldap_dn?: string;
    };
    /**
     * GPG Key
     * @description A unique encryption key
     */
    "gpg-key": {
      id: number;
      name?: OneOf<[string, null]>;
      primary_key_id: OneOf<[number, null]>;
      key_id: string;
      public_key: string;
      emails: {
        email?: string;
        verified?: boolean;
      }[];
      subkeys: {
        id?: number;
        primary_key_id?: number;
        key_id?: string;
        public_key?: string;
        emails?: Record<string, never>[];
        subkeys?: Record<string, never>[];
        can_sign?: boolean;
        can_encrypt_comms?: boolean;
        can_encrypt_storage?: boolean;
        can_certify?: boolean;
        created_at?: string;
        expires_at?: OneOf<[string, null]>;
        raw_key?: OneOf<[string, null]>;
        revoked?: boolean;
      }[];
      can_sign: boolean;
      can_encrypt_comms: boolean;
      can_encrypt_storage: boolean;
      can_certify: boolean;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      expires_at: OneOf<[string, null]>;
      revoked: boolean;
      raw_key: OneOf<[string, null]>;
    };
    /**
     * Key
     * @description Key
     */
    key: {
      key: string;
      id: number;
      url: string;
      title: string;
      /** Format: date-time */
      created_at: string;
      verified: boolean;
      read_only: boolean;
    };
    /**
     * Starred Repository
     * @description Starred Repository
     */
    "starred-repository": {
      /** Format: date-time */
      starred_at: string;
      repo: components["schemas"]["repository"];
    };
    /**
     * Hovercard
     * @description Hovercard
     */
    hovercard: {
      contexts: {
        message: string;
        octicon: string;
      }[];
    };
    /**
     * Key Simple
     * @description Key Simple
     */
    "key-simple": {
      id: number;
      key: string;
    };
    /**
     * Simple Installation
     * @description The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
     */
    "simple-installation": {
      /** @description The ID of the installation. */
      id: number;
      /** @description The global node ID of the installation. */
      node_id: string;
    };
    /** @description A suite of checks performed on the code of a given code change */
    "simple-check-suite": {
      after?: OneOf<[string, null]>;
      app?: components["schemas"]["integration"];
      before?: OneOf<[string, null]>;
      /** @enum {string|null} */
      conclusion?:
        | "success"
        | "failure"
        | "neutral"
        | "cancelled"
        | "skipped"
        | "timed_out"
        | "action_required"
        | "stale"
        | "startup_failure"
        | ""
        | null;
      /** Format: date-time */
      created_at?: string;
      head_branch?: OneOf<[string, null]>;
      /** @description The SHA of the head commit that is being checked. */
      head_sha?: string;
      id?: number;
      node_id?: string;
      pull_requests?: components["schemas"]["pull-request-minimal"][];
      repository?: components["schemas"]["minimal-repository"];
      /** @enum {string} */
      status?: "queued" | "in_progress" | "completed" | "pending" | "waiting";
      /** Format: date-time */
      updated_at?: string;
      url?: string;
    };
    /**
     * CheckRun
     * @description A check performed on the code of a given code change
     */
    "check-run-with-simple-check-suite": {
      app: null | components["schemas"]["integration"];
      check_suite: components["schemas"]["simple-check-suite"];
      /** Format: date-time */
      completed_at: OneOf<[string, null]>;
      /** @enum {string|null} */
      conclusion:
        | "waiting"
        | "pending"
        | "startup_failure"
        | "stale"
        | "success"
        | "failure"
        | "neutral"
        | "cancelled"
        | "skipped"
        | "timed_out"
        | "action_required"
        | ""
        | null;
      deployment?: components["schemas"]["deployment-simple"];
      details_url: string;
      external_id: string;
      /** @description The SHA of the commit that is being checked. */
      head_sha: string;
      html_url: string;
      /** @description The id of the check. */
      id: number;
      /** @description The name of the check. */
      name: string;
      node_id: string;
      output: {
        annotations_count: number;
        /** Format: uri */
        annotations_url: string;
        summary: OneOf<[string, null]>;
        text: OneOf<[string, null]>;
        title: OneOf<[string, null]>;
      };
      pull_requests: components["schemas"]["pull-request-minimal"][];
      /** Format: date-time */
      started_at: string;
      /**
       * @description The phase of the lifecycle that the check is currently in.
       * @enum {string}
       */
      status: "queued" | "in_progress" | "completed" | "pending";
      url: string;
    };
    /** @description The dismissal comment associated with the dismissal of the alert. */
    "code-scanning-alert-dismissed-comment": OneOf<[string, null]>;
    /** @description Details for the vulnerable package. */
    readonly "dependabot-alert-package": {
      /** @description The package's language or package management ecosystem. */
      readonly ecosystem: string;
      /** @description The unique package name within its ecosystem. */
      readonly name: string;
    };
    /** @description Details pertaining to one vulnerable version range for the advisory. */
    readonly "dependabot-alert-security-vulnerability": {
      readonly package: components["schemas"]["dependabot-alert-package"];
      /**
       * @description The severity of the vulnerability.
       * @enum {string}
       */
      readonly severity: "low" | "medium" | "high" | "critical";
      /** @description Conditions that identify vulnerable versions of this vulnerability's package. */
      readonly vulnerable_version_range: string;
      /** @description Details pertaining to the package version that patches this vulnerability. */
      readonly first_patched_version: OneOf<
        [
          {
            /** @description The package version that patches this vulnerability. */
            readonly identifier: string;
          },
          null
        ]
      >;
    };
    /** @description Details for the GitHub Security Advisory. */
    readonly "dependabot-alert-security-advisory": {
      /** @description The unique GitHub Security Advisory ID assigned to the advisory. */
      readonly ghsa_id: string;
      /** @description The unique CVE ID assigned to the advisory. */
      readonly cve_id: OneOf<[string, null]>;
      /** @description A short, plain text summary of the advisory. */
      readonly summary: string;
      /** @description A long-form Markdown-supported description of the advisory. */
      readonly description: string;
      /** @description Vulnerable version range information for the advisory. */
      readonly vulnerabilities: readonly components["schemas"]["dependabot-alert-security-vulnerability"][];
      /**
       * @description The severity of the advisory.
       * @enum {string}
       */
      readonly severity: "low" | "medium" | "high" | "critical";
      /** @description Details for the advisory pertaining to the Common Vulnerability Scoring System. */
      readonly cvss: {
        /** @description The overall CVSS score of the advisory. */
        readonly score: number;
        /** @description The full CVSS vector string for the advisory. */
        readonly vector_string: OneOf<[string, null]>;
      };
      /** @description Details for the advisory pertaining to Common Weakness Enumeration. */
      readonly cwes: readonly {
        /** @description The unique CWE ID. */
        readonly cwe_id: string;
        /** @description The short, plain text name of the CWE. */
        readonly name: string;
      }[];
      /** @description Values that identify this advisory among security information sources. */
      readonly identifiers: readonly {
        /**
         * @description The type of advisory identifier.
         * @enum {string}
         */
        readonly type: "CVE" | "GHSA";
        /** @description The value of the advisory identifer. */
        readonly value: string;
      }[];
      /** @description Links to additional advisory information. */
      readonly references: readonly {
        /**
         * Format: uri
         * @description The URL of the reference.
         */
        readonly url: string;
      }[];
      /**
       * Format: date-time
       * @description The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      readonly published_at: string;
      /**
       * Format: date-time
       * @description The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      readonly updated_at: string;
      /**
       * Format: date-time
       * @description The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      readonly withdrawn_at: OneOf<[string, null]>;
    };
    /** @description A Dependabot alert. */
    "dependabot-alert": {
      number: components["schemas"]["alert-number"];
      /**
       * @description The state of the Dependabot alert.
       * @enum {string}
       */
      state: "dismissed" | "fixed" | "open";
      /** @description Details for the vulnerable dependency. */
      dependency: {
        readonly package?: components["schemas"]["dependabot-alert-package"];
        /** @description The full path to the dependency manifest file, relative to the root of the repository. */
        readonly manifest_path?: string;
        /**
         * @description The execution scope of the vulnerable dependency.
         * @enum {string|null}
         */
        readonly scope?: "development" | "runtime" | "" | null;
      };
      security_advisory: components["schemas"]["dependabot-alert-security-advisory"];
      security_vulnerability: components["schemas"]["dependabot-alert-security-vulnerability"];
      url: components["schemas"]["alert-url"];
      html_url: components["schemas"]["alert-html-url"];
      created_at: components["schemas"]["alert-created-at"];
      updated_at: components["schemas"]["alert-updated-at"];
      dismissed_at: components["schemas"]["alert-dismissed-at"];
      dismissed_by: null | components["schemas"]["simple-user"];
      /**
       * @description The reason that the alert was dismissed.
       * @enum {string|null}
       */
      dismissed_reason:
        | "fix_started"
        | "inaccurate"
        | "no_bandwidth"
        | "not_used"
        | "tolerable_risk"
        | ""
        | null;
      /** @description An optional comment associated with the alert's dismissal. */
      dismissed_comment: OneOf<[string, null]>;
      fixed_at: components["schemas"]["alert-fixed-at"];
    };
    /**
     * Discussion
     * @description A Discussion in a repository.
     */
    discussion: {
      active_lock_reason: OneOf<[string, null]>;
      answer_chosen_at: OneOf<[string, null]>;
      /** User */
      answer_chosen_by: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
      answer_html_url: OneOf<[string, null]>;
      /**
       * AuthorAssociation
       * @description How the author is associated with the repository.
       * @enum {string}
       */
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string;
      category: {
        /** Format: date-time */
        created_at: string;
        description: string;
        emoji: string;
        id: number;
        is_answerable: boolean;
        name: string;
        node_id?: string;
        repository_id: number;
        slug: string;
        updated_at: string;
      };
      comments: number;
      /** Format: date-time */
      created_at: string;
      html_url: string;
      id: number;
      locked: boolean;
      node_id: string;
      number: number;
      /** Reactions */
      reactions?: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        /** Format: uri */
        url: string;
      };
      repository_url: string;
      /**
       * @description The current state of the discussion.
       * `converting` means that the discussion is being converted from an issue.
       * `transferring` means that the discussion is being transferred from another repository.
       * @enum {string}
       */
      state: "open" | "closed" | "locked" | "converting" | "transferring";
      /**
       * @description The reason for the current state
       * @enum {string|null}
       */
      state_reason:
        | "resolved"
        | "outdated"
        | "duplicate"
        | "reopened"
        | ""
        | null;
      timeline_url?: string;
      title: string;
      /** Format: date-time */
      updated_at: string;
      /** User */
      user: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
    };
    /**
     * Projects v2 Project
     * @description A projects v2 project
     */
    "projects-v2": {
      id: number;
      node_id: string;
      owner: components["schemas"]["simple-user"];
      creator: components["schemas"]["simple-user"];
      title: string;
      description: OneOf<[string, null]>;
      public: boolean;
      /** Format: date-time */
      closed_at: OneOf<[string, null]>;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      number: number;
      short_description: OneOf<[string, null]>;
      /** Format: date-time */
      deleted_at: OneOf<[string, null]>;
      deleted_by: null | components["schemas"]["simple-user"];
    };
    /** branch protection rule created event */
    "webhook-branch-protection-rule-created": {
      /** @enum {string} */
      action: "created";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      /**
       * branch protection rule
       * @description The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github-ae@latest/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
       */
      rule: {
        admin_enforced: boolean;
        /** @enum {string} */
        allow_deletions_enforcement_level: "off" | "non_admins" | "everyone";
        /** @enum {string} */
        allow_force_pushes_enforcement_level: "off" | "non_admins" | "everyone";
        authorized_actor_names: string[];
        authorized_actors_only: boolean;
        authorized_dismissal_actors_only: boolean;
        create_protected?: boolean;
        /** Format: date-time */
        created_at: string;
        dismiss_stale_reviews_on_push: boolean;
        id: number;
        ignore_approvals_from_contributors: boolean;
        /** @enum {string} */
        linear_history_requirement_enforcement_level:
          | "off"
          | "non_admins"
          | "everyone";
        /** @enum {string} */
        merge_queue_enforcement_level: "off" | "non_admins" | "everyone";
        name: string;
        /** @enum {string} */
        pull_request_reviews_enforcement_level:
          | "off"
          | "non_admins"
          | "everyone";
        repository_id: number;
        require_code_owner_review: boolean;
        required_approving_review_count: number;
        /** @enum {string} */
        required_conversation_resolution_level:
          | "off"
          | "non_admins"
          | "everyone";
        /** @enum {string} */
        required_deployments_enforcement_level:
          | "off"
          | "non_admins"
          | "everyone";
        required_status_checks: string[];
        /** @enum {string} */
        required_status_checks_enforcement_level:
          | "off"
          | "non_admins"
          | "everyone";
        /** @enum {string} */
        signature_requirement_enforcement_level:
          | "off"
          | "non_admins"
          | "everyone";
        strict_required_status_checks_policy: boolean;
        /** Format: date-time */
        updated_at: string;
      };
      sender: components["schemas"]["simple-user"];
    };
    /** branch protection rule deleted event */
    "webhook-branch-protection-rule-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      /**
       * branch protection rule
       * @description The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github-ae@latest/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
       */
      rule: {
        admin_enforced: boolean;
        /** @enum {string} */
        allow_deletions_enforcement_level: "off" | "non_admins" | "everyone";
        /** @enum {string} */
        allow_force_pushes_enforcement_level: "off" | "non_admins" | "everyone";
        authorized_actor_names: string[];
        authorized_actors_only: boolean;
        authorized_dismissal_actors_only: boolean;
        create_protected?: boolean;
        /** Format: date-time */
        created_at: string;
        dismiss_stale_reviews_on_push: boolean;
        id: number;
        ignore_approvals_from_contributors: boolean;
        /** @enum {string} */
        linear_history_requirement_enforcement_level:
          | "off"
          | "non_admins"
          | "everyone";
        /** @enum {string} */
        merge_queue_enforcement_level: "off" | "non_admins" | "everyone";
        name: string;
        /** @enum {string} */
        pull_request_reviews_enforcement_level:
          | "off"
          | "non_admins"
          | "everyone";
        repository_id: number;
        require_code_owner_review: boolean;
        required_approving_review_count: number;
        /** @enum {string} */
        required_conversation_resolution_level:
          | "off"
          | "non_admins"
          | "everyone";
        /** @enum {string} */
        required_deployments_enforcement_level:
          | "off"
          | "non_admins"
          | "everyone";
        required_status_checks: string[];
        /** @enum {string} */
        required_status_checks_enforcement_level:
          | "off"
          | "non_admins"
          | "everyone";
        /** @enum {string} */
        signature_requirement_enforcement_level:
          | "off"
          | "non_admins"
          | "everyone";
        strict_required_status_checks_policy: boolean;
        /** Format: date-time */
        updated_at: string;
      };
      sender: components["schemas"]["simple-user"];
    };
    /** branch protection rule edited event */
    "webhook-branch-protection-rule-edited": {
      /** @enum {string} */
      action: "edited";
      /** @description If the action was `edited`, the changes to the rule. */
      changes?: {
        admin_enforced?: {
          from: OneOf<[boolean, null]>;
        };
        authorized_actor_names?: {
          from: string[];
        };
        authorized_actors_only?: {
          from: OneOf<[boolean, null]>;
        };
        authorized_dismissal_actors_only?: {
          from: OneOf<[boolean, null]>;
        };
        linear_history_requirement_enforcement_level?: {
          /** @enum {string} */
          from: "off" | "non_admins" | "everyone";
        };
        required_status_checks?: {
          from: string[];
        };
        required_status_checks_enforcement_level?: {
          /** @enum {string} */
          from: "off" | "non_admins" | "everyone";
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      /**
       * branch protection rule
       * @description The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github-ae@latest/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
       */
      rule: {
        admin_enforced: boolean;
        /** @enum {string} */
        allow_deletions_enforcement_level: "off" | "non_admins" | "everyone";
        /** @enum {string} */
        allow_force_pushes_enforcement_level: "off" | "non_admins" | "everyone";
        authorized_actor_names: string[];
        authorized_actors_only: boolean;
        authorized_dismissal_actors_only: boolean;
        create_protected?: boolean;
        /** Format: date-time */
        created_at: string;
        dismiss_stale_reviews_on_push: boolean;
        id: number;
        ignore_approvals_from_contributors: boolean;
        /** @enum {string} */
        linear_history_requirement_enforcement_level:
          | "off"
          | "non_admins"
          | "everyone";
        /** @enum {string} */
        merge_queue_enforcement_level: "off" | "non_admins" | "everyone";
        name: string;
        /** @enum {string} */
        pull_request_reviews_enforcement_level:
          | "off"
          | "non_admins"
          | "everyone";
        repository_id: number;
        require_code_owner_review: boolean;
        required_approving_review_count: number;
        /** @enum {string} */
        required_conversation_resolution_level:
          | "off"
          | "non_admins"
          | "everyone";
        /** @enum {string} */
        required_deployments_enforcement_level:
          | "off"
          | "non_admins"
          | "everyone";
        required_status_checks: string[];
        /** @enum {string} */
        required_status_checks_enforcement_level:
          | "off"
          | "non_admins"
          | "everyone";
        /** @enum {string} */
        signature_requirement_enforcement_level:
          | "off"
          | "non_admins"
          | "everyone";
        strict_required_status_checks_policy: boolean;
        /** Format: date-time */
        updated_at: string;
      };
      sender: components["schemas"]["simple-user"];
    };
    /** Check Run Completed Event */
    "webhook-check-run-completed": {
      /** @enum {string} */
      action?: "completed";
      check_run: components["schemas"]["check-run-with-simple-check-suite"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /**
     * Check Run Completed Event
     * @description The check_run.completed webhook encoded with URL encoding
     */
    "webhook-check-run-completed-form-encoded": {
      /** @description A URL-encoded string of the check_run.completed JSON payload. The decoded payload is a JSON object. */
      payload: string;
    };
    /** Check Run Created Event */
    "webhook-check-run-created": {
      /** @enum {string} */
      action?: "created";
      check_run: components["schemas"]["check-run-with-simple-check-suite"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /**
     * Check Run Created Event
     * @description The check_run.created webhook encoded with URL encoding
     */
    "webhook-check-run-created-form-encoded": {
      /** @description A URL-encoded string of the check_run.created JSON payload. The decoded payload is a JSON object. */
      payload: string;
    };
    /** Check Run Requested Action Event */
    "webhook-check-run-requested-action": {
      /** @enum {string} */
      action: "requested_action";
      check_run: components["schemas"]["check-run-with-simple-check-suite"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      /** @description The action requested by the user. */
      requested_action?: {
        /** @description The integrator reference of the action requested by the user. */
        identifier?: string;
      };
      sender: components["schemas"]["simple-user"];
    };
    /**
     * Check Run Requested Action Event
     * @description The check_run.requested_action webhook encoded with URL encoding
     */
    "webhook-check-run-requested-action-form-encoded": {
      /** @description A URL-encoded string of the check_run.requested_action JSON payload. The decoded payload is a JSON object. */
      payload: string;
    };
    /** Check Run Re-Requested Event */
    "webhook-check-run-rerequested": {
      /** @enum {string} */
      action?: "rerequested";
      check_run: components["schemas"]["check-run-with-simple-check-suite"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /**
     * Check Run Re-Requested Event
     * @description The check_run.rerequested webhook encoded with URL encoding
     */
    "webhook-check-run-rerequested-form-encoded": {
      /** @description A URL-encoded string of the check_run.rerequested JSON payload. The decoded payload is a JSON object. */
      payload: string;
    };
    /** check_suite completed event */
    "webhook-check-suite-completed": {
      /** @enum {string} */
      action: "completed";
      actions_meta?: OneOf<[Record<string, never>, null]>;
      /** @description The [check_suite](https://docs.github.com/github-ae@latest/rest/reference/checks#suites). */
      check_suite: {
        after: OneOf<[string, null]>;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        app: {
          /** Format: date-time */
          created_at: OneOf<[string, null]>;
          description: OneOf<[string, null]>;
          /** @description The list of events for the GitHub app */
          events?: (
            | "branch_protection_rule"
            | "check_run"
            | "check_suite"
            | "code_scanning_alert"
            | "commit_comment"
            | "content_reference"
            | "create"
            | "delete"
            | "deployment"
            | "deployment_review"
            | "deployment_status"
            | "deploy_key"
            | "discussion"
            | "discussion_comment"
            | "fork"
            | "gollum"
            | "issues"
            | "issue_comment"
            | "label"
            | "member"
            | "membership"
            | "milestone"
            | "organization"
            | "org_block"
            | "page_build"
            | "project"
            | "project_card"
            | "project_column"
            | "public"
            | "pull_request"
            | "pull_request_review"
            | "pull_request_review_comment"
            | "push"
            | "registry_package"
            | "release"
            | "repository"
            | "repository_dispatch"
            | "secret_scanning_alert"
            | "star"
            | "status"
            | "team"
            | "team_add"
            | "watch"
            | "workflow_dispatch"
            | "workflow_run"
            | "merge_group"
            | "pull_request_review_thread"
            | "workflow_job"
            | "merge_queue_entry"
            | "security_and_analysis"
            | "projects_v2_item"
            | "secret_scanning_alert_location"
          )[];
          /** Format: uri */
          external_url: OneOf<[string, null]>;
          /** Format: uri */
          html_url: string;
          /** @description Unique identifier of the GitHub app */
          id: OneOf<[number, null]>;
          /** @description The name of the GitHub app */
          name: string;
          node_id: string;
          /** User */
          owner: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** @description The set of permissions for the GitHub app */
          permissions?: {
            /** @enum {string} */
            actions?: "read" | "write";
            /** @enum {string} */
            administration?: "read" | "write";
            /** @enum {string} */
            checks?: "read" | "write";
            /** @enum {string} */
            content_references?: "read" | "write";
            /** @enum {string} */
            contents?: "read" | "write";
            /** @enum {string} */
            deployments?: "read" | "write";
            /** @enum {string} */
            discussions?: "read" | "write";
            /** @enum {string} */
            emails?: "read" | "write";
            /** @enum {string} */
            environments?: "read" | "write";
            /** @enum {string} */
            issues?: "read" | "write";
            /** @enum {string} */
            keys?: "read" | "write";
            /** @enum {string} */
            members?: "read" | "write";
            /** @enum {string} */
            metadata?: "read" | "write";
            /** @enum {string} */
            organization_administration?: "read" | "write";
            /** @enum {string} */
            organization_hooks?: "read" | "write";
            /** @enum {string} */
            organization_packages?: "read" | "write";
            /** @enum {string} */
            organization_plan?: "read" | "write";
            /** @enum {string} */
            organization_projects?: "read" | "write" | "admin";
            /** @enum {string} */
            organization_secrets?: "read" | "write";
            /** @enum {string} */
            organization_self_hosted_runners?: "read" | "write";
            /** @enum {string} */
            organization_user_blocking?: "read" | "write";
            /** @enum {string} */
            packages?: "read" | "write";
            /** @enum {string} */
            pages?: "read" | "write";
            /** @enum {string} */
            pull_requests?: "read" | "write";
            /** @enum {string} */
            repository_hooks?: "read" | "write";
            /** @enum {string} */
            repository_projects?: "read" | "write" | "admin";
            /** @enum {string} */
            secret_scanning_alerts?: "read" | "write";
            /** @enum {string} */
            secrets?: "read" | "write";
            /** @enum {string} */
            security_events?: "read" | "write";
            /** @enum {string} */
            security_scanning_alert?: "read" | "write";
            /** @enum {string} */
            single_file?: "read" | "write";
            /** @enum {string} */
            statuses?: "read" | "write";
            /** @enum {string} */
            team_discussions?: "read" | "write";
            /** @enum {string} */
            vulnerability_alerts?: "read" | "write";
            /** @enum {string} */
            workflows?: "read" | "write";
          };
          /** @description The slug name of the GitHub app */
          slug?: string;
          /** Format: date-time */
          updated_at: OneOf<[string, null]>;
        };
        before: OneOf<[string, null]>;
        /** Format: uri */
        check_runs_url: string;
        /**
         * @description The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has `completed`.
         * @enum {string|null}
         */
        conclusion:
          | "success"
          | "failure"
          | "neutral"
          | "cancelled"
          | "timed_out"
          | "action_required"
          | "stale"
          | ""
          | "skipped"
          | "startup_failure"
          | null;
        /** Format: date-time */
        created_at: string;
        /** @description The head branch name the changes are on. */
        head_branch: OneOf<[string, null]>;
        /** SimpleCommit */
        head_commit: {
          /**
           * Committer
           * @description Metaproperties for Git author/committer information.
           */
          author: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          };
          /**
           * Committer
           * @description Metaproperties for Git author/committer information.
           */
          committer: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          };
          id: string;
          message: string;
          timestamp: string;
          tree_id: string;
        };
        /** @description The SHA of the head commit that is being checked. */
        head_sha: string;
        id: number;
        latest_check_runs_count: number;
        node_id: string;
        /** @description An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
        pull_requests: {
          base: {
            ref: string;
            /** Repo Ref */
            repo: {
              id: number;
              name: string;
              /** Format: uri */
              url: string;
            };
            sha: string;
          };
          head: {
            ref: string;
            /** Repo Ref */
            repo: {
              id: number;
              name: string;
              /** Format: uri */
              url: string;
            };
            sha: string;
          };
          id: number;
          number: number;
          /** Format: uri */
          url: string;
        }[];
        rerequestable?: boolean;
        runs_rerequestable?: boolean;
        /**
         * @description The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
         * @enum {string|null}
         */
        status:
          | "requested"
          | "in_progress"
          | "completed"
          | "queued"
          | ""
          | "pending"
          | null;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL that points to the check suite API resource.
         */
        url: string;
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** check_suite requested event */
    "webhook-check-suite-requested": {
      /** @enum {string} */
      action: "requested";
      actions_meta?: OneOf<[Record<string, never>, null]>;
      /** @description The [check_suite](https://docs.github.com/github-ae@latest/rest/reference/checks#suites). */
      check_suite: {
        after: OneOf<[string, null]>;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        app: {
          /** Format: date-time */
          created_at: OneOf<[string, null]>;
          description: OneOf<[string, null]>;
          /** @description The list of events for the GitHub app */
          events?: (
            | "branch_protection_rule"
            | "check_run"
            | "check_suite"
            | "code_scanning_alert"
            | "commit_comment"
            | "content_reference"
            | "create"
            | "delete"
            | "deployment"
            | "deployment_review"
            | "deployment_status"
            | "deploy_key"
            | "discussion"
            | "discussion_comment"
            | "fork"
            | "gollum"
            | "issues"
            | "issue_comment"
            | "label"
            | "member"
            | "membership"
            | "milestone"
            | "organization"
            | "org_block"
            | "page_build"
            | "project"
            | "project_card"
            | "project_column"
            | "public"
            | "pull_request"
            | "pull_request_review"
            | "pull_request_review_comment"
            | "push"
            | "registry_package"
            | "release"
            | "repository"
            | "repository_dispatch"
            | "secret_scanning_alert"
            | "star"
            | "status"
            | "team"
            | "team_add"
            | "watch"
            | "workflow_dispatch"
            | "workflow_run"
            | "pull_request_review_thread"
            | "workflow_job"
            | "merge_queue_entry"
            | "security_and_analysis"
            | "secret_scanning_alert_location"
            | "projects_v2_item"
            | "merge_group"
            | "repository_import"
          )[];
          /** Format: uri */
          external_url: OneOf<[string, null]>;
          /** Format: uri */
          html_url: string;
          /** @description Unique identifier of the GitHub app */
          id: OneOf<[number, null]>;
          /** @description The name of the GitHub app */
          name: string;
          node_id: string;
          /** User */
          owner: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** @description The set of permissions for the GitHub app */
          permissions?: {
            /** @enum {string} */
            actions?: "read" | "write";
            /** @enum {string} */
            administration?: "read" | "write";
            /** @enum {string} */
            checks?: "read" | "write";
            /** @enum {string} */
            content_references?: "read" | "write";
            /** @enum {string} */
            contents?: "read" | "write";
            /** @enum {string} */
            deployments?: "read" | "write";
            /** @enum {string} */
            discussions?: "read" | "write";
            /** @enum {string} */
            emails?: "read" | "write";
            /** @enum {string} */
            environments?: "read" | "write";
            /** @enum {string} */
            issues?: "read" | "write";
            /** @enum {string} */
            keys?: "read" | "write";
            /** @enum {string} */
            members?: "read" | "write";
            /** @enum {string} */
            metadata?: "read" | "write";
            /** @enum {string} */
            organization_administration?: "read" | "write";
            /** @enum {string} */
            organization_hooks?: "read" | "write";
            /** @enum {string} */
            organization_packages?: "read" | "write";
            /** @enum {string} */
            organization_plan?: "read" | "write";
            /** @enum {string} */
            organization_projects?: "read" | "write" | "admin";
            /** @enum {string} */
            organization_secrets?: "read" | "write";
            /** @enum {string} */
            organization_self_hosted_runners?: "read" | "write";
            /** @enum {string} */
            organization_user_blocking?: "read" | "write";
            /** @enum {string} */
            packages?: "read" | "write";
            /** @enum {string} */
            pages?: "read" | "write";
            /** @enum {string} */
            pull_requests?: "read" | "write";
            /** @enum {string} */
            repository_hooks?: "read" | "write";
            /** @enum {string} */
            repository_projects?: "read" | "write" | "admin";
            /** @enum {string} */
            secret_scanning_alerts?: "read" | "write";
            /** @enum {string} */
            secrets?: "read" | "write";
            /** @enum {string} */
            security_events?: "read" | "write";
            /** @enum {string} */
            security_scanning_alert?: "read" | "write";
            /** @enum {string} */
            single_file?: "read" | "write";
            /** @enum {string} */
            statuses?: "read" | "write";
            /** @enum {string} */
            team_discussions?: "read" | "write";
            /** @enum {string} */
            vulnerability_alerts?: "read" | "write";
            /** @enum {string} */
            workflows?: "read" | "write";
          };
          /** @description The slug name of the GitHub app */
          slug?: string;
          /** Format: date-time */
          updated_at: OneOf<[string, null]>;
        };
        before: OneOf<[string, null]>;
        /** Format: uri */
        check_runs_url: string;
        /**
         * @description The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`,` neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed.
         * @enum {string|null}
         */
        conclusion:
          | "success"
          | "failure"
          | "neutral"
          | "cancelled"
          | "timed_out"
          | "action_required"
          | "stale"
          | ""
          | "skipped"
          | null;
        /** Format: date-time */
        created_at: string;
        /** @description The head branch name the changes are on. */
        head_branch: OneOf<[string, null]>;
        /** SimpleCommit */
        head_commit: {
          /**
           * Committer
           * @description Metaproperties for Git author/committer information.
           */
          author: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          };
          /**
           * Committer
           * @description Metaproperties for Git author/committer information.
           */
          committer: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          };
          id: string;
          message: string;
          timestamp: string;
          tree_id: string;
        };
        /** @description The SHA of the head commit that is being checked. */
        head_sha: string;
        id: number;
        latest_check_runs_count: number;
        node_id: string;
        /** @description An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
        pull_requests: {
          base: {
            ref: string;
            /** Repo Ref */
            repo: {
              id: number;
              name: string;
              /** Format: uri */
              url: string;
            };
            sha: string;
          };
          head: {
            ref: string;
            /** Repo Ref */
            repo: {
              id: number;
              name: string;
              /** Format: uri */
              url: string;
            };
            sha: string;
          };
          id: number;
          number: number;
          /** Format: uri */
          url: string;
        }[];
        rerequestable?: boolean;
        runs_rerequestable?: boolean;
        /**
         * @description The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
         * @enum {string|null}
         */
        status:
          | "requested"
          | "in_progress"
          | "completed"
          | "queued"
          | ""
          | null;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL that points to the check suite API resource.
         */
        url: string;
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** check_suite rerequested event */
    "webhook-check-suite-rerequested": {
      /** @enum {string} */
      action: "rerequested";
      actions_meta?: OneOf<
        [
          {
            rerun_info?: {
              plan_id?: string;
              job_ids?: string[];
            };
          },
          null
        ]
      >;
      /** @description The [check_suite](https://docs.github.com/github-ae@latest/rest/reference/checks#suites). */
      check_suite: {
        after: OneOf<[string, null]>;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        app: {
          /** Format: date-time */
          created_at: OneOf<[string, null]>;
          description: OneOf<[string, null]>;
          /** @description The list of events for the GitHub app */
          events?: (
            | "branch_protection_rule"
            | "check_run"
            | "check_suite"
            | "code_scanning_alert"
            | "commit_comment"
            | "content_reference"
            | "create"
            | "delete"
            | "deployment"
            | "deployment_review"
            | "deployment_status"
            | "deploy_key"
            | "discussion"
            | "discussion_comment"
            | "fork"
            | "gollum"
            | "issues"
            | "issue_comment"
            | "label"
            | "member"
            | "membership"
            | "milestone"
            | "organization"
            | "org_block"
            | "page_build"
            | "project"
            | "project_card"
            | "project_column"
            | "public"
            | "pull_request"
            | "pull_request_review"
            | "pull_request_review_comment"
            | "push"
            | "registry_package"
            | "release"
            | "repository"
            | "repository_dispatch"
            | "secret_scanning_alert"
            | "star"
            | "status"
            | "team"
            | "team_add"
            | "watch"
            | "workflow_dispatch"
            | "workflow_run"
            | "pull_request_review_thread"
            | "merge_queue_entry"
            | "workflow_job"
          )[];
          /** Format: uri */
          external_url: OneOf<[string, null]>;
          /** Format: uri */
          html_url: string;
          /** @description Unique identifier of the GitHub app */
          id: OneOf<[number, null]>;
          /** @description The name of the GitHub app */
          name: string;
          node_id: string;
          /** User */
          owner: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** @description The set of permissions for the GitHub app */
          permissions?: {
            /** @enum {string} */
            actions?: "read" | "write";
            /** @enum {string} */
            administration?: "read" | "write";
            /** @enum {string} */
            checks?: "read" | "write";
            /** @enum {string} */
            content_references?: "read" | "write";
            /** @enum {string} */
            contents?: "read" | "write";
            /** @enum {string} */
            deployments?: "read" | "write";
            /** @enum {string} */
            discussions?: "read" | "write";
            /** @enum {string} */
            emails?: "read" | "write";
            /** @enum {string} */
            environments?: "read" | "write";
            /** @enum {string} */
            issues?: "read" | "write";
            /** @enum {string} */
            keys?: "read" | "write";
            /** @enum {string} */
            members?: "read" | "write";
            /** @enum {string} */
            metadata?: "read" | "write";
            /** @enum {string} */
            organization_administration?: "read" | "write";
            /** @enum {string} */
            organization_hooks?: "read" | "write";
            /** @enum {string} */
            organization_packages?: "read" | "write";
            /** @enum {string} */
            organization_plan?: "read" | "write";
            /** @enum {string} */
            organization_projects?: "read" | "write" | "admin";
            /** @enum {string} */
            organization_secrets?: "read" | "write";
            /** @enum {string} */
            organization_self_hosted_runners?: "read" | "write";
            /** @enum {string} */
            organization_user_blocking?: "read" | "write";
            /** @enum {string} */
            packages?: "read" | "write";
            /** @enum {string} */
            pages?: "read" | "write";
            /** @enum {string} */
            pull_requests?: "read" | "write";
            /** @enum {string} */
            repository_hooks?: "read" | "write";
            /** @enum {string} */
            repository_projects?: "read" | "write" | "admin";
            /** @enum {string} */
            secret_scanning_alerts?: "read" | "write";
            /** @enum {string} */
            secrets?: "read" | "write";
            /** @enum {string} */
            security_events?: "read" | "write";
            /** @enum {string} */
            security_scanning_alert?: "read" | "write";
            /** @enum {string} */
            single_file?: "read" | "write";
            /** @enum {string} */
            statuses?: "read" | "write";
            /** @enum {string} */
            team_discussions?: "read" | "write";
            /** @enum {string} */
            vulnerability_alerts?: "read" | "write";
            /** @enum {string} */
            workflows?: "read" | "write";
          };
          /** @description The slug name of the GitHub app */
          slug?: string;
          /** Format: date-time */
          updated_at: OneOf<[string, null]>;
        };
        before: OneOf<[string, null]>;
        /** Format: uri */
        check_runs_url: string;
        /**
         * @description The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`,` neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed.
         * @enum {string|null}
         */
        conclusion:
          | "success"
          | "failure"
          | "neutral"
          | "cancelled"
          | "timed_out"
          | "action_required"
          | "stale"
          | ""
          | null;
        /** Format: date-time */
        created_at: string;
        /** @description The head branch name the changes are on. */
        head_branch: OneOf<[string, null]>;
        /** SimpleCommit */
        head_commit: {
          /**
           * Committer
           * @description Metaproperties for Git author/committer information.
           */
          author: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          };
          /**
           * Committer
           * @description Metaproperties for Git author/committer information.
           */
          committer: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          };
          id: string;
          message: string;
          timestamp: string;
          tree_id: string;
        };
        /** @description The SHA of the head commit that is being checked. */
        head_sha: string;
        id: number;
        latest_check_runs_count: number;
        node_id: string;
        /** @description An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
        pull_requests: {
          base: {
            ref: string;
            /** Repo Ref */
            repo: {
              id: number;
              name: string;
              /** Format: uri */
              url: string;
            };
            sha: string;
          };
          head: {
            ref: string;
            /** Repo Ref */
            repo: {
              id: number;
              name: string;
              /** Format: uri */
              url: string;
            };
            sha: string;
          };
          id: number;
          number: number;
          /** Format: uri */
          url: string;
        }[];
        rerequestable?: boolean;
        runs_rerequestable?: boolean;
        /**
         * @description The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
         * @enum {string|null}
         */
        status:
          | "requested"
          | "in_progress"
          | "completed"
          | "queued"
          | ""
          | null;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL that points to the check suite API resource.
         */
        url: string;
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** code_scanning_alert appeared_in_branch event */
    "webhook-code-scanning-alert-appeared-in-branch": {
      /** @enum {string} */
      action: "appeared_in_branch";
      /** @description The code scanning alert involved in the event. */
      alert: {
        /**
         * Format: date-time
         * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
         */
        created_at: string;
        /**
         * Format: date-time
         * @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        dismissed_at: OneOf<[string, null]>;
        /** User */
        dismissed_by: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * @description The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
         * @enum {string|null}
         */
        dismissed_reason:
          | "false positive"
          | "won't fix"
          | "used in tests"
          | ""
          | null;
        /**
         * Format: uri
         * @description The GitHub URL of the alert resource.
         */
        html_url: string;
        /** Alert Instance */
        most_recent_instance?: OneOf<
          [
            {
              /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
              analysis_key: string;
              /** @description Identifies the configuration under which the analysis was executed. */
              category?: string;
              classifications?: string[];
              commit_sha?: string;
              /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
              environment: string;
              location?: {
                end_column?: number;
                end_line?: number;
                path?: string;
                start_column?: number;
                start_line?: number;
              };
              message?: {
                text?: string;
              };
              /** @description The full Git reference, formatted as `refs/heads/<branch name>`. */
              ref: string;
              /**
               * @description State of a code scanning alert.
               * @enum {string}
               */
              state: "open" | "dismissed" | "fixed";
            },
            null
          ]
        >;
        /** @description The code scanning alert number. */
        number: number;
        rule: {
          /** @description A short description of the rule used to detect the alert. */
          description: string;
          /** @description A unique identifier for the rule used to detect the alert. */
          id: string;
          /**
           * @description The severity of the alert.
           * @enum {string|null}
           */
          severity: "none" | "note" | "warning" | "error" | "" | null;
        };
        /**
         * @description State of a code scanning alert.
         * @enum {string}
         */
        state: "open" | "dismissed" | "fixed";
        tool: {
          /** @description The name of the tool used to generate the code scanning analysis alert. */
          name: string;
          /** @description The version of the tool used to detect the alert. */
          version: OneOf<[string, null]>;
        };
        /** Format: uri */
        url: string;
      };
      /** @description The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
      commit_oid: string;
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
      ref: string;
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** code_scanning_alert closed_by_user event */
    "webhook-code-scanning-alert-closed-by-user": {
      /** @enum {string} */
      action: "closed_by_user";
      /** @description The code scanning alert involved in the event. */
      alert: {
        /**
         * Format: date-time
         * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
         */
        created_at: string;
        /**
         * Format: date-time
         * @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        dismissed_at: string;
        /** User */
        dismissed_by: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * @description The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
         * @enum {string|null}
         */
        dismissed_reason:
          | "false positive"
          | "won't fix"
          | "used in tests"
          | ""
          | null;
        /**
         * Format: uri
         * @description The GitHub URL of the alert resource.
         */
        html_url: string;
        /** Alert Instance */
        most_recent_instance?: OneOf<
          [
            {
              /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
              analysis_key: string;
              /** @description Identifies the configuration under which the analysis was executed. */
              category?: string;
              classifications?: string[];
              commit_sha?: string;
              /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
              environment: string;
              location?: {
                end_column?: number;
                end_line?: number;
                path?: string;
                start_column?: number;
                start_line?: number;
              };
              message?: {
                text?: string;
              };
              /** @description The full Git reference, formatted as `refs/heads/<branch name>`. */
              ref: string;
              /**
               * @description State of a code scanning alert.
               * @enum {string}
               */
              state: "open" | "dismissed" | "fixed";
            },
            null
          ]
        >;
        /** @description The code scanning alert number. */
        number: number;
        rule: {
          /** @description A short description of the rule used to detect the alert. */
          description: string;
          full_description?: string;
          help?: OneOf<[string, null]>;
          /** @description A link to the documentation for the rule used to detect the alert. */
          help_uri?: OneOf<[string, null]>;
          /** @description A unique identifier for the rule used to detect the alert. */
          id: string;
          name?: string;
          /**
           * @description The severity of the alert.
           * @enum {string|null}
           */
          severity: "none" | "note" | "warning" | "error" | "" | null;
          tags?: OneOf<[string[], null]>;
        };
        /**
         * @description State of a code scanning alert.
         * @enum {string}
         */
        state: "dismissed" | "fixed";
        tool: {
          guid?: OneOf<[string, null]>;
          /** @description The name of the tool used to generate the code scanning analysis alert. */
          name: string;
          /** @description The version of the tool used to detect the alert. */
          version: OneOf<[string, null]>;
        };
        /** Format: uri */
        url: string;
      };
      /** @description The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
      commit_oid: string;
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
      ref: string;
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** code_scanning_alert created event */
    "webhook-code-scanning-alert-created": {
      /** @enum {string} */
      action: "created";
      /** @description The code scanning alert involved in the event. */
      alert: {
        /**
         * Format: date-time
         * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
         */
        created_at: OneOf<[string, null]>;
        /** @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
        dismissed_at: null;
        dismissed_by: null;
        dismissed_comment?: components["schemas"]["code-scanning-alert-dismissed-comment"];
        /** @description The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
        dismissed_reason: null;
        fixed_at?: null;
        /**
         * Format: uri
         * @description The GitHub URL of the alert resource.
         */
        html_url: string;
        instances_url?: string;
        /** Alert Instance */
        most_recent_instance?: OneOf<
          [
            {
              /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
              analysis_key: string;
              /** @description Identifies the configuration under which the analysis was executed. */
              category?: string;
              classifications?: string[];
              commit_sha?: string;
              /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
              environment: string;
              location?: {
                end_column?: number;
                end_line?: number;
                path?: string;
                start_column?: number;
                start_line?: number;
              };
              message?: {
                text?: string;
              };
              /** @description The full Git reference, formatted as `refs/heads/<branch name>`. */
              ref: string;
              /**
               * @description State of a code scanning alert.
               * @enum {string}
               */
              state: "open" | "dismissed" | "fixed";
            },
            null
          ]
        >;
        /** @description The code scanning alert number. */
        number: number;
        rule: {
          /** @description A short description of the rule used to detect the alert. */
          description: string;
          full_description?: string;
          help?: OneOf<[string, null]>;
          /** @description A link to the documentation for the rule used to detect the alert. */
          help_uri?: OneOf<[string, null]>;
          /** @description A unique identifier for the rule used to detect the alert. */
          id: string;
          name?: string;
          /**
           * @description The severity of the alert.
           * @enum {string|null}
           */
          severity: "none" | "note" | "warning" | "error" | "" | null;
          tags?: OneOf<[string[], null]>;
        };
        /**
         * @description State of a code scanning alert.
         * @enum {string}
         */
        state: "open" | "dismissed";
        tool: OneOf<
          [
            {
              guid?: OneOf<[string, null]>;
              /** @description The name of the tool used to generate the code scanning analysis alert. */
              name: string;
              /** @description The version of the tool used to detect the alert. */
              version: OneOf<[string, null]>;
            },
            null
          ]
        >;
        updated_at?: OneOf<[string, null]>;
        /** Format: uri */
        url: string;
      };
      /** @description The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
      commit_oid: string;
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
      ref: string;
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** code_scanning_alert fixed event */
    "webhook-code-scanning-alert-fixed": {
      /** @enum {string} */
      action: "fixed";
      /** @description The code scanning alert involved in the event. */
      alert: {
        /**
         * Format: date-time
         * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
         */
        created_at: string;
        /**
         * Format: date-time
         * @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        dismissed_at: OneOf<[string, null]>;
        /** User */
        dismissed_by: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * @description The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
         * @enum {string|null}
         */
        dismissed_reason:
          | "false positive"
          | "won't fix"
          | "used in tests"
          | ""
          | null;
        /**
         * Format: uri
         * @description The GitHub URL of the alert resource.
         */
        html_url: string;
        /** Format: uri */
        instances_url?: string;
        /** Alert Instance */
        most_recent_instance?: OneOf<
          [
            {
              /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
              analysis_key: string;
              /** @description Identifies the configuration under which the analysis was executed. */
              category?: string;
              classifications?: string[];
              commit_sha?: string;
              /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
              environment: string;
              location?: {
                end_column?: number;
                end_line?: number;
                path?: string;
                start_column?: number;
                start_line?: number;
              };
              message?: {
                text?: string;
              };
              /** @description The full Git reference, formatted as `refs/heads/<branch name>`. */
              ref: string;
              /**
               * @description State of a code scanning alert.
               * @enum {string}
               */
              state: "open" | "dismissed" | "fixed";
            },
            null
          ]
        >;
        /** @description The code scanning alert number. */
        number: number;
        rule: {
          /** @description A short description of the rule used to detect the alert. */
          description: string;
          full_description?: string;
          help?: OneOf<[string, null]>;
          /** @description A link to the documentation for the rule used to detect the alert. */
          help_uri?: OneOf<[string, null]>;
          /** @description A unique identifier for the rule used to detect the alert. */
          id: string;
          name?: string;
          /**
           * @description The severity of the alert.
           * @enum {string|null}
           */
          severity: "none" | "note" | "warning" | "error" | "" | null;
          tags?: OneOf<[string[], null]>;
        };
        /**
         * @description State of a code scanning alert.
         * @enum {string}
         */
        state: "fixed";
        tool: {
          guid?: OneOf<[string, null]>;
          /** @description The name of the tool used to generate the code scanning analysis alert. */
          name: string;
          /** @description The version of the tool used to detect the alert. */
          version: OneOf<[string, null]>;
        };
        /** Format: uri */
        url: string;
      };
      /** @description The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
      commit_oid: string;
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
      ref: string;
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** code_scanning_alert reopened event */
    "webhook-code-scanning-alert-reopened": {
      /** @enum {string} */
      action: "reopened";
      /** @description The code scanning alert involved in the event. */
      alert: OneOf<
        [
          {
            /**
             * Format: date-time
             * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
             */
            created_at: string;
            /** @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
            dismissed_at: OneOf<[string, null]>;
            dismissed_by: OneOf<[Record<string, never>, null]>;
            /** @description The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
            dismissed_reason: OneOf<[string, null]>;
            /**
             * Format: uri
             * @description The GitHub URL of the alert resource.
             */
            html_url: string;
            /** Alert Instance */
            most_recent_instance?: OneOf<
              [
                {
                  /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
                  analysis_key: string;
                  /** @description Identifies the configuration under which the analysis was executed. */
                  category?: string;
                  classifications?: string[];
                  commit_sha?: string;
                  /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
                  environment: string;
                  location?: {
                    end_column?: number;
                    end_line?: number;
                    path?: string;
                    start_column?: number;
                    start_line?: number;
                  };
                  message?: {
                    text?: string;
                  };
                  /** @description The full Git reference, formatted as `refs/heads/<branch name>`. */
                  ref: string;
                  /**
                   * @description State of a code scanning alert.
                   * @enum {string}
                   */
                  state: "open" | "dismissed" | "fixed";
                },
                null
              ]
            >;
            /** @description The code scanning alert number. */
            number: number;
            rule: {
              /** @description A short description of the rule used to detect the alert. */
              description: string;
              full_description?: string;
              help?: OneOf<[string, null]>;
              /** @description A link to the documentation for the rule used to detect the alert. */
              help_uri?: OneOf<[string, null]>;
              /** @description A unique identifier for the rule used to detect the alert. */
              id: string;
              name?: string;
              /**
               * @description The severity of the alert.
               * @enum {string|null}
               */
              severity: "none" | "note" | "warning" | "error" | "" | null;
              tags?: OneOf<[string[], null]>;
            };
            /**
             * @description State of a code scanning alert.
             * @enum {string}
             */
            state: "open" | "dismissed" | "fixed";
            tool: {
              guid?: OneOf<[string, null]>;
              /** @description The name of the tool used to generate the code scanning analysis alert. */
              name: string;
              /** @description The version of the tool used to detect the alert. */
              version: OneOf<[string, null]>;
            };
            /** Format: uri */
            url: string;
          },
          null
        ]
      >;
      /** @description The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
      commit_oid: OneOf<[string, null]>;
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
      ref: OneOf<[string, null]>;
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** code_scanning_alert reopened_by_user event */
    "webhook-code-scanning-alert-reopened-by-user": {
      /** @enum {string} */
      action: "reopened_by_user";
      /** @description The code scanning alert involved in the event. */
      alert: {
        /**
         * Format: date-time
         * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
         */
        created_at: string;
        /** @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
        dismissed_at: null;
        dismissed_by: null;
        /** @description The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
        dismissed_reason: null;
        /**
         * Format: uri
         * @description The GitHub URL of the alert resource.
         */
        html_url: string;
        /** Alert Instance */
        most_recent_instance?: OneOf<
          [
            {
              /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
              analysis_key: string;
              /** @description Identifies the configuration under which the analysis was executed. */
              category?: string;
              classifications?: string[];
              commit_sha?: string;
              /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
              environment: string;
              location?: {
                end_column?: number;
                end_line?: number;
                path?: string;
                start_column?: number;
                start_line?: number;
              };
              message?: {
                text?: string;
              };
              /** @description The full Git reference, formatted as `refs/heads/<branch name>`. */
              ref: string;
              /**
               * @description State of a code scanning alert.
               * @enum {string}
               */
              state: "open" | "dismissed" | "fixed";
            },
            null
          ]
        >;
        /** @description The code scanning alert number. */
        number: number;
        rule: {
          /** @description A short description of the rule used to detect the alert. */
          description: string;
          /** @description A unique identifier for the rule used to detect the alert. */
          id: string;
          /**
           * @description The severity of the alert.
           * @enum {string|null}
           */
          severity: "none" | "note" | "warning" | "error" | "" | null;
        };
        /**
         * @description State of a code scanning alert.
         * @enum {string}
         */
        state: "open" | "fixed";
        tool: {
          /** @description The name of the tool used to generate the code scanning analysis alert. */
          name: string;
          /** @description The version of the tool used to detect the alert. */
          version: OneOf<[string, null]>;
        };
        /** Format: uri */
        url: string;
      };
      /** @description The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
      commit_oid: string;
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
      ref: string;
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** commit_comment created event */
    "webhook-commit-comment-created": {
      /**
       * @description The action performed. Can be `created`.
       * @enum {string}
       */
      action: "created";
      /** @description The [commit comment](https://docs.github.com/github-ae@latest/rest/reference/repos#get-a-commit-comment) resource. */
      comment: {
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description The text of the comment. */
        body: string;
        /** @description The SHA of the commit to which the comment applies. */
        commit_id: string;
        created_at: string;
        /** Format: uri */
        html_url: string;
        /** @description The ID of the commit comment. */
        id: number;
        /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
        line: OneOf<[number, null]>;
        /** @description The node ID of the commit comment. */
        node_id: string;
        /** @description The relative path of the file to which the comment applies. */
        path: OneOf<[string, null]>;
        /** @description The line index in the diff to which the comment applies. */
        position: OneOf<[number, null]>;
        /** Reactions */
        reactions?: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** create event */
    "webhook-create": {
      /** @description The repository's current description. */
      description: OneOf<[string, null]>;
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The name of the repository's default branch (usually `main`). */
      master_branch: string;
      organization?: components["schemas"]["organization-simple"];
      /** @description The pusher type for the event. Can be either `user` or a deploy key. */
      pusher_type: string;
      /** @description The [`git ref`](https://docs.github.com/github-ae@latest/rest/reference/git#get-a-reference) resource. */
      ref: string;
      /**
       * @description The type of Git ref object created in the repository.
       * @enum {string}
       */
      ref_type: "tag" | "branch";
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** delete event */
    "webhook-delete": {
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description The pusher type for the event. Can be either `user` or a deploy key. */
      pusher_type: string;
      /** @description The [`git ref`](https://docs.github.com/github-ae@latest/rest/reference/git#get-a-reference) resource. */
      ref: string;
      /**
       * @description The type of Git ref object deleted in the repository.
       * @enum {string}
       */
      ref_type: "tag" | "branch";
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** Dependabot alert created event */
    "webhook-dependabot-alert-created": {
      /** @enum {string} */
      action: "created";
      alert: components["schemas"]["dependabot-alert"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      enterprise?: components["schemas"]["enterprise"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** Dependabot alert dismissed event */
    "webhook-dependabot-alert-dismissed": {
      /** @enum {string} */
      action: "dismissed";
      alert: components["schemas"]["dependabot-alert"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      enterprise?: components["schemas"]["enterprise"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** Dependabot alert fixed event */
    "webhook-dependabot-alert-fixed": {
      /** @enum {string} */
      action: "fixed";
      alert: components["schemas"]["dependabot-alert"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      enterprise?: components["schemas"]["enterprise"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** Dependabot alert reintroduced event */
    "webhook-dependabot-alert-reintroduced": {
      /** @enum {string} */
      action: "reintroduced";
      alert: components["schemas"]["dependabot-alert"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      enterprise?: components["schemas"]["enterprise"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** Dependabot alert reopened event */
    "webhook-dependabot-alert-reopened": {
      /** @enum {string} */
      action: "reopened";
      alert: components["schemas"]["dependabot-alert"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      enterprise?: components["schemas"]["enterprise"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** deploy_key created event */
    "webhook-deploy-key-created": {
      /** @enum {string} */
      action: "created";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The [`deploy key`](https://docs.github.com/github-ae@latest/rest/reference/deployments#get-a-deploy-key) resource. */
      key: {
        added_by?: OneOf<[string, null]>;
        created_at: string;
        id: number;
        key: string;
        last_used?: OneOf<[string, null]>;
        read_only: boolean;
        title: string;
        /** Format: uri */
        url: string;
        verified: boolean;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** deploy_key deleted event */
    "webhook-deploy-key-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The [`deploy key`](https://docs.github.com/github-ae@latest/rest/reference/deployments#get-a-deploy-key) resource. */
      key: {
        added_by?: OneOf<[string, null]>;
        created_at: string;
        id: number;
        key: string;
        last_used?: OneOf<[string, null]>;
        read_only: boolean;
        title: string;
        /** Format: uri */
        url: string;
        verified: boolean;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** deployment created event */
    "webhook-deployment-created": {
      /** @enum {string} */
      action: "created";
      /**
       * Deployment
       * @description The [deployment](https://docs.github.com/github-ae@latest/rest/reference/deployments#list-deployments).
       */
      deployment: {
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        description: OneOf<[string, null]>;
        environment: string;
        id: number;
        node_id: string;
        original_environment: string;
        payload: Record<string, never> | string;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "workflow_job"
                | "pull_request_review_thread"
                | "merge_queue_entry"
                | "secret_scanning_alert_location"
                | "merge_group"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        production_environment?: boolean;
        ref: string;
        /** Format: uri */
        repository_url: string;
        sha: string;
        /** Format: uri */
        statuses_url: string;
        task: string;
        transient_environment?: boolean;
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      /** Workflow */
      workflow: OneOf<
        [
          {
            /** Format: uri */
            badge_url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: uri */
            html_url: string;
            id: number;
            name: string;
            node_id: string;
            path: string;
            state: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
          },
          null
        ]
      >;
      /** Deployment Workflow Run */
      workflow_run: OneOf<
        [
          {
            /** User */
            actor: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            artifacts_url?: string;
            cancel_url?: string;
            check_suite_id: number;
            check_suite_node_id: string;
            check_suite_url?: string;
            /** @enum {string|null} */
            conclusion:
              | "success"
              | "failure"
              | "neutral"
              | "cancelled"
              | "timed_out"
              | "action_required"
              | "stale"
              | ""
              | null;
            /** Format: date-time */
            created_at: string;
            display_title: string;
            event: string;
            head_branch: string;
            head_commit?: null;
            head_repository?: {
              archive_url?: string;
              assignees_url?: string;
              blobs_url?: string;
              branches_url?: string;
              collaborators_url?: string;
              comments_url?: string;
              commits_url?: string;
              compare_url?: string;
              contents_url?: string;
              contributors_url?: string;
              deployments_url?: string;
              description?: null;
              downloads_url?: string;
              events_url?: string;
              fork?: boolean;
              forks_url?: string;
              full_name?: string;
              git_commits_url?: string;
              git_refs_url?: string;
              git_tags_url?: string;
              hooks_url?: string;
              html_url?: string;
              id?: number;
              issue_comment_url?: string;
              issue_events_url?: string;
              issues_url?: string;
              keys_url?: string;
              labels_url?: string;
              languages_url?: string;
              merges_url?: string;
              milestones_url?: string;
              name?: string;
              node_id?: string;
              notifications_url?: string;
              owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: number;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
              };
              private?: boolean;
              pulls_url?: string;
              releases_url?: string;
              stargazers_url?: string;
              statuses_url?: string;
              subscribers_url?: string;
              subscription_url?: string;
              tags_url?: string;
              teams_url?: string;
              trees_url?: string;
              url?: string;
            };
            head_sha: string;
            /** Format: uri */
            html_url: string;
            id: number;
            jobs_url?: string;
            logs_url?: string;
            name: string;
            node_id: string;
            path: string;
            previous_attempt_url?: null;
            pull_requests: {
              base: {
                ref: string;
                /** Repo Ref */
                repo: {
                  id: number;
                  name: string;
                  /** Format: uri */
                  url: string;
                };
                sha: string;
              };
              head: {
                ref: string;
                /** Repo Ref */
                repo: {
                  id: number;
                  name: string;
                  /** Format: uri */
                  url: string;
                };
                sha: string;
              };
              id: number;
              number: number;
              /** Format: uri */
              url: string;
            }[];
            referenced_workflows?: OneOf<
              [
                {
                  path: string;
                  ref?: string;
                  sha: string;
                }[],
                null
              ]
            >;
            repository?: {
              archive_url?: string;
              assignees_url?: string;
              blobs_url?: string;
              branches_url?: string;
              collaborators_url?: string;
              comments_url?: string;
              commits_url?: string;
              compare_url?: string;
              contents_url?: string;
              contributors_url?: string;
              deployments_url?: string;
              description?: null;
              downloads_url?: string;
              events_url?: string;
              fork?: boolean;
              forks_url?: string;
              full_name?: string;
              git_commits_url?: string;
              git_refs_url?: string;
              git_tags_url?: string;
              hooks_url?: string;
              html_url?: string;
              id?: number;
              issue_comment_url?: string;
              issue_events_url?: string;
              issues_url?: string;
              keys_url?: string;
              labels_url?: string;
              languages_url?: string;
              merges_url?: string;
              milestones_url?: string;
              name?: string;
              node_id?: string;
              notifications_url?: string;
              owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: number;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
              };
              private?: boolean;
              pulls_url?: string;
              releases_url?: string;
              stargazers_url?: string;
              statuses_url?: string;
              subscribers_url?: string;
              subscription_url?: string;
              tags_url?: string;
              teams_url?: string;
              trees_url?: string;
              url?: string;
            };
            rerun_url?: string;
            run_attempt: number;
            run_number: number;
            /** Format: date-time */
            run_started_at: string;
            /** @enum {string} */
            status:
              | "requested"
              | "in_progress"
              | "completed"
              | "queued"
              | "waiting"
              | "pending";
            /** User */
            triggering_actor?: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            workflow_id: number;
            workflow_url?: string;
          },
          null
        ]
      >;
    };
    /** deployment_status created event */
    "webhook-deployment-status-created": {
      /** @enum {string} */
      action: "created";
      check_run?: OneOf<
        [
          {
            /** Format: date-time */
            completed_at: OneOf<[string, null]>;
            /**
             * @description The result of the completed check run. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed.
             * @enum {string|null}
             */
            conclusion:
              | "success"
              | "failure"
              | "neutral"
              | "cancelled"
              | "timed_out"
              | "action_required"
              | "stale"
              | "skipped"
              | ""
              | null;
            /** Format: uri */
            details_url: string;
            external_id: string;
            /** @description The SHA of the commit that is being checked. */
            head_sha: string;
            /** Format: uri */
            html_url: string;
            /** @description The id of the check. */
            id: number;
            /** @description The name of the check run. */
            name: string;
            node_id: string;
            /** Format: date-time */
            started_at: string;
            /**
             * @description The current status of the check run. Can be `queued`, `in_progress`, or `completed`.
             * @enum {string}
             */
            status:
              | "queued"
              | "in_progress"
              | "completed"
              | "waiting"
              | "pending";
            /** Format: uri */
            url: string;
          },
          null
        ]
      >;
      /**
       * Deployment
       * @description The [deployment](https://docs.github.com/github-ae@latest/rest/reference/deployments#list-deployments).
       */
      deployment: {
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        description: OneOf<[string, null]>;
        environment: string;
        id: number;
        node_id: string;
        original_environment: string;
        payload: string | Record<string, never>;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "merge_queue_entry"
                | "workflow_job"
                | "pull_request_review_thread"
                | "secret_scanning_alert_location"
                | "merge_group"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        production_environment?: boolean;
        ref: string;
        /** Format: uri */
        repository_url: string;
        sha: string;
        /** Format: uri */
        statuses_url: string;
        task: string;
        transient_environment?: boolean;
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      /** @description The [deployment status](https://docs.github.com/github-ae@latest/rest/reference/deployments#list-deployment-statuses). */
      deployment_status: {
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** Format: uri */
        deployment_url: string;
        /** @description The optional human-readable description added to the status. */
        description: string;
        environment: string;
        /** Format: uri */
        environment_url?: string;
        id: number;
        /** Format: uri */
        log_url?: string;
        node_id: string;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "pull_request_review_thread"
                | "merge_queue_entry"
                | "workflow_job"
                | "merge_group"
                | "secret_scanning_alert_location"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        /** Format: uri */
        repository_url: string;
        /** @description The new state. Can be `pending`, `success`, `failure`, or `error`. */
        state: string;
        /** @description The optional link added to the status. */
        target_url: string;
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      /** Workflow */
      workflow?: OneOf<
        [
          {
            /** Format: uri */
            badge_url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: uri */
            html_url: string;
            id: number;
            name: string;
            node_id: string;
            path: string;
            state: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
          },
          null
        ]
      >;
      /** Deployment Workflow Run */
      workflow_run?: OneOf<
        [
          {
            /** User */
            actor: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            artifacts_url?: string;
            cancel_url?: string;
            check_suite_id: number;
            check_suite_node_id: string;
            check_suite_url?: string;
            /** @enum {string|null} */
            conclusion:
              | "success"
              | "failure"
              | "neutral"
              | "cancelled"
              | "timed_out"
              | "action_required"
              | "stale"
              | ""
              | "startup_failure"
              | null;
            /** Format: date-time */
            created_at: string;
            display_title: string;
            event: string;
            head_branch: string;
            head_commit?: null;
            head_repository?: {
              archive_url?: string;
              assignees_url?: string;
              blobs_url?: string;
              branches_url?: string;
              collaborators_url?: string;
              comments_url?: string;
              commits_url?: string;
              compare_url?: string;
              contents_url?: string;
              contributors_url?: string;
              deployments_url?: string;
              description?: null;
              downloads_url?: string;
              events_url?: string;
              fork?: boolean;
              forks_url?: string;
              full_name?: string;
              git_commits_url?: string;
              git_refs_url?: string;
              git_tags_url?: string;
              hooks_url?: string;
              html_url?: string;
              id?: number;
              issue_comment_url?: string;
              issue_events_url?: string;
              issues_url?: string;
              keys_url?: string;
              labels_url?: string;
              languages_url?: string;
              merges_url?: string;
              milestones_url?: string;
              name?: string;
              node_id?: string;
              notifications_url?: string;
              owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: number;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
              };
              private?: boolean;
              pulls_url?: string;
              releases_url?: string;
              stargazers_url?: string;
              statuses_url?: string;
              subscribers_url?: string;
              subscription_url?: string;
              tags_url?: string;
              teams_url?: string;
              trees_url?: string;
              url?: string;
            };
            head_sha: string;
            /** Format: uri */
            html_url: string;
            id: number;
            jobs_url?: string;
            logs_url?: string;
            name: string;
            node_id: string;
            path: string;
            previous_attempt_url?: null;
            pull_requests: {
              base: {
                ref: string;
                /** Repo Ref */
                repo: {
                  id: number;
                  name: string;
                  /** Format: uri */
                  url: string;
                };
                sha: string;
              };
              head: {
                ref: string;
                /** Repo Ref */
                repo: {
                  id: number;
                  name: string;
                  /** Format: uri */
                  url: string;
                };
                sha: string;
              };
              id: number;
              number: number;
              /** Format: uri */
              url: string;
            }[];
            referenced_workflows?: OneOf<
              [
                {
                  path: string;
                  ref?: string;
                  sha: string;
                }[],
                null
              ]
            >;
            repository?: {
              archive_url?: string;
              assignees_url?: string;
              blobs_url?: string;
              branches_url?: string;
              collaborators_url?: string;
              comments_url?: string;
              commits_url?: string;
              compare_url?: string;
              contents_url?: string;
              contributors_url?: string;
              deployments_url?: string;
              description?: null;
              downloads_url?: string;
              events_url?: string;
              fork?: boolean;
              forks_url?: string;
              full_name?: string;
              git_commits_url?: string;
              git_refs_url?: string;
              git_tags_url?: string;
              hooks_url?: string;
              html_url?: string;
              id?: number;
              issue_comment_url?: string;
              issue_events_url?: string;
              issues_url?: string;
              keys_url?: string;
              labels_url?: string;
              languages_url?: string;
              merges_url?: string;
              milestones_url?: string;
              name?: string;
              node_id?: string;
              notifications_url?: string;
              owner?: {
                avatar_url?: string;
                events_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                gravatar_id?: string;
                html_url?: string;
                id?: number;
                login?: string;
                node_id?: string;
                organizations_url?: string;
                received_events_url?: string;
                repos_url?: string;
                site_admin?: boolean;
                starred_url?: string;
                subscriptions_url?: string;
                type?: string;
                url?: string;
              };
              private?: boolean;
              pulls_url?: string;
              releases_url?: string;
              stargazers_url?: string;
              statuses_url?: string;
              subscribers_url?: string;
              subscription_url?: string;
              tags_url?: string;
              teams_url?: string;
              trees_url?: string;
              url?: string;
            };
            rerun_url?: string;
            run_attempt: number;
            run_number: number;
            /** Format: date-time */
            run_started_at: string;
            /** @enum {string} */
            status:
              | "requested"
              | "in_progress"
              | "completed"
              | "queued"
              | "waiting"
              | "pending";
            /** User */
            triggering_actor: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            workflow_id: number;
            workflow_url?: string;
          },
          null
        ]
      >;
    };
    /** discussion answered event */
    "webhook-discussion-answered": {
      /** @enum {string} */
      action: "answered";
      answer: {
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        body: string;
        child_comment_count: number;
        /** Format: date-time */
        created_at: string;
        discussion_id: number;
        html_url: string;
        id: number;
        node_id: string;
        parent_id: null;
        /** Reactions */
        reactions?: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        repository_url: string;
        /** Format: date-time */
        updated_at: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      discussion: components["schemas"]["discussion"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** discussion category changed event */
    "webhook-discussion-category-changed": {
      /** @enum {string} */
      action: "category_changed";
      changes: {
        category: {
          from: {
            /** Format: date-time */
            created_at: string;
            description: string;
            emoji: string;
            id: number;
            is_answerable: boolean;
            name: string;
            node_id?: string;
            repository_id: number;
            slug: string;
            updated_at: string;
          };
        };
      };
      discussion: components["schemas"]["discussion"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** discussion_comment created event */
    "webhook-discussion-comment-created": {
      /** @enum {string} */
      action: "created";
      comment: {
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        body: string;
        child_comment_count: number;
        created_at: string;
        discussion_id: number;
        html_url: string;
        id: number;
        node_id: string;
        parent_id: OneOf<[number, null]>;
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        repository_url: string;
        updated_at: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      discussion: components["schemas"]["discussion"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** discussion_comment deleted event */
    "webhook-discussion-comment-deleted": {
      /** @enum {string} */
      action: "deleted";
      comment: {
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        body: string;
        child_comment_count: number;
        created_at: string;
        discussion_id: number;
        html_url: string;
        id: number;
        node_id: string;
        parent_id: OneOf<[number, null]>;
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        repository_url: string;
        updated_at: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      discussion: components["schemas"]["discussion"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** discussion_comment edited event */
    "webhook-discussion-comment-edited": {
      /** @enum {string} */
      action: "edited";
      changes: {
        body: {
          from: string;
        };
      };
      comment: {
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        body: string;
        child_comment_count: number;
        created_at: string;
        discussion_id: number;
        html_url: string;
        id: number;
        node_id: string;
        parent_id: OneOf<[number, null]>;
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        repository_url: string;
        updated_at: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      discussion: components["schemas"]["discussion"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** discussion created event */
    "webhook-discussion-created": {
      /** @enum {string} */
      action: "created";
      discussion: {
        active_lock_reason: OneOf<[string, null]>;
        answer_chosen_at: OneOf<[string, null]>;
        /** User */
        answer_chosen_by: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        answer_html_url: OneOf<[string, null]>;
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        body: OneOf<[string, null]>;
        category: {
          /** Format: date-time */
          created_at: string;
          description: string;
          emoji: string;
          id: number;
          is_answerable: boolean;
          name: string;
          node_id?: string;
          repository_id: number;
          slug: string;
          updated_at: string;
        };
        comments: number;
        /** Format: date-time */
        created_at: string;
        html_url: string;
        id: number;
        locked: boolean;
        node_id: string;
        number: number;
        /** Reactions */
        reactions?: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        repository_url: string;
        /** @enum {string} */
        state: "open" | "locked" | "converting" | "transferring";
        timeline_url?: string;
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      } & {
        active_lock_reason?: null;
        answer_chosen_at: null;
        answer_chosen_by: null;
        answer_html_url: OneOf<[string, null]>;
        author_association?: string;
        body?: OneOf<[string, null]>;
        category?: {
          created_at?: string;
          description?: string;
          emoji?: string;
          id?: number;
          is_answerable?: boolean;
          name?: string;
          node_id?: string;
          repository_id?: number;
          slug?: string;
          updated_at?: string;
        };
        comments?: number;
        created_at?: string;
        html_url?: string;
        id?: number;
        /** @enum {boolean} */
        locked: false;
        node_id?: string;
        number?: number;
        reactions?: {
          "+1"?: number;
          "-1"?: number;
          confused?: number;
          eyes?: number;
          heart?: number;
          hooray?: number;
          laugh?: number;
          rocket?: number;
          total_count?: number;
          url?: string;
        };
        repository_url?: string;
        /** @enum {string} */
        state: "open" | "converting" | "transferring";
        timeline_url?: string;
        title?: string;
        updated_at?: string;
        user?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** discussion deleted event */
    "webhook-discussion-deleted": {
      /** @enum {string} */
      action: "deleted";
      discussion: components["schemas"]["discussion"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** discussion edited event */
    "webhook-discussion-edited": {
      /** @enum {string} */
      action: "edited";
      changes?: {
        body?: {
          from: string;
        };
        title?: {
          from: string;
        };
      };
      discussion: components["schemas"]["discussion"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** discussion labeled event */
    "webhook-discussion-labeled": {
      /** @enum {string} */
      action: "labeled";
      discussion: components["schemas"]["discussion"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** Label */
      label: {
        /** @description 6-character hex code, without the leading #, identifying the color */
        color: string;
        default: boolean;
        description: OneOf<[string, null]>;
        id: number;
        /** @description The name of the label. */
        name: string;
        node_id: string;
        /**
         * Format: uri
         * @description URL for the label
         */
        url: string;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** discussion locked event */
    "webhook-discussion-locked": {
      /** @enum {string} */
      action: "locked";
      discussion: components["schemas"]["discussion"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** discussion pinned event */
    "webhook-discussion-pinned": {
      /** @enum {string} */
      action: "pinned";
      discussion: components["schemas"]["discussion"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** discussion transferred event */
    "webhook-discussion-transferred": {
      /** @enum {string} */
      action: "transferred";
      changes: {
        new_discussion: components["schemas"]["discussion"];
        new_repository: components["schemas"]["repository"];
      };
      discussion: components["schemas"]["discussion"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** discussion unanswered event */
    "webhook-discussion-unanswered": {
      /** @enum {string} */
      action: "unanswered";
      discussion: components["schemas"]["discussion"];
      old_answer: {
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        body: string;
        child_comment_count: number;
        /** Format: date-time */
        created_at: string;
        discussion_id: number;
        html_url: string;
        id: number;
        node_id: string;
        parent_id: null;
        /** Reactions */
        reactions?: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        repository_url: string;
        /** Format: date-time */
        updated_at: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** discussion unlabeled event */
    "webhook-discussion-unlabeled": {
      /** @enum {string} */
      action: "unlabeled";
      discussion: components["schemas"]["discussion"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** Label */
      label: {
        /** @description 6-character hex code, without the leading #, identifying the color */
        color: string;
        default: boolean;
        description: OneOf<[string, null]>;
        id: number;
        /** @description The name of the label. */
        name: string;
        node_id: string;
        /**
         * Format: uri
         * @description URL for the label
         */
        url: string;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** discussion unlocked event */
    "webhook-discussion-unlocked": {
      /** @enum {string} */
      action: "unlocked";
      discussion: components["schemas"]["discussion"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** discussion unpinned event */
    "webhook-discussion-unpinned": {
      /** @enum {string} */
      action: "unpinned";
      discussion: components["schemas"]["discussion"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /**
     * fork event
     * @description A user forks a repository.
     */
    "webhook-fork": {
      enterprise?: components["schemas"]["enterprise"];
      /** @description The created [`repository`](https://docs.github.com/github-ae@latest/rest/reference/repos#get-a-repository) resource. */
      forkee: {
        /**
         * @description Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** @description Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * @description Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * @description Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * @description Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** Format: uri-template */
        archive_url: string;
        /**
         * @description Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** Format: uri-template */
        assignees_url: string;
        /** Format: uri-template */
        blobs_url: string;
        /** Format: uri-template */
        branches_url: string;
        /** Format: uri */
        clone_url: string;
        /** Format: uri-template */
        collaborators_url: string;
        /** Format: uri-template */
        comments_url: string;
        /** Format: uri-template */
        commits_url: string;
        /** Format: uri-template */
        compare_url: string;
        /** Format: uri-template */
        contents_url: string;
        /** Format: uri */
        contributors_url: string;
        created_at: number | string;
        /** @description The default branch of the repository. */
        default_branch: string;
        /**
         * @description Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** Format: uri */
        deployments_url: string;
        description: OneOf<[string, null]>;
        /** @description Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** Format: uri */
        downloads_url: string;
        /** Format: uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** Format: uri */
        forks_url: string;
        full_name: string;
        /** Format: uri-template */
        git_commits_url: string;
        /** Format: uri-template */
        git_refs_url: string;
        /** Format: uri-template */
        git_tags_url: string;
        /** Format: uri */
        git_url: string;
        /**
         * @description Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * @description Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * @description Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * @description Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        homepage: OneOf<[string, null]>;
        /** Format: uri */
        hooks_url: string;
        /** Format: uri */
        html_url: string;
        /** @description Unique identifier of the repository */
        id: number;
        is_template?: boolean;
        /** Format: uri-template */
        issue_comment_url: string;
        /** Format: uri-template */
        issue_events_url: string;
        /** Format: uri-template */
        issues_url: string;
        /** Format: uri-template */
        keys_url: string;
        /** Format: uri-template */
        labels_url: string;
        language: OneOf<[string, null]>;
        /** Format: uri */
        languages_url: string;
        /** License */
        license: OneOf<
          [
            {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** Format: uri */
              url: OneOf<[string, null]>;
            },
            null
          ]
        >;
        master_branch?: string;
        /** Format: uri */
        merges_url: string;
        /** Format: uri-template */
        milestones_url: string;
        /** Format: uri */
        mirror_url: OneOf<[string, null]>;
        /** @description The name of the repository. */
        name: string;
        node_id: string;
        /** Format: uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** @description Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** Format: uri-template */
        pulls_url: string;
        pushed_at: number | string;
        /** Format: uri-template */
        releases_url: string;
        role_name?: OneOf<[string, null]>;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** Format: uri */
        stargazers_url: string;
        /** Format: uri-template */
        statuses_url: string;
        /** Format: uri */
        subscribers_url: string;
        /** Format: uri */
        subscription_url: string;
        /** Format: uri */
        svn_url: string;
        /** Format: uri */
        tags_url: string;
        /** Format: uri */
        teams_url: string;
        topics: string[];
        /** Format: uri-template */
        trees_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** @enum {string} */
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** @description Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      } & {
        allow_forking?: boolean;
        archive_url?: string;
        archived?: boolean;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        clone_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        created_at?: string;
        default_branch?: string;
        deployments_url?: string;
        description?: OneOf<[string, null]>;
        disabled?: boolean;
        downloads_url?: string;
        events_url?: string;
        /** @enum {boolean} */
        fork?: true;
        forks?: number;
        forks_count?: number;
        forks_url?: string;
        full_name?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        has_downloads?: boolean;
        has_issues?: boolean;
        has_pages?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        homepage?: OneOf<[string, null]>;
        hooks_url?: string;
        html_url?: string;
        id?: number;
        is_template?: boolean;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        language?: null;
        languages_url?: string;
        license?: OneOf<[Record<string, never>, null]>;
        merges_url?: string;
        milestones_url?: string;
        mirror_url?: null;
        name?: string;
        node_id?: string;
        notifications_url?: string;
        open_issues?: number;
        open_issues_count?: number;
        owner?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        private?: boolean;
        public?: boolean;
        pulls_url?: string;
        pushed_at?: string;
        releases_url?: string;
        size?: number;
        ssh_url?: string;
        stargazers_count?: number;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        svn_url?: string;
        tags_url?: string;
        teams_url?: string;
        topics?: null[];
        trees_url?: string;
        updated_at?: string;
        url?: string;
        visibility?: string;
        watchers?: number;
        watchers_count?: number;
      };
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** github_app_authorization revoked event */
    "webhook-github-app-authorization-revoked": {
      /** @enum {string} */
      action: "revoked";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** gollum event */
    "webhook-gollum": {
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description The pages that were updated. */
      pages: {
        /**
         * @description The action that was performed on the page. Can be `created` or `edited`.
         * @enum {string}
         */
        action: "created" | "edited";
        /**
         * Format: uri
         * @description Points to the HTML wiki page.
         */
        html_url: string;
        /** @description The name of the page. */
        page_name: string;
        /** @description The latest commit SHA of the page. */
        sha: string;
        summary: OneOf<[string, null]>;
        /** @description The current page title. */
        title: string;
      }[];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** installation created event */
    "webhook-installation-created": {
      /** @enum {string} */
      action: "created";
      enterprise?: components["schemas"]["enterprise"];
      installation: components["schemas"]["installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description An array of repository objects that the installation can access. */
      repositories?: {
        full_name: string;
        /** @description Unique identifier of the repository */
        id: number;
        /** @description The name of the repository. */
        name: string;
        node_id: string;
        /** @description Whether the repository is private or public. */
        private: boolean;
      }[];
      repository?: components["schemas"]["repository"];
      /** User */
      requester?: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
      sender: components["schemas"]["simple-user"];
    };
    /** installation deleted event */
    "webhook-installation-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      installation: components["schemas"]["installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description An array of repository objects that the installation can access. */
      repositories?: {
        full_name: string;
        /** @description Unique identifier of the repository */
        id: number;
        /** @description The name of the repository. */
        name: string;
        node_id: string;
        /** @description Whether the repository is private or public. */
        private: boolean;
      }[];
      repository?: components["schemas"]["repository"];
      requester?: null;
      sender: components["schemas"]["simple-user"];
    };
    /** installation new_permissions_accepted event */
    "webhook-installation-new-permissions-accepted": {
      /** @enum {string} */
      action: "new_permissions_accepted";
      enterprise?: components["schemas"]["enterprise"];
      installation: components["schemas"]["installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description An array of repository objects that the installation can access. */
      repositories?: {
        full_name: string;
        /** @description Unique identifier of the repository */
        id: number;
        /** @description The name of the repository. */
        name: string;
        node_id: string;
        /** @description Whether the repository is private or public. */
        private: boolean;
      }[];
      repository?: components["schemas"]["repository"];
      requester?: null;
      sender: components["schemas"]["simple-user"];
    };
    /** installation_repositories added event */
    "webhook-installation-repositories-added": {
      /** @enum {string} */
      action: "added";
      enterprise?: components["schemas"]["enterprise"];
      installation: components["schemas"]["installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description An array of repository objects, which were added to the installation. */
      repositories_added: {
        full_name: string;
        /** @description Unique identifier of the repository */
        id: number;
        /** @description The name of the repository. */
        name: string;
        node_id: string;
        /** @description Whether the repository is private or public. */
        private: boolean;
      }[];
      /** @description An array of repository objects, which were removed from the installation. */
      repositories_removed: {
        full_name?: string;
        /** @description Unique identifier of the repository */
        id?: number;
        /** @description The name of the repository. */
        name?: string;
        node_id?: string;
        /** @description Whether the repository is private or public. */
        private?: boolean;
      }[];
      repository?: components["schemas"]["repository"];
      /**
       * @description Describe whether all repositories have been selected or there's a selection involved
       * @enum {string}
       */
      repository_selection: "all" | "selected";
      /** User */
      requester: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
      sender: components["schemas"]["simple-user"];
    };
    /** installation_repositories removed event */
    "webhook-installation-repositories-removed": {
      /** @enum {string} */
      action: "removed";
      enterprise?: components["schemas"]["enterprise"];
      installation: components["schemas"]["installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description An array of repository objects, which were added to the installation. */
      repositories_added: {
        full_name: string;
        /** @description Unique identifier of the repository */
        id: number;
        /** @description The name of the repository. */
        name: string;
        node_id: string;
        /** @description Whether the repository is private or public. */
        private: boolean;
      }[];
      /** @description An array of repository objects, which were removed from the installation. */
      repositories_removed: {
        full_name: string;
        /** @description Unique identifier of the repository */
        id: number;
        /** @description The name of the repository. */
        name: string;
        node_id: string;
        /** @description Whether the repository is private or public. */
        private: boolean;
      }[];
      repository?: components["schemas"]["repository"];
      /**
       * @description Describe whether all repositories have been selected or there's a selection involved
       * @enum {string}
       */
      repository_selection: "all" | "selected";
      /** User */
      requester: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
      sender: components["schemas"]["simple-user"];
    };
    /** installation suspend event */
    "webhook-installation-suspend": {
      /** @enum {string} */
      action: "suspend";
      enterprise?: components["schemas"]["enterprise"];
      installation: components["schemas"]["installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description An array of repository objects that the installation can access. */
      repositories?: {
        full_name: string;
        /** @description Unique identifier of the repository */
        id: number;
        /** @description The name of the repository. */
        name: string;
        node_id: string;
        /** @description Whether the repository is private or public. */
        private: boolean;
      }[];
      repository?: components["schemas"]["repository"];
      requester?: null;
      sender: components["schemas"]["simple-user"];
    };
    "webhook-installation-target-renamed": {
      account: {
        avatar_url: string;
        created_at?: string;
        description?: null;
        events_url?: string;
        followers?: number;
        followers_url?: string;
        following?: number;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        has_organization_projects?: boolean;
        has_repository_projects?: boolean;
        hooks_url?: string;
        html_url: string;
        id: number;
        is_verified?: boolean;
        issues_url?: string;
        login?: string;
        members_url?: string;
        name?: string;
        node_id: string;
        organizations_url?: string;
        public_gists?: number;
        public_members_url?: string;
        public_repos?: number;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        slug?: string;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        updated_at?: string;
        url?: string;
        website_url?: null;
      };
      action: string;
      changes: {
        login?: {
          from: string;
        };
        slug?: {
          from: string;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
      target_type: string;
    };
    /** installation unsuspend event */
    "webhook-installation-unsuspend": {
      /** @enum {string} */
      action: "unsuspend";
      enterprise?: components["schemas"]["enterprise"];
      installation: components["schemas"]["installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description An array of repository objects that the installation can access. */
      repositories?: {
        full_name: string;
        /** @description Unique identifier of the repository */
        id: number;
        /** @description The name of the repository. */
        name: string;
        node_id: string;
        /** @description Whether the repository is private or public. */
        private: boolean;
      }[];
      repository?: components["schemas"]["repository"];
      requester?: null;
      sender: components["schemas"]["simple-user"];
    };
    /** issue_comment created event */
    "webhook-issue-comment-created": {
      /** @enum {string} */
      action: "created";
      /**
       * issue comment
       * @description The [comment](https://docs.github.com/github-ae@latest/rest/reference/issues#comments) itself.
       */
      comment: {
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue comment */
        body: string;
        /** Format: date-time */
        created_at: string;
        /** Format: uri */
        html_url: string;
        /**
         * Format: int64
         * @description Unique identifier of the issue comment
         */
        id: number;
        /** Format: uri */
        issue_url: string;
        node_id: string;
        performed_via_github_app: null | components["schemas"]["integration"];
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue comment
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) the comment belongs to. */
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "reminder"
                | "pull_request_review_thread"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write" | "admin";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write" | "admin";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      } & {
        active_lock_reason?: OneOf<[string, null]>;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees?: OneOf<[Record<string, never>, null]>[];
        author_association?: string;
        body?: OneOf<[string, null]>;
        closed_at?: OneOf<[string, null]>;
        comments?: number;
        comments_url?: string;
        created_at?: string;
        events_url?: string;
        html_url?: string;
        id?: number;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        labels_url?: string;
        locked: boolean;
        milestone?: OneOf<[Record<string, never>, null]>;
        node_id?: string;
        number?: number;
        performed_via_github_app?: OneOf<[Record<string, never>, null]>;
        reactions?: {
          "+1"?: number;
          "-1"?: number;
          confused?: number;
          eyes?: number;
          heart?: number;
          hooray?: number;
          laugh?: number;
          rocket?: number;
          total_count?: number;
          url?: string;
        };
        repository_url?: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state: "open" | "closed";
        timeline_url?: string;
        title?: string;
        updated_at?: string;
        url?: string;
        user?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issue_comment deleted event */
    "webhook-issue-comment-deleted": {
      /** @enum {string} */
      action: "deleted";
      /**
       * issue comment
       * @description The [comment](https://docs.github.com/github-ae@latest/rest/reference/issues#comments) itself.
       */
      comment: {
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue comment */
        body: string;
        /** Format: date-time */
        created_at: string;
        /** Format: uri */
        html_url: string;
        /**
         * Format: int64
         * @description Unique identifier of the issue comment
         */
        id: number;
        /** Format: uri */
        issue_url: string;
        node_id: string;
        performed_via_github_app: null | components["schemas"]["integration"];
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue comment
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) the comment belongs to. */
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      } & {
        active_lock_reason?: OneOf<[string, null]>;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees?: OneOf<[Record<string, never>, null]>[];
        author_association?: string;
        body?: OneOf<[string, null]>;
        closed_at?: OneOf<[string, null]>;
        comments?: number;
        comments_url?: string;
        created_at?: string;
        events_url?: string;
        html_url?: string;
        id?: number;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        labels_url?: string;
        locked: boolean;
        milestone?: OneOf<[Record<string, never>, null]>;
        node_id?: string;
        number?: number;
        performed_via_github_app?: OneOf<[Record<string, never>, null]>;
        reactions?: {
          "+1"?: number;
          "-1"?: number;
          confused?: number;
          eyes?: number;
          heart?: number;
          hooray?: number;
          laugh?: number;
          rocket?: number;
          total_count?: number;
          url?: string;
        };
        repository_url?: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state: "open" | "closed";
        timeline_url?: string;
        title?: string;
        updated_at?: string;
        url?: string;
        user?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issue_comment edited event */
    "webhook-issue-comment-edited": {
      /** @enum {string} */
      action: "edited";
      /** @description The changes to the comment. */
      changes: {
        body?: {
          /** @description The previous version of the body. */
          from: string;
        };
      };
      /**
       * issue comment
       * @description The [comment](https://docs.github.com/github-ae@latest/rest/reference/issues#comments) itself.
       */
      comment: {
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue comment */
        body: string;
        /** Format: date-time */
        created_at: string;
        /** Format: uri */
        html_url: string;
        /**
         * Format: int64
         * @description Unique identifier of the issue comment
         */
        id: number;
        /** Format: uri */
        issue_url: string;
        node_id: string;
        performed_via_github_app: null | components["schemas"]["integration"];
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue comment
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) the comment belongs to. */
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "reminder"
                | "pull_request_review_thread"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write" | "admin";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      } & {
        active_lock_reason?: OneOf<[string, null]>;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees?: OneOf<[Record<string, never>, null]>[];
        author_association?: string;
        body?: OneOf<[string, null]>;
        closed_at?: OneOf<[string, null]>;
        comments?: number;
        comments_url?: string;
        created_at?: string;
        events_url?: string;
        html_url?: string;
        id?: number;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        labels_url?: string;
        locked: boolean;
        milestone?: OneOf<[Record<string, never>, null]>;
        node_id?: string;
        number?: number;
        performed_via_github_app?: OneOf<[Record<string, never>, null]>;
        reactions?: {
          "+1"?: number;
          "-1"?: number;
          confused?: number;
          eyes?: number;
          heart?: number;
          hooray?: number;
          laugh?: number;
          rocket?: number;
          total_count?: number;
          url?: string;
        };
        repository_url?: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state: "open" | "closed";
        timeline_url?: string;
        title?: string;
        updated_at?: string;
        url?: string;
        user?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues assigned event */
    "webhook-issues-assigned": {
      /**
       * @description The action that was performed.
       * @enum {string}
       */
      action: "assigned";
      /** User */
      assignee?: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Issue
       * @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) itself.
       */
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "reminder"
                | "pull_request_review_thread"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write" | "admin";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues closed event */
    "webhook-issues-closed": {
      /**
       * @description The action that was performed.
       * @enum {string}
       */
      action: "closed";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) itself. */
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "security_and_analysis"
                | "reminder"
                | "pull_request_review_thread"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write" | "admin";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      } & {
        active_lock_reason?: OneOf<[string, null]>;
        assignee?: OneOf<[Record<string, never>, null]>;
        assignees?: OneOf<[Record<string, never>, null]>[];
        author_association?: string;
        body?: OneOf<[string, null]>;
        closed_at: OneOf<[string, null]>;
        comments?: number;
        comments_url?: string;
        created_at?: string;
        events_url?: string;
        html_url?: string;
        id?: number;
        labels?: OneOf<[Record<string, never>, null]>[];
        labels_url?: string;
        locked?: boolean;
        milestone?: OneOf<[Record<string, never>, null]>;
        node_id?: string;
        number?: number;
        performed_via_github_app?: OneOf<[Record<string, never>, null]>;
        reactions?: {
          "+1"?: number;
          "-1"?: number;
          confused?: number;
          eyes?: number;
          heart?: number;
          hooray?: number;
          laugh?: number;
          rocket?: number;
          total_count?: number;
          url?: string;
        };
        repository_url?: string;
        /** @enum {string} */
        state: "closed" | "open";
        timeline_url?: string;
        title?: string;
        updated_at?: string;
        url?: string;
        user?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues deleted event */
    "webhook-issues-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Issue
       * @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) itself.
       */
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "reminder"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues demilestoned event */
    "webhook-issues-demilestoned": {
      /** @enum {string} */
      action: "demilestoned";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write" | "admin";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      } & {
        active_lock_reason?: OneOf<[string, null]>;
        assignee?: OneOf<[Record<string, never>, null]>;
        assignees?: OneOf<[Record<string, never>, null]>[];
        author_association?: string;
        body?: OneOf<[string, null]>;
        closed_at?: OneOf<[string, null]>;
        comments?: number;
        comments_url?: string;
        created_at?: string;
        events_url?: string;
        html_url?: string;
        id?: number;
        labels?: OneOf<[Record<string, never>, null]>[];
        labels_url?: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id?: string;
        number?: number;
        performed_via_github_app?: OneOf<[Record<string, never>, null]>;
        reactions?: {
          "+1"?: number;
          "-1"?: number;
          confused?: number;
          eyes?: number;
          heart?: number;
          hooray?: number;
          laugh?: number;
          rocket?: number;
          total_count?: number;
          url?: string;
        };
        repository_url?: string;
        state?: string;
        timeline_url?: string;
        title?: string;
        updated_at?: string;
        url?: string;
        user?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
      };
      /**
       * Milestone
       * @description A collection of related issues and pull requests.
       */
      milestone?: {
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        closed_issues: number;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        description: OneOf<[string, null]>;
        /** Format: date-time */
        due_on: OneOf<[string, null]>;
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        labels_url: string;
        node_id: string;
        /** @description The number of the milestone. */
        number: number;
        open_issues: number;
        /**
         * @description The state of the milestone.
         * @enum {string}
         */
        state: "open" | "closed";
        /** @description The title of the milestone. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues edited event */
    "webhook-issues-edited": {
      /** @enum {string} */
      action: "edited";
      /** @description The changes to the issue. */
      changes: {
        body?: {
          /** @description The previous version of the body. */
          from: string;
        };
        title?: {
          /** @description The previous version of the title. */
          from: string;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Issue
       * @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) itself.
       */
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "security_and_analysis"
                | "pull_request_review_thread"
                | "reminder"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write" | "admin";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      /** Label */
      label?: {
        /** @description 6-character hex code, without the leading #, identifying the color */
        color: string;
        default: boolean;
        description: OneOf<[string, null]>;
        id: number;
        /** @description The name of the label. */
        name: string;
        node_id: string;
        /**
         * Format: uri
         * @description URL for the label
         */
        url: string;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues labeled event */
    "webhook-issues-labeled": {
      /** @enum {string} */
      action: "labeled";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Issue
       * @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) itself.
       */
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "pull_request_review_thread"
                | "reminder"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write" | "admin";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      /** Label */
      label?: {
        /** @description 6-character hex code, without the leading #, identifying the color */
        color: string;
        default: boolean;
        description: OneOf<[string, null]>;
        id: number;
        /** @description The name of the label. */
        name: string;
        node_id: string;
        /**
         * Format: uri
         * @description URL for the label
         */
        url: string;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues locked event */
    "webhook-issues-locked": {
      /** @enum {string} */
      action: "locked";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "reminder"
                | "security_and_analysis"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      } & {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        assignee?: OneOf<[Record<string, never>, null]>;
        assignees?: OneOf<[Record<string, never>, null]>[];
        author_association?: string;
        body?: OneOf<[string, null]>;
        closed_at?: OneOf<[string, null]>;
        comments?: number;
        comments_url?: string;
        created_at?: string;
        events_url?: string;
        html_url?: string;
        id?: number;
        labels?: OneOf<[Record<string, never>, null]>[];
        labels_url?: string;
        /** @enum {boolean} */
        locked: true;
        milestone?: OneOf<[Record<string, never>, null]>;
        node_id?: string;
        number?: number;
        performed_via_github_app?: OneOf<[Record<string, never>, null]>;
        reactions?: {
          "+1"?: number;
          "-1"?: number;
          confused?: number;
          eyes?: number;
          heart?: number;
          hooray?: number;
          laugh?: number;
          rocket?: number;
          total_count?: number;
          url?: string;
        };
        repository_url?: string;
        state?: string;
        timeline_url?: string;
        title?: string;
        updated_at?: string;
        url?: string;
        user?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues milestoned event */
    "webhook-issues-milestoned": {
      /** @enum {string} */
      action: "milestoned";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "reminder"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write" | "admin";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      } & {
        active_lock_reason?: OneOf<[string, null]>;
        assignee?: OneOf<[Record<string, never>, null]>;
        assignees?: OneOf<[Record<string, never>, null]>[];
        author_association?: string;
        body?: OneOf<[string, null]>;
        closed_at?: OneOf<[string, null]>;
        comments?: number;
        comments_url?: string;
        created_at?: string;
        events_url?: string;
        html_url?: string;
        id?: number;
        labels?: OneOf<[Record<string, never>, null]>[];
        labels_url?: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: {
          /** Format: date-time */
          closed_at: OneOf<[string, null]>;
          closed_issues: number;
          /** Format: date-time */
          created_at: string;
          /** User */
          creator: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization" | "Mannequin";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          description: OneOf<[string, null]>;
          /** Format: date-time */
          due_on: OneOf<[string, null]>;
          /** Format: uri */
          html_url: string;
          id: number;
          /** Format: uri */
          labels_url: string;
          node_id: string;
          /** @description The number of the milestone. */
          number: number;
          open_issues: number;
          /**
           * @description The state of the milestone.
           * @enum {string}
           */
          state: "open" | "closed";
          /** @description The title of the milestone. */
          title: string;
          /** Format: date-time */
          updated_at: string;
          /** Format: uri */
          url: string;
        };
        node_id?: string;
        number?: number;
        performed_via_github_app?: OneOf<[Record<string, never>, null]>;
        reactions?: {
          "+1"?: number;
          "-1"?: number;
          confused?: number;
          eyes?: number;
          heart?: number;
          hooray?: number;
          laugh?: number;
          rocket?: number;
          total_count?: number;
          url?: string;
        };
        repository_url?: string;
        state?: string;
        timeline_url?: string;
        title?: string;
        updated_at?: string;
        url?: string;
        user?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
      };
      /**
       * Milestone
       * @description A collection of related issues and pull requests.
       */
      milestone: {
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        closed_issues: number;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        description: OneOf<[string, null]>;
        /** Format: date-time */
        due_on: OneOf<[string, null]>;
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        labels_url: string;
        node_id: string;
        /** @description The number of the milestone. */
        number: number;
        open_issues: number;
        /**
         * @description The state of the milestone.
         * @enum {string}
         */
        state: "open" | "closed";
        /** @description The title of the milestone. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues opened event */
    "webhook-issues-opened": {
      /** @enum {string} */
      action: "opened";
      changes?: {
        /**
         * Issue
         * @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) itself.
         */
        old_issue: OneOf<
          [
            {
              /** @enum {string|null} */
              active_lock_reason:
                | "resolved"
                | "off-topic"
                | "too heated"
                | "spam"
                | ""
                | null;
              /** User */
              assignee?: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              assignees: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >[];
              /**
               * AuthorAssociation
               * @description How the author is associated with the repository.
               * @enum {string}
               */
              author_association:
                | "COLLABORATOR"
                | "CONTRIBUTOR"
                | "FIRST_TIMER"
                | "FIRST_TIME_CONTRIBUTOR"
                | "MANNEQUIN"
                | "MEMBER"
                | "NONE"
                | "OWNER";
              /** @description Contents of the issue */
              body: OneOf<[string, null]>;
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              comments: number;
              /** Format: uri */
              comments_url: string;
              /** Format: date-time */
              created_at: string;
              draft?: boolean;
              /** Format: uri */
              events_url: string;
              /** Format: uri */
              html_url: string;
              /** Format: int64 */
              id: number;
              labels?: {
                /** @description 6-character hex code, without the leading #, identifying the color */
                color: string;
                default: boolean;
                description: OneOf<[string, null]>;
                id: number;
                /** @description The name of the label. */
                name: string;
                node_id: string;
                /**
                 * Format: uri
                 * @description URL for the label
                 */
                url: string;
              }[];
              /** Format: uri-template */
              labels_url: string;
              locked?: boolean;
              /**
               * Milestone
               * @description A collection of related issues and pull requests.
               */
              milestone: OneOf<
                [
                  {
                    /** Format: date-time */
                    closed_at: OneOf<[string, null]>;
                    closed_issues: number;
                    /** Format: date-time */
                    created_at: string;
                    /** User */
                    creator: OneOf<
                      [
                        {
                          /** Format: uri */
                          avatar_url?: string;
                          deleted?: boolean;
                          email?: OneOf<[string, null]>;
                          /** Format: uri-template */
                          events_url?: string;
                          /** Format: uri */
                          followers_url?: string;
                          /** Format: uri-template */
                          following_url?: string;
                          /** Format: uri-template */
                          gists_url?: string;
                          gravatar_id?: string;
                          /** Format: uri */
                          html_url?: string;
                          id: number;
                          login: string;
                          name?: string;
                          node_id?: string;
                          /** Format: uri */
                          organizations_url?: string;
                          /** Format: uri */
                          received_events_url?: string;
                          /** Format: uri */
                          repos_url?: string;
                          site_admin?: boolean;
                          /** Format: uri-template */
                          starred_url?: string;
                          /** Format: uri */
                          subscriptions_url?: string;
                          /** @enum {string} */
                          type?: "Bot" | "User" | "Organization";
                          /** Format: uri */
                          url?: string;
                        },
                        null
                      ]
                    >;
                    description: OneOf<[string, null]>;
                    /** Format: date-time */
                    due_on: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    /** Format: uri */
                    labels_url: string;
                    node_id: string;
                    /** @description The number of the milestone. */
                    number: number;
                    open_issues: number;
                    /**
                     * @description The state of the milestone.
                     * @enum {string}
                     */
                    state: "open" | "closed";
                    /** @description The title of the milestone. */
                    title: string;
                    /** Format: date-time */
                    updated_at: string;
                    /** Format: uri */
                    url: string;
                  },
                  null
                ]
              >;
              node_id: string;
              number: number;
              /**
               * App
               * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
               */
              performed_via_github_app?: OneOf<
                [
                  {
                    /** Format: date-time */
                    created_at: OneOf<[string, null]>;
                    description: OneOf<[string, null]>;
                    /** @description The list of events for the GitHub app */
                    events?: (
                      | "branch_protection_rule"
                      | "check_run"
                      | "check_suite"
                      | "code_scanning_alert"
                      | "commit_comment"
                      | "content_reference"
                      | "create"
                      | "delete"
                      | "deployment"
                      | "deployment_review"
                      | "deployment_status"
                      | "deploy_key"
                      | "discussion"
                      | "discussion_comment"
                      | "fork"
                      | "gollum"
                      | "issues"
                      | "issue_comment"
                      | "label"
                      | "member"
                      | "membership"
                      | "milestone"
                      | "organization"
                      | "org_block"
                      | "page_build"
                      | "project"
                      | "project_card"
                      | "project_column"
                      | "public"
                      | "pull_request"
                      | "pull_request_review"
                      | "pull_request_review_comment"
                      | "push"
                      | "registry_package"
                      | "release"
                      | "repository"
                      | "repository_dispatch"
                      | "secret_scanning_alert"
                      | "star"
                      | "status"
                      | "team"
                      | "team_add"
                      | "watch"
                      | "workflow_dispatch"
                      | "workflow_run"
                    )[];
                    /** Format: uri */
                    external_url: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the GitHub app */
                    id: OneOf<[number, null]>;
                    /** @description The name of the GitHub app */
                    name: string;
                    node_id: string;
                    /** User */
                    owner: OneOf<
                      [
                        {
                          /** Format: uri */
                          avatar_url?: string;
                          deleted?: boolean;
                          email?: OneOf<[string, null]>;
                          /** Format: uri-template */
                          events_url?: string;
                          /** Format: uri */
                          followers_url?: string;
                          /** Format: uri-template */
                          following_url?: string;
                          /** Format: uri-template */
                          gists_url?: string;
                          gravatar_id?: string;
                          /** Format: uri */
                          html_url?: string;
                          id: number;
                          login: string;
                          name?: string;
                          node_id?: string;
                          /** Format: uri */
                          organizations_url?: string;
                          /** Format: uri */
                          received_events_url?: string;
                          /** Format: uri */
                          repos_url?: string;
                          site_admin?: boolean;
                          /** Format: uri-template */
                          starred_url?: string;
                          /** Format: uri */
                          subscriptions_url?: string;
                          /** @enum {string} */
                          type?: "Bot" | "User" | "Organization";
                          /** Format: uri */
                          url?: string;
                        },
                        null
                      ]
                    >;
                    /** @description The set of permissions for the GitHub app */
                    permissions?: {
                      /** @enum {string} */
                      actions?: "read" | "write";
                      /** @enum {string} */
                      administration?: "read" | "write";
                      /** @enum {string} */
                      checks?: "read" | "write";
                      /** @enum {string} */
                      content_references?: "read" | "write";
                      /** @enum {string} */
                      contents?: "read" | "write";
                      /** @enum {string} */
                      deployments?: "read" | "write";
                      /** @enum {string} */
                      discussions?: "read" | "write";
                      /** @enum {string} */
                      emails?: "read" | "write";
                      /** @enum {string} */
                      environments?: "read" | "write";
                      /** @enum {string} */
                      issues?: "read" | "write";
                      /** @enum {string} */
                      keys?: "read" | "write";
                      /** @enum {string} */
                      members?: "read" | "write";
                      /** @enum {string} */
                      metadata?: "read" | "write";
                      /** @enum {string} */
                      organization_administration?: "read" | "write";
                      /** @enum {string} */
                      organization_hooks?: "read" | "write";
                      /** @enum {string} */
                      organization_packages?: "read" | "write";
                      /** @enum {string} */
                      organization_plan?: "read" | "write";
                      /** @enum {string} */
                      organization_projects?: "read" | "write";
                      /** @enum {string} */
                      organization_secrets?: "read" | "write";
                      /** @enum {string} */
                      organization_self_hosted_runners?: "read" | "write";
                      /** @enum {string} */
                      organization_user_blocking?: "read" | "write";
                      /** @enum {string} */
                      packages?: "read" | "write";
                      /** @enum {string} */
                      pages?: "read" | "write";
                      /** @enum {string} */
                      pull_requests?: "read" | "write";
                      /** @enum {string} */
                      repository_hooks?: "read" | "write";
                      /** @enum {string} */
                      repository_projects?: "read" | "write";
                      /** @enum {string} */
                      secret_scanning_alerts?: "read" | "write";
                      /** @enum {string} */
                      secrets?: "read" | "write";
                      /** @enum {string} */
                      security_events?: "read" | "write";
                      /** @enum {string} */
                      security_scanning_alert?: "read" | "write";
                      /** @enum {string} */
                      single_file?: "read" | "write";
                      /** @enum {string} */
                      statuses?: "read" | "write";
                      /** @enum {string} */
                      team_discussions?: "read" | "write";
                      /** @enum {string} */
                      vulnerability_alerts?: "read" | "write";
                      /** @enum {string} */
                      workflows?: "read" | "write";
                    };
                    /** @description The slug name of the GitHub app */
                    slug?: string;
                    /** Format: date-time */
                    updated_at: OneOf<[string, null]>;
                  },
                  null
                ]
              >;
              pull_request?: {
                /** Format: uri */
                diff_url?: string;
                /** Format: uri */
                html_url?: string;
                /** Format: date-time */
                merged_at?: OneOf<[string, null]>;
                /** Format: uri */
                patch_url?: string;
                /** Format: uri */
                url?: string;
              };
              /** Reactions */
              reactions: {
                "+1": number;
                "-1": number;
                confused: number;
                eyes: number;
                heart: number;
                hooray: number;
                laugh: number;
                rocket: number;
                total_count: number;
                /** Format: uri */
                url: string;
              };
              /** Format: uri */
              repository_url: string;
              /**
               * @description State of the issue; either 'open' or 'closed'
               * @enum {string}
               */
              state?: "open" | "closed";
              state_reason?: OneOf<[string, null]>;
              /** Format: uri */
              timeline_url?: string;
              /** @description Title of the issue */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /**
               * Format: uri
               * @description URL for the issue
               */
              url: string;
              /** User */
              user: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
            },
            null
          ]
        >;
        /**
         * Repository
         * @description A git repository
         */
        old_repository: {
          /**
           * @description Whether to allow auto-merge for pull requests.
           * @default false
           */
          allow_auto_merge?: boolean;
          /** @description Whether to allow private forks */
          allow_forking?: boolean;
          /**
           * @description Whether to allow merge commits for pull requests.
           * @default true
           */
          allow_merge_commit?: boolean;
          /**
           * @description Whether to allow rebase merges for pull requests.
           * @default true
           */
          allow_rebase_merge?: boolean;
          /**
           * @description Whether to allow squash merges for pull requests.
           * @default true
           */
          allow_squash_merge?: boolean;
          allow_update_branch?: boolean;
          /** Format: uri-template */
          archive_url: string;
          /**
           * @description Whether the repository is archived.
           * @default false
           */
          archived: boolean;
          /** Format: uri-template */
          assignees_url: string;
          /** Format: uri-template */
          blobs_url: string;
          /** Format: uri-template */
          branches_url: string;
          /** Format: uri */
          clone_url: string;
          /** Format: uri-template */
          collaborators_url: string;
          /** Format: uri-template */
          comments_url: string;
          /** Format: uri-template */
          commits_url: string;
          /** Format: uri-template */
          compare_url: string;
          /** Format: uri-template */
          contents_url: string;
          /** Format: uri */
          contributors_url: string;
          created_at: number | string;
          /** @description The default branch of the repository. */
          default_branch: string;
          /**
           * @description Whether to delete head branches when pull requests are merged
           * @default false
           */
          delete_branch_on_merge?: boolean;
          /** Format: uri */
          deployments_url: string;
          description: OneOf<[string, null]>;
          /** @description Returns whether or not this repository is disabled. */
          disabled?: boolean;
          /** Format: uri */
          downloads_url: string;
          /** Format: uri */
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          /** Format: uri */
          forks_url: string;
          full_name: string;
          /** Format: uri-template */
          git_commits_url: string;
          /** Format: uri-template */
          git_refs_url: string;
          /** Format: uri-template */
          git_tags_url: string;
          /** Format: uri */
          git_url: string;
          /**
           * @description Whether downloads are enabled.
           * @default true
           */
          has_downloads: boolean;
          /**
           * @description Whether issues are enabled.
           * @default true
           */
          has_issues: boolean;
          has_pages: boolean;
          /**
           * @description Whether projects are enabled.
           * @default true
           */
          has_projects: boolean;
          /**
           * @description Whether the wiki is enabled.
           * @default true
           */
          has_wiki: boolean;
          homepage: OneOf<[string, null]>;
          /** Format: uri */
          hooks_url: string;
          /** Format: uri */
          html_url: string;
          /** @description Unique identifier of the repository */
          id: number;
          is_template?: boolean;
          /** Format: uri-template */
          issue_comment_url: string;
          /** Format: uri-template */
          issue_events_url: string;
          /** Format: uri-template */
          issues_url: string;
          /** Format: uri-template */
          keys_url: string;
          /** Format: uri-template */
          labels_url: string;
          language: OneOf<[string, null]>;
          /** Format: uri */
          languages_url: string;
          /** License */
          license: OneOf<
            [
              {
                key: string;
                name: string;
                node_id: string;
                spdx_id: string;
                /** Format: uri */
                url: OneOf<[string, null]>;
              },
              null
            ]
          >;
          master_branch?: string;
          /** Format: uri */
          merges_url: string;
          /** Format: uri-template */
          milestones_url: string;
          /** Format: uri */
          mirror_url: OneOf<[string, null]>;
          /** @description The name of the repository. */
          name: string;
          node_id: string;
          /** Format: uri-template */
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string;
          /** User */
          owner: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          permissions?: {
            admin: boolean;
            maintain?: boolean;
            pull: boolean;
            push: boolean;
            triage?: boolean;
          };
          /** @description Whether the repository is private or public. */
          private: boolean;
          public?: boolean;
          /** Format: uri-template */
          pulls_url: string;
          pushed_at: number | string;
          /** Format: uri-template */
          releases_url: string;
          role_name?: OneOf<[string, null]>;
          size: number;
          ssh_url: string;
          stargazers?: number;
          stargazers_count: number;
          /** Format: uri */
          stargazers_url: string;
          /** Format: uri-template */
          statuses_url: string;
          /** Format: uri */
          subscribers_url: string;
          /** Format: uri */
          subscription_url: string;
          /** Format: uri */
          svn_url: string;
          /** Format: uri */
          tags_url: string;
          /** Format: uri */
          teams_url: string;
          topics: string[];
          /** Format: uri-template */
          trees_url: string;
          /** Format: date-time */
          updated_at: string;
          /** Format: uri */
          url: string;
          /** @enum {string} */
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Issue
       * @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) itself.
       */
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "security_and_analysis"
                | "pull_request_review_thread"
                | "reminder"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write" | "admin";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues pinned event */
    "webhook-issues-pinned": {
      /** @enum {string} */
      action: "pinned";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Issue
       * @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) itself.
       */
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues reopened event */
    "webhook-issues-reopened": {
      /** @enum {string} */
      action: "reopened";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "pull_request_review_thread"
                | "reminder"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write" | "admin";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write" | "admin";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      } & {
        active_lock_reason?: OneOf<[string, null]>;
        assignee?: OneOf<[Record<string, never>, null]>;
        assignees?: OneOf<[Record<string, never>, null]>[];
        author_association?: string;
        body?: OneOf<[string, null]>;
        closed_at?: OneOf<[string, null]>;
        comments?: number;
        comments_url?: string;
        created_at?: string;
        events_url?: string;
        html_url?: string;
        id?: number;
        labels?: OneOf<[Record<string, never>, null]>[];
        labels_url?: string;
        locked?: boolean;
        milestone?: OneOf<[Record<string, never>, null]>;
        node_id?: string;
        number?: number;
        performed_via_github_app?: OneOf<[Record<string, never>, null]>;
        reactions?: {
          "+1"?: number;
          "-1"?: number;
          confused?: number;
          eyes?: number;
          heart?: number;
          hooray?: number;
          laugh?: number;
          rocket?: number;
          total_count?: number;
          url?: string;
        };
        repository_url?: string;
        /** @enum {string} */
        state: "open" | "closed";
        timeline_url?: string;
        title?: string;
        updated_at?: string;
        url?: string;
        user?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues transferred event */
    "webhook-issues-transferred": {
      /** @enum {string} */
      action: "transferred";
      changes: {
        /**
         * Issue
         * @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) itself.
         */
        new_issue: {
          /** @enum {string|null} */
          active_lock_reason:
            | "resolved"
            | "off-topic"
            | "too heated"
            | "spam"
            | ""
            | null;
          /** User */
          assignee?: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          assignees: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >[];
          /**
           * AuthorAssociation
           * @description How the author is associated with the repository.
           * @enum {string}
           */
          author_association:
            | "COLLABORATOR"
            | "CONTRIBUTOR"
            | "FIRST_TIMER"
            | "FIRST_TIME_CONTRIBUTOR"
            | "MANNEQUIN"
            | "MEMBER"
            | "NONE"
            | "OWNER";
          /** @description Contents of the issue */
          body: OneOf<[string, null]>;
          /** Format: date-time */
          closed_at: OneOf<[string, null]>;
          comments: number;
          /** Format: uri */
          comments_url: string;
          /** Format: date-time */
          created_at: string;
          draft?: boolean;
          /** Format: uri */
          events_url: string;
          /** Format: uri */
          html_url: string;
          /** Format: int64 */
          id: number;
          labels?: {
            /** @description 6-character hex code, without the leading #, identifying the color */
            color: string;
            default: boolean;
            description: OneOf<[string, null]>;
            id: number;
            /** @description The name of the label. */
            name: string;
            node_id: string;
            /**
             * Format: uri
             * @description URL for the label
             */
            url: string;
          }[];
          /** Format: uri-template */
          labels_url: string;
          locked?: boolean;
          /**
           * Milestone
           * @description A collection of related issues and pull requests.
           */
          milestone: OneOf<
            [
              {
                /** Format: date-time */
                closed_at: OneOf<[string, null]>;
                closed_issues: number;
                /** Format: date-time */
                created_at: string;
                /** User */
                creator: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                description: OneOf<[string, null]>;
                /** Format: date-time */
                due_on: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                id: number;
                /** Format: uri */
                labels_url: string;
                node_id: string;
                /** @description The number of the milestone. */
                number: number;
                open_issues: number;
                /**
                 * @description The state of the milestone.
                 * @enum {string}
                 */
                state: "open" | "closed";
                /** @description The title of the milestone. */
                title: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
              },
              null
            ]
          >;
          node_id: string;
          number: number;
          /**
           * App
           * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
           */
          performed_via_github_app?: OneOf<
            [
              {
                /** Format: date-time */
                created_at: OneOf<[string, null]>;
                description: OneOf<[string, null]>;
                /** @description The list of events for the GitHub app */
                events?: (
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                )[];
                /** Format: uri */
                external_url: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the GitHub app */
                id: OneOf<[number, null]>;
                /** @description The name of the GitHub app */
                name: string;
                node_id: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                /** @description The set of permissions for the GitHub app */
                permissions?: {
                  /** @enum {string} */
                  actions?: "read" | "write";
                  /** @enum {string} */
                  administration?: "read" | "write";
                  /** @enum {string} */
                  checks?: "read" | "write";
                  /** @enum {string} */
                  content_references?: "read" | "write";
                  /** @enum {string} */
                  contents?: "read" | "write";
                  /** @enum {string} */
                  deployments?: "read" | "write";
                  /** @enum {string} */
                  discussions?: "read" | "write";
                  /** @enum {string} */
                  emails?: "read" | "write";
                  /** @enum {string} */
                  environments?: "read" | "write";
                  /** @enum {string} */
                  issues?: "read" | "write";
                  /** @enum {string} */
                  keys?: "read" | "write";
                  /** @enum {string} */
                  members?: "read" | "write";
                  /** @enum {string} */
                  metadata?: "read" | "write";
                  /** @enum {string} */
                  organization_administration?: "read" | "write";
                  /** @enum {string} */
                  organization_hooks?: "read" | "write";
                  /** @enum {string} */
                  organization_packages?: "read" | "write";
                  /** @enum {string} */
                  organization_plan?: "read" | "write";
                  /** @enum {string} */
                  organization_projects?: "read" | "write";
                  /** @enum {string} */
                  organization_secrets?: "read" | "write";
                  /** @enum {string} */
                  organization_self_hosted_runners?: "read" | "write";
                  /** @enum {string} */
                  organization_user_blocking?: "read" | "write";
                  /** @enum {string} */
                  packages?: "read" | "write";
                  /** @enum {string} */
                  pages?: "read" | "write";
                  /** @enum {string} */
                  pull_requests?: "read" | "write";
                  /** @enum {string} */
                  repository_hooks?: "read" | "write";
                  /** @enum {string} */
                  repository_projects?: "read" | "write";
                  /** @enum {string} */
                  secret_scanning_alerts?: "read" | "write";
                  /** @enum {string} */
                  secrets?: "read" | "write";
                  /** @enum {string} */
                  security_events?: "read" | "write";
                  /** @enum {string} */
                  security_scanning_alert?: "read" | "write";
                  /** @enum {string} */
                  single_file?: "read" | "write";
                  /** @enum {string} */
                  statuses?: "read" | "write";
                  /** @enum {string} */
                  team_discussions?: "read" | "write";
                  /** @enum {string} */
                  vulnerability_alerts?: "read" | "write";
                  /** @enum {string} */
                  workflows?: "read" | "write";
                };
                /** @description The slug name of the GitHub app */
                slug?: string;
                /** Format: date-time */
                updated_at: OneOf<[string, null]>;
              },
              null
            ]
          >;
          pull_request?: {
            /** Format: uri */
            diff_url?: string;
            /** Format: uri */
            html_url?: string;
            /** Format: date-time */
            merged_at?: OneOf<[string, null]>;
            /** Format: uri */
            patch_url?: string;
            /** Format: uri */
            url?: string;
          };
          /** Reactions */
          reactions: {
            "+1": number;
            "-1": number;
            confused: number;
            eyes: number;
            heart: number;
            hooray: number;
            laugh: number;
            rocket: number;
            total_count: number;
            /** Format: uri */
            url: string;
          };
          /** Format: uri */
          repository_url: string;
          /**
           * @description State of the issue; either 'open' or 'closed'
           * @enum {string}
           */
          state?: "open" | "closed";
          state_reason?: OneOf<[string, null]>;
          /** Format: uri */
          timeline_url?: string;
          /** @description Title of the issue */
          title: string;
          /** Format: date-time */
          updated_at: string;
          /**
           * Format: uri
           * @description URL for the issue
           */
          url: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /**
         * Repository
         * @description A git repository
         */
        new_repository: {
          /**
           * @description Whether to allow auto-merge for pull requests.
           * @default false
           */
          allow_auto_merge?: boolean;
          /** @description Whether to allow private forks */
          allow_forking?: boolean;
          /**
           * @description Whether to allow merge commits for pull requests.
           * @default true
           */
          allow_merge_commit?: boolean;
          /**
           * @description Whether to allow rebase merges for pull requests.
           * @default true
           */
          allow_rebase_merge?: boolean;
          /**
           * @description Whether to allow squash merges for pull requests.
           * @default true
           */
          allow_squash_merge?: boolean;
          allow_update_branch?: boolean;
          /** Format: uri-template */
          archive_url: string;
          /**
           * @description Whether the repository is archived.
           * @default false
           */
          archived: boolean;
          /** Format: uri-template */
          assignees_url: string;
          /** Format: uri-template */
          blobs_url: string;
          /** Format: uri-template */
          branches_url: string;
          /** Format: uri */
          clone_url: string;
          /** Format: uri-template */
          collaborators_url: string;
          /** Format: uri-template */
          comments_url: string;
          /** Format: uri-template */
          commits_url: string;
          /** Format: uri-template */
          compare_url: string;
          /** Format: uri-template */
          contents_url: string;
          /** Format: uri */
          contributors_url: string;
          created_at: number | string;
          /** @description The default branch of the repository. */
          default_branch: string;
          /**
           * @description Whether to delete head branches when pull requests are merged
           * @default false
           */
          delete_branch_on_merge?: boolean;
          /** Format: uri */
          deployments_url: string;
          description: OneOf<[string, null]>;
          /** @description Returns whether or not this repository is disabled. */
          disabled?: boolean;
          /** Format: uri */
          downloads_url: string;
          /** Format: uri */
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          /** Format: uri */
          forks_url: string;
          full_name: string;
          /** Format: uri-template */
          git_commits_url: string;
          /** Format: uri-template */
          git_refs_url: string;
          /** Format: uri-template */
          git_tags_url: string;
          /** Format: uri */
          git_url: string;
          /**
           * @description Whether downloads are enabled.
           * @default true
           */
          has_downloads: boolean;
          /**
           * @description Whether issues are enabled.
           * @default true
           */
          has_issues: boolean;
          has_pages: boolean;
          /**
           * @description Whether projects are enabled.
           * @default true
           */
          has_projects: boolean;
          /**
           * @description Whether the wiki is enabled.
           * @default true
           */
          has_wiki: boolean;
          /**
           * @description Whether discussions are enabled.
           * @default false
           */
          has_discussions: boolean;
          homepage: OneOf<[string, null]>;
          /** Format: uri */
          hooks_url: string;
          /** Format: uri */
          html_url: string;
          /** @description Unique identifier of the repository */
          id: number;
          is_template?: boolean;
          /** Format: uri-template */
          issue_comment_url: string;
          /** Format: uri-template */
          issue_events_url: string;
          /** Format: uri-template */
          issues_url: string;
          /** Format: uri-template */
          keys_url: string;
          /** Format: uri-template */
          labels_url: string;
          language: OneOf<[string, null]>;
          /** Format: uri */
          languages_url: string;
          /** License */
          license: OneOf<
            [
              {
                key: string;
                name: string;
                node_id: string;
                spdx_id: string;
                /** Format: uri */
                url: OneOf<[string, null]>;
              },
              null
            ]
          >;
          master_branch?: string;
          /** Format: uri */
          merges_url: string;
          /** Format: uri-template */
          milestones_url: string;
          /** Format: uri */
          mirror_url: OneOf<[string, null]>;
          /** @description The name of the repository. */
          name: string;
          node_id: string;
          /** Format: uri-template */
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string;
          /** User */
          owner: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          permissions?: {
            admin: boolean;
            maintain?: boolean;
            pull: boolean;
            push: boolean;
            triage?: boolean;
          };
          /** @description Whether the repository is private or public. */
          private: boolean;
          public?: boolean;
          /** Format: uri-template */
          pulls_url: string;
          pushed_at: number | string;
          /** Format: uri-template */
          releases_url: string;
          role_name?: OneOf<[string, null]>;
          size: number;
          ssh_url: string;
          stargazers?: number;
          stargazers_count: number;
          /** Format: uri */
          stargazers_url: string;
          /** Format: uri-template */
          statuses_url: string;
          /** Format: uri */
          subscribers_url: string;
          /** Format: uri */
          subscription_url: string;
          /** Format: uri */
          svn_url: string;
          /** Format: uri */
          tags_url: string;
          /** Format: uri */
          teams_url: string;
          topics: string[];
          /** Format: uri-template */
          trees_url: string;
          /** Format: date-time */
          updated_at: string;
          /** Format: uri */
          url: string;
          /** @enum {string} */
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          /** @description Whether to require contributors to sign off on web-based commits */
          web_commit_signoff_required?: boolean;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Issue
       * @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) itself.
       */
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues unassigned event */
    "webhook-issues-unassigned": {
      /**
       * @description The action that was performed.
       * @enum {string}
       */
      action: "unassigned";
      /** User */
      assignee?: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization" | "Mannequin";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Issue
       * @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) itself.
       */
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "reminder"
                | "pull_request_review_thread"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write" | "admin";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues unlabeled event */
    "webhook-issues-unlabeled": {
      /** @enum {string} */
      action: "unlabeled";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Issue
       * @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) itself.
       */
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "reminder"
                | "pull_request_review_thread"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write" | "admin";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      /** Label */
      label?: {
        /** @description 6-character hex code, without the leading #, identifying the color */
        color: string;
        default: boolean;
        description: OneOf<[string, null]>;
        id: number;
        /** @description The name of the label. */
        name: string;
        node_id: string;
        /**
         * Format: uri
         * @description URL for the label
         */
        url: string;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues unlocked event */
    "webhook-issues-unlocked": {
      /** @enum {string} */
      action: "unlocked";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      } & {
        active_lock_reason: null;
        assignee?: OneOf<[Record<string, never>, null]>;
        assignees?: OneOf<[Record<string, never>, null]>[];
        author_association?: string;
        body?: OneOf<[string, null]>;
        closed_at?: OneOf<[string, null]>;
        comments?: number;
        comments_url?: string;
        created_at?: string;
        events_url?: string;
        html_url?: string;
        id?: number;
        labels?: OneOf<[Record<string, never>, null]>[];
        labels_url?: string;
        /** @enum {boolean} */
        locked: false;
        milestone?: OneOf<[Record<string, never>, null]>;
        node_id?: string;
        number?: number;
        performed_via_github_app?: null;
        reactions?: {
          "+1"?: number;
          "-1"?: number;
          confused?: number;
          eyes?: number;
          heart?: number;
          hooray?: number;
          laugh?: number;
          rocket?: number;
          total_count?: number;
          url?: string;
        };
        repository_url?: string;
        state?: string;
        timeline_url?: string;
        title?: string;
        updated_at?: string;
        url?: string;
        user?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** issues unpinned event */
    "webhook-issues-unpinned": {
      /** @enum {string} */
      action: "unpinned";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Issue
       * @description The [issue](https://docs.github.com/github-ae@latest/rest/reference/issues) itself.
       */
      issue: {
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description Contents of the issue */
        body: OneOf<[string, null]>;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments: number;
        /** Format: uri */
        comments_url: string;
        /** Format: date-time */
        created_at: string;
        draft?: boolean;
        /** Format: uri */
        events_url: string;
        /** Format: uri */
        html_url: string;
        /** Format: int64 */
        id: number;
        labels?: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        /** Format: uri-template */
        labels_url: string;
        locked?: boolean;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /**
         * App
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        performed_via_github_app?: OneOf<
          [
            {
              /** Format: date-time */
              created_at: OneOf<[string, null]>;
              description: OneOf<[string, null]>;
              /** @description The list of events for the GitHub app */
              events?: (
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
              )[];
              /** Format: uri */
              external_url: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the GitHub app */
              id: OneOf<[number, null]>;
              /** @description The name of the GitHub app */
              name: string;
              node_id: string;
              /** User */
              owner: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /** @description The set of permissions for the GitHub app */
              permissions?: {
                /** @enum {string} */
                actions?: "read" | "write";
                /** @enum {string} */
                administration?: "read" | "write";
                /** @enum {string} */
                checks?: "read" | "write";
                /** @enum {string} */
                content_references?: "read" | "write";
                /** @enum {string} */
                contents?: "read" | "write";
                /** @enum {string} */
                deployments?: "read" | "write";
                /** @enum {string} */
                discussions?: "read" | "write";
                /** @enum {string} */
                emails?: "read" | "write";
                /** @enum {string} */
                environments?: "read" | "write";
                /** @enum {string} */
                issues?: "read" | "write";
                /** @enum {string} */
                keys?: "read" | "write";
                /** @enum {string} */
                members?: "read" | "write";
                /** @enum {string} */
                metadata?: "read" | "write";
                /** @enum {string} */
                organization_administration?: "read" | "write";
                /** @enum {string} */
                organization_hooks?: "read" | "write";
                /** @enum {string} */
                organization_packages?: "read" | "write";
                /** @enum {string} */
                organization_plan?: "read" | "write";
                /** @enum {string} */
                organization_projects?: "read" | "write";
                /** @enum {string} */
                organization_secrets?: "read" | "write";
                /** @enum {string} */
                organization_self_hosted_runners?: "read" | "write";
                /** @enum {string} */
                organization_user_blocking?: "read" | "write";
                /** @enum {string} */
                packages?: "read" | "write";
                /** @enum {string} */
                pages?: "read" | "write";
                /** @enum {string} */
                pull_requests?: "read" | "write";
                /** @enum {string} */
                repository_hooks?: "read" | "write";
                /** @enum {string} */
                repository_projects?: "read" | "write";
                /** @enum {string} */
                secret_scanning_alerts?: "read" | "write";
                /** @enum {string} */
                secrets?: "read" | "write";
                /** @enum {string} */
                security_events?: "read" | "write";
                /** @enum {string} */
                security_scanning_alert?: "read" | "write";
                /** @enum {string} */
                single_file?: "read" | "write";
                /** @enum {string} */
                statuses?: "read" | "write";
                /** @enum {string} */
                team_discussions?: "read" | "write";
                /** @enum {string} */
                vulnerability_alerts?: "read" | "write";
                /** @enum {string} */
                workflows?: "read" | "write";
              };
              /** @description The slug name of the GitHub app */
              slug?: string;
              /** Format: date-time */
              updated_at: OneOf<[string, null]>;
            },
            null
          ]
        >;
        pull_request?: {
          /** Format: uri */
          diff_url?: string;
          /** Format: uri */
          html_url?: string;
          /** Format: date-time */
          merged_at?: OneOf<[string, null]>;
          /** Format: uri */
          patch_url?: string;
          /** Format: uri */
          url?: string;
        };
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        repository_url: string;
        /**
         * @description State of the issue; either 'open' or 'closed'
         * @enum {string}
         */
        state?: "open" | "closed";
        state_reason?: OneOf<[string, null]>;
        /** Format: uri */
        timeline_url?: string;
        /** @description Title of the issue */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the issue
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** label created event */
    "webhook-label-created": {
      /** @enum {string} */
      action: "created";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** Label */
      label: {
        /** @description 6-character hex code, without the leading #, identifying the color */
        color: string;
        default: boolean;
        description: OneOf<[string, null]>;
        id: number;
        /** @description The name of the label. */
        name: string;
        node_id: string;
        /**
         * Format: uri
         * @description URL for the label
         */
        url: string;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** label deleted event */
    "webhook-label-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** Label */
      label: {
        /** @description 6-character hex code, without the leading #, identifying the color */
        color: string;
        default: boolean;
        description: OneOf<[string, null]>;
        id: number;
        /** @description The name of the label. */
        name: string;
        node_id: string;
        /**
         * Format: uri
         * @description URL for the label
         */
        url: string;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** label edited event */
    "webhook-label-edited": {
      /** @enum {string} */
      action: "edited";
      /** @description The changes to the label if the action was `edited`. */
      changes?: {
        color?: {
          /** @description The previous version of the color if the action was `edited`. */
          from: string;
        };
        description?: {
          /** @description The previous version of the description if the action was `edited`. */
          from: string;
        };
        name?: {
          /** @description The previous version of the name if the action was `edited`. */
          from: string;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** Label */
      label: {
        /** @description 6-character hex code, without the leading #, identifying the color */
        color: string;
        default: boolean;
        description: OneOf<[string, null]>;
        id: number;
        /** @description The name of the label. */
        name: string;
        node_id: string;
        /**
         * Format: uri
         * @description URL for the label
         */
        url: string;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** member added event */
    "webhook-member-added": {
      /** @enum {string} */
      action: "added";
      changes?: {
        permission?: {
          /** @enum {string} */
          to: "write" | "admin" | "read";
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** User */
      member: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** member edited event */
    "webhook-member-edited": {
      /** @enum {string} */
      action: "edited";
      /** @description The changes to the collaborator permissions */
      changes: {
        old_permission?: {
          /** @description The previous permissions of the collaborator if the action was edited. */
          from: string;
        };
        permission?: {
          from?: OneOf<[string, null]>;
          to?: OneOf<[string, null]>;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** User */
      member: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** member removed event */
    "webhook-member-removed": {
      /** @enum {string} */
      action: "removed";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** User */
      member: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** membership added event */
    "webhook-membership-added": {
      /** @enum {string} */
      action: "added";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** User */
      member: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
      organization: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      /**
       * @description The scope of the membership. Currently, can only be `team`.
       * @enum {string}
       */
      scope: "team";
      /** User */
      sender: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
      /**
       * Team
       * @description Groups of organization members that gives permissions on specified repositories.
       */
      team: {
        deleted?: boolean;
        /** @description Description of the team */
        description?: OneOf<[string, null]>;
        /** Format: uri */
        html_url?: string;
        /** @description Unique identifier of the team */
        id: number;
        /** Format: uri-template */
        members_url?: string;
        /** @description Name of the team */
        name: string;
        node_id?: string;
        parent?: OneOf<
          [
            {
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            },
            null
          ]
        >;
        /** @description Permission that the team will have for its repositories */
        permission?: string;
        /** @enum {string} */
        privacy?: "open" | "closed" | "secret";
        /** Format: uri */
        repositories_url?: string;
        slug?: string;
        /**
         * Format: uri
         * @description URL for the team
         */
        url?: string;
      };
    };
    /** membership removed event */
    "webhook-membership-removed": {
      /** @enum {string} */
      action: "removed";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** User */
      member: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
      organization: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      /**
       * @description The scope of the membership. Currently, can only be `team`.
       * @enum {string}
       */
      scope: "team" | "organization";
      /** User */
      sender: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
      /**
       * Team
       * @description Groups of organization members that gives permissions on specified repositories.
       */
      team: {
        deleted?: boolean;
        /** @description Description of the team */
        description?: OneOf<[string, null]>;
        /** Format: uri */
        html_url?: string;
        /** @description Unique identifier of the team */
        id: number;
        /** Format: uri-template */
        members_url?: string;
        /** @description Name of the team */
        name: string;
        node_id?: string;
        parent?: OneOf<
          [
            {
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            },
            null
          ]
        >;
        /** @description Permission that the team will have for its repositories */
        permission?: string;
        /** @enum {string} */
        privacy?: "open" | "closed" | "secret";
        /** Format: uri */
        repositories_url?: string;
        slug?: string;
        /**
         * Format: uri
         * @description URL for the team
         */
        url?: string;
      };
    };
    "webhook-merge-group-checks-requested": {
      action: string;
      installation?: components["schemas"]["simple-installation"];
      /** MergeGroup */
      merge_group: {
        /** @description The SHA of the merge group. */
        head_sha: string;
        /** @description The full ref of the merge group. */
        head_ref: string;
        /** @description The SHA of the merge group's parent commit. */
        base_sha: string;
        /** @description The full ref of the branch the merge group will be merged into. */
        base_ref: string;
        /** SimpleCommit */
        head_commit: {
          /**
           * Committer
           * @description Metaproperties for Git author/committer information.
           */
          author: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          };
          /**
           * Committer
           * @description Metaproperties for Git author/committer information.
           */
          committer: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          };
          id: string;
          message: string;
          timestamp: string;
          tree_id: string;
        };
      };
      organization?: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** meta deleted event */
    "webhook-meta-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      /** @description The modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace. */
      hook: {
        active: boolean;
        config: {
          /** @enum {string} */
          content_type: "json" | "form";
          insecure_ssl: string;
          secret?: string;
          /** Format: uri */
          url: string;
        };
        created_at: string;
        events: (
          | "*"
          | "branch_protection_rule"
          | "check_run"
          | "check_suite"
          | "code_scanning_alert"
          | "commit_comment"
          | "create"
          | "delete"
          | "deployment"
          | "deployment_status"
          | "deploy_key"
          | "discussion"
          | "discussion_comment"
          | "fork"
          | "gollum"
          | "issues"
          | "issue_comment"
          | "label"
          | "member"
          | "membership"
          | "meta"
          | "milestone"
          | "organization"
          | "org_block"
          | "package"
          | "page_build"
          | "project"
          | "project_card"
          | "project_column"
          | "public"
          | "pull_request"
          | "pull_request_review"
          | "pull_request_review_comment"
          | "pull_request_review_thread"
          | "push"
          | "registry_package"
          | "release"
          | "repository"
          | "repository_import"
          | "repository_vulnerability_alert"
          | "secret_scanning_alert"
          | "secret_scanning_alert_location"
          | "security_and_analysis"
          | "star"
          | "status"
          | "team"
          | "team_add"
          | "watch"
          | "workflow_job"
          | "workflow_run"
          | "repository_dispatch"
          | "projects_v2_item"
        )[];
        id: number;
        name: string;
        type: string;
        updated_at: string;
      };
      /** @description The id of the modified webhook. */
      hook_id: number;
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository?: null | components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** milestone closed event */
    "webhook-milestone-closed": {
      /** @enum {string} */
      action: "closed";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Milestone
       * @description A collection of related issues and pull requests.
       */
      milestone: {
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        closed_issues: number;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        description: OneOf<[string, null]>;
        /** Format: date-time */
        due_on: OneOf<[string, null]>;
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        labels_url: string;
        node_id: string;
        /** @description The number of the milestone. */
        number: number;
        open_issues: number;
        /**
         * @description The state of the milestone.
         * @enum {string}
         */
        state: "open" | "closed";
        /** @description The title of the milestone. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** milestone created event */
    "webhook-milestone-created": {
      /** @enum {string} */
      action: "created";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Milestone
       * @description A collection of related issues and pull requests.
       */
      milestone: {
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        closed_issues: number;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        description: OneOf<[string, null]>;
        /** Format: date-time */
        due_on: OneOf<[string, null]>;
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        labels_url: string;
        node_id: string;
        /** @description The number of the milestone. */
        number: number;
        open_issues: number;
        /**
         * @description The state of the milestone.
         * @enum {string}
         */
        state: "open" | "closed";
        /** @description The title of the milestone. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** milestone deleted event */
    "webhook-milestone-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Milestone
       * @description A collection of related issues and pull requests.
       */
      milestone: {
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        closed_issues: number;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        description: OneOf<[string, null]>;
        /** Format: date-time */
        due_on: OneOf<[string, null]>;
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        labels_url: string;
        node_id: string;
        /** @description The number of the milestone. */
        number: number;
        open_issues: number;
        /**
         * @description The state of the milestone.
         * @enum {string}
         */
        state: "open" | "closed";
        /** @description The title of the milestone. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** milestone edited event */
    "webhook-milestone-edited": {
      /** @enum {string} */
      action: "edited";
      /** @description The changes to the milestone if the action was `edited`. */
      changes: {
        description?: {
          /** @description The previous version of the description if the action was `edited`. */
          from: string;
        };
        due_on?: {
          /** @description The previous version of the due date if the action was `edited`. */
          from: string;
        };
        title?: {
          /** @description The previous version of the title if the action was `edited`. */
          from: string;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Milestone
       * @description A collection of related issues and pull requests.
       */
      milestone: {
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        closed_issues: number;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        description: OneOf<[string, null]>;
        /** Format: date-time */
        due_on: OneOf<[string, null]>;
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        labels_url: string;
        node_id: string;
        /** @description The number of the milestone. */
        number: number;
        open_issues: number;
        /**
         * @description The state of the milestone.
         * @enum {string}
         */
        state: "open" | "closed";
        /** @description The title of the milestone. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** milestone opened event */
    "webhook-milestone-opened": {
      /** @enum {string} */
      action: "opened";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Milestone
       * @description A collection of related issues and pull requests.
       */
      milestone: {
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        closed_issues: number;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        description: OneOf<[string, null]>;
        /** Format: date-time */
        due_on: OneOf<[string, null]>;
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        labels_url: string;
        node_id: string;
        /** @description The number of the milestone. */
        number: number;
        open_issues: number;
        /**
         * @description The state of the milestone.
         * @enum {string}
         */
        state: "open" | "closed";
        /** @description The title of the milestone. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** organization deleted event */
    "webhook-organization-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Membership
       * @description The membership between the user and the organization. Not present when the action is `member_invited`.
       */
      membership?: {
        /** Format: uri */
        organization_url: string;
        role: string;
        state: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      organization: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** organization member_added event */
    "webhook-organization-member-added": {
      /** @enum {string} */
      action: "member_added";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Membership
       * @description The membership between the user and the organization. Not present when the action is `member_invited`.
       */
      membership: {
        /** Format: uri */
        organization_url: string;
        role: string;
        state: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      organization: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** organization member_invited event */
    "webhook-organization-member-invited": {
      /** @enum {string} */
      action: "member_invited";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The invitation for the user or email if the action is `member_invited`. */
      invitation: {
        /** Format: date-time */
        created_at: string;
        email: OneOf<[string, null]>;
        /** Format: date-time */
        failed_at: OneOf<[string, null]>;
        failed_reason: OneOf<[string, null]>;
        id: number;
        /** Format: uri */
        invitation_teams_url: string;
        /** User */
        inviter: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        login: OneOf<[string, null]>;
        node_id: string;
        role: string;
        team_count: number;
        invitation_source?: string;
      };
      organization: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      /** User */
      user?: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
    };
    /** organization member_removed event */
    "webhook-organization-member-removed": {
      /** @enum {string} */
      action: "member_removed";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Membership
       * @description The membership between the user and the organization. Not present when the action is `member_invited`.
       */
      membership: {
        /** Format: uri */
        organization_url: string;
        role: string;
        state: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      organization: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** organization renamed event */
    "webhook-organization-renamed": {
      /** @enum {string} */
      action: "renamed";
      changes?: {
        login?: {
          from?: string;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /**
       * Membership
       * @description The membership between the user and the organization. Not present when the action is `member_invited`.
       */
      membership?: {
        /** Format: uri */
        organization_url: string;
        role: string;
        state: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      organization: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** package published event */
    "webhook-package-published": {
      /** @enum {string} */
      action: "published";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description Information about the package. */
      package: {
        created_at: OneOf<[string, null]>;
        description: OneOf<[string, null]>;
        ecosystem: string;
        /** Format: uri */
        html_url: string;
        id: number;
        name: string;
        namespace: string;
        /** User */
        owner: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        package_type: string;
        package_version: OneOf<
          [
            {
              /** User */
              author?: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              body?: string | Record<string, never>;
              body_html?: string;
              container_metadata?: OneOf<
                [
                  {
                    labels?: OneOf<[Record<string, never>, null]>;
                    manifest?: OneOf<[Record<string, never>, null]>;
                    tag?: {
                      digest?: string;
                      name?: string;
                    };
                  },
                  null
                ]
              >;
              created_at?: string;
              description: string;
              docker_metadata?: Record<string, never>[];
              draft?: boolean;
              /** Format: uri */
              html_url: string;
              id: number;
              installation_command: string;
              manifest?: string;
              metadata: {
                [key: string]: unknown | undefined;
              }[];
              name: string;
              npm_metadata?: OneOf<
                [
                  {
                    name?: string;
                    version?: string;
                    npm_user?: string;
                    author?: OneOf<[Record<string, never>, null]>;
                    bugs?: OneOf<[Record<string, never>, null]>;
                    dependencies?: Record<string, never>;
                    dev_dependencies?: Record<string, never>;
                    peer_dependencies?: Record<string, never>;
                    optional_dependencies?: Record<string, never>;
                    description?: string;
                    dist?: OneOf<[Record<string, never>, null]>;
                    git_head?: string;
                    homepage?: string;
                    license?: string;
                    main?: string;
                    repository?: OneOf<[Record<string, never>, null]>;
                    scripts?: Record<string, never>;
                    id?: string;
                    node_version?: string;
                    npm_version?: string;
                    has_shrinkwrap?: boolean;
                    maintainers?: Record<string, never>[];
                    contributors?: Record<string, never>[];
                    engines?: Record<string, never>;
                    keywords?: string[];
                    files?: string[];
                    bin?: Record<string, never>;
                    man?: Record<string, never>;
                    directories?: OneOf<[Record<string, never>, null]>;
                    os?: string[];
                    cpu?: string[];
                    readme?: string;
                    installation_command?: string;
                    release_id?: number;
                    commit_oid?: string;
                    published_via_actions?: boolean;
                    deleted_by_id?: number;
                  },
                  null
                ]
              >;
              nuget_metadata?: OneOf<
                [
                  {
                    id?: number | string;
                    name?: string;
                    value?: OneOf<
                      [
                        boolean,
                        string,
                        number,
                        {
                          url?: string;
                          branch?: string;
                          commit?: string;
                          type?: string;
                        }
                      ]
                    >;
                  }[],
                  null
                ]
              >;
              package_files: {
                content_type: string;
                created_at: string;
                /** Format: uri */
                download_url: string;
                id: number;
                md5: OneOf<[string, null]>;
                name: string;
                sha1: OneOf<[string, null]>;
                sha256: OneOf<[string, null]>;
                size: number;
                state: OneOf<[string, null]>;
                updated_at: string;
              }[];
              package_url?: string;
              prerelease?: boolean;
              release?: {
                /** User */
                author: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                created_at: string;
                draft: boolean;
                /** Format: uri */
                html_url: string;
                id: number;
                name: OneOf<[string, null]>;
                prerelease: boolean;
                published_at: string;
                tag_name: string;
                target_commitish: string;
                /** Format: uri */
                url: string;
              };
              rubygems_metadata?: Record<string, never>[];
              source_url?: string;
              summary: string;
              tag_name?: string;
              target_commitish?: string;
              target_oid?: string;
              updated_at?: string;
              version: string;
            },
            null
          ]
        >;
        registry: OneOf<
          [
            {
              /** Format: uri */
              about_url: string;
              name: string;
              type: string;
              /** Format: uri */
              url: string;
              vendor: string;
            },
            null
          ]
        >;
        updated_at: OneOf<[string, null]>;
      };
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** package updated event */
    "webhook-package-updated": {
      /** @enum {string} */
      action: "updated";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** @description Information about the package. */
      package: {
        created_at: string;
        description: OneOf<[string, null]>;
        ecosystem: string;
        /** Format: uri */
        html_url: string;
        id: number;
        name: string;
        namespace: string;
        /** User */
        owner: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        package_type: string;
        package_version: {
          /** User */
          author: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          body: string;
          body_html: string;
          created_at: string;
          description: string;
          docker_metadata?: Record<string, never>[];
          draft?: boolean;
          /** Format: uri */
          html_url: string;
          id: number;
          installation_command: string;
          manifest?: string;
          metadata: Record<string, never>[];
          name: string;
          package_files: {
            content_type: string;
            created_at: string;
            /** Format: uri */
            download_url: string;
            id: number;
            md5: OneOf<[string, null]>;
            name: string;
            sha1: OneOf<[string, null]>;
            sha256: string;
            size: number;
            state: string;
            updated_at: string;
          }[];
          package_url?: string;
          prerelease?: boolean;
          release?: {
            /** User */
            author: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            created_at: string;
            draft: boolean;
            /** Format: uri */
            html_url: string;
            id: number;
            name: string;
            prerelease: boolean;
            published_at: string;
            tag_name: string;
            target_commitish: string;
            /** Format: uri */
            url: string;
          };
          rubygems_metadata?: Record<string, never>[];
          /** Format: uri */
          source_url?: string;
          summary: string;
          tag_name?: string;
          target_commitish: string;
          target_oid: string;
          updated_at: string;
          version: string;
        };
        registry: OneOf<
          [
            {
              /** Format: uri */
              about_url: string;
              name: string;
              type: string;
              /** Format: uri */
              url: string;
              vendor: string;
            },
            null
          ]
        >;
        updated_at: string;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** page_build event */
    "webhook-page-build": {
      /** @description The [List GitHub Pages builds](https://docs.github.com/github-ae@latest/rest/reference/repos#list-github-pages-builds) itself. */
      build: {
        commit: OneOf<[string, null]>;
        created_at: string;
        duration: number;
        error: {
          message: OneOf<[string, null]>;
        };
        /** User */
        pusher: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        status: string;
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      enterprise?: components["schemas"]["enterprise"];
      id: number;
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    "webhook-ping": {
      /**
       * Webhook
       * @description The webhook that is being pinged
       */
      hook?: {
        /** @description Determines whether the hook is actually triggered for the events it subscribes to. */
        active: boolean;
        /** @description Only included for GitHub Apps. When you register a new GitHub App, GitHub sends a ping event to the webhook URL you specified during registration. The GitHub App ID sent in this field is required for authenticating an app. */
        app_id?: number;
        config: {
          content_type?: components["schemas"]["webhook-config-content-type"];
          insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
          secret?: components["schemas"]["webhook-config-secret"];
          url?: components["schemas"]["webhook-config-url"];
        };
        /** Format: date-time */
        created_at: string;
        /** Format: uri */
        deliveries_url?: string;
        /** @description Determines what events the hook is triggered for. Default: ['push']. */
        events: string[];
        /** @description Unique identifier of the webhook. */
        id: number;
        last_response?: components["schemas"]["hook-response"];
        /**
         * @description The type of webhook. The only valid value is 'web'.
         * @enum {string}
         */
        name: "web";
        /** Format: uri */
        ping_url?: string;
        /** Format: uri */
        test_url?: string;
        type: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url?: string;
      };
      /** @description The ID of the webhook that triggered the ping. */
      hook_id?: number;
      organization?: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
      /** @description Random string of GitHub zen. */
      zen?: string;
    };
    /** @description The webhooks ping payload encoded with URL encoding. */
    "webhook-ping-form-encoded": {
      /** @description A URL-encoded string of the ping JSON payload. The decoded payload is a JSON object. */
      payload: string;
    };
    /** project_card converted event */
    "webhook-project-card-converted": {
      /** @enum {string} */
      action: "converted";
      changes: {
        note: {
          from: string;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Project Card */
      project_card: {
        after_id?: OneOf<[number, null]>;
        /** @description Whether or not the card is archived */
        archived: boolean;
        column_id: number;
        /** Format: uri */
        column_url: string;
        /** Format: uri */
        content_url?: string;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** @description The project card's ID */
        id: number;
        node_id: string;
        note: OneOf<[string, null]>;
        /** Format: uri */
        project_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** project_card created event */
    "webhook-project-card-created": {
      /** @enum {string} */
      action: "created";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Project Card */
      project_card: {
        after_id?: OneOf<[number, null]>;
        /** @description Whether or not the card is archived */
        archived: boolean;
        column_id: number;
        /** Format: uri */
        column_url: string;
        /** Format: uri */
        content_url?: string;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** @description The project card's ID */
        id: number;
        node_id: string;
        note: OneOf<[string, null]>;
        /** Format: uri */
        project_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** project_card deleted event */
    "webhook-project-card-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Project Card */
      project_card: {
        after_id?: OneOf<[number, null]>;
        /** @description Whether or not the card is archived */
        archived: boolean;
        column_id: OneOf<[number, null]>;
        /** Format: uri */
        column_url: string;
        /** Format: uri */
        content_url?: string;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** @description The project card's ID */
        id: number;
        node_id: string;
        note: OneOf<[string, null]>;
        /** Format: uri */
        project_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      repository?: null | components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** project_card edited event */
    "webhook-project-card-edited": {
      /** @enum {string} */
      action: "edited";
      changes: {
        note: {
          from: OneOf<[string, null]>;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Project Card */
      project_card: {
        after_id?: OneOf<[number, null]>;
        /** @description Whether or not the card is archived */
        archived: boolean;
        column_id: number;
        /** Format: uri */
        column_url: string;
        /** Format: uri */
        content_url?: string;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** @description The project card's ID */
        id: number;
        node_id: string;
        note: OneOf<[string, null]>;
        /** Format: uri */
        project_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** project_card moved event */
    "webhook-project-card-moved": {
      /** @enum {string} */
      action: "moved";
      changes?: {
        column_id: {
          from: number;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      project_card: {
        after_id?: OneOf<[number, null]>;
        /** @description Whether or not the card is archived */
        archived: boolean;
        column_id: number;
        /** Format: uri */
        column_url: string;
        /** Format: uri */
        content_url?: string;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** @description The project card's ID */
        id: number;
        node_id: string;
        note: OneOf<[string, null]>;
        /** Format: uri */
        project_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      } & {
        after_id: OneOf<[number, null]>;
        archived?: boolean;
        column_id?: number;
        column_url?: string;
        created_at?: string;
        creator?: OneOf<
          [
            {
              avatar_url?: string;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id?: number;
              login?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: string;
              url?: string;
            },
            null
          ]
        >;
        id?: number;
        node_id?: string;
        note?: OneOf<[string, null]>;
        project_url?: string;
        updated_at?: string;
        url?: string;
      };
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** project closed event */
    "webhook-project-closed": {
      /** @enum {string} */
      action: "closed";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Project */
      project: {
        /** @description Body of the project */
        body: OneOf<[string, null]>;
        /** Format: uri */
        columns_url: string;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** Format: uri */
        html_url: string;
        id: number;
        /** @description Name of the project */
        name: string;
        node_id: string;
        number: number;
        /** Format: uri */
        owner_url: string;
        /**
         * @description State of the project; either 'open' or 'closed'
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** project_column created event */
    "webhook-project-column-created": {
      /** @enum {string} */
      action: "created";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Project Column */
      project_column: {
        after_id?: OneOf<[number, null]>;
        /** Format: uri */
        cards_url: string;
        /** Format: date-time */
        created_at: string;
        /** @description The unique identifier of the project column */
        id: number;
        /** @description Name of the project column */
        name: string;
        node_id: string;
        /** Format: uri */
        project_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      repository?: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** project_column deleted event */
    "webhook-project-column-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Project Column */
      project_column: {
        after_id?: OneOf<[number, null]>;
        /** Format: uri */
        cards_url: string;
        /** Format: date-time */
        created_at: string;
        /** @description The unique identifier of the project column */
        id: number;
        /** @description Name of the project column */
        name: string;
        node_id: string;
        /** Format: uri */
        project_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      repository?: null | components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** project_column edited event */
    "webhook-project-column-edited": {
      /** @enum {string} */
      action: "edited";
      changes: {
        name?: {
          from: string;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Project Column */
      project_column: {
        after_id?: OneOf<[number, null]>;
        /** Format: uri */
        cards_url: string;
        /** Format: date-time */
        created_at: string;
        /** @description The unique identifier of the project column */
        id: number;
        /** @description Name of the project column */
        name: string;
        node_id: string;
        /** Format: uri */
        project_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      repository?: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** project_column moved event */
    "webhook-project-column-moved": {
      /** @enum {string} */
      action: "moved";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Project Column */
      project_column: {
        after_id?: OneOf<[number, null]>;
        /** Format: uri */
        cards_url: string;
        /** Format: date-time */
        created_at: string;
        /** @description The unique identifier of the project column */
        id: number;
        /** @description Name of the project column */
        name: string;
        node_id: string;
        /** Format: uri */
        project_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** project created event */
    "webhook-project-created": {
      /** @enum {string} */
      action: "created";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Project */
      project: {
        /** @description Body of the project */
        body: OneOf<[string, null]>;
        /** Format: uri */
        columns_url: string;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** Format: uri */
        html_url: string;
        id: number;
        /** @description Name of the project */
        name: string;
        node_id: string;
        number: number;
        /** Format: uri */
        owner_url: string;
        /**
         * @description State of the project; either 'open' or 'closed'
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** project deleted event */
    "webhook-project-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Project */
      project: {
        /** @description Body of the project */
        body: OneOf<[string, null]>;
        /** Format: uri */
        columns_url: string;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** Format: uri */
        html_url: string;
        id: number;
        /** @description Name of the project */
        name: string;
        node_id: string;
        number: number;
        /** Format: uri */
        owner_url: string;
        /**
         * @description State of the project; either 'open' or 'closed'
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      repository?: null | components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** project edited event */
    "webhook-project-edited": {
      /** @enum {string} */
      action: "edited";
      /** @description The changes to the project if the action was `edited`. */
      changes?: {
        body?: {
          /** @description The previous version of the body if the action was `edited`. */
          from: string;
        };
        name?: {
          /** @description The changes to the project if the action was `edited`. */
          from: string;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Project */
      project: {
        /** @description Body of the project */
        body: OneOf<[string, null]>;
        /** Format: uri */
        columns_url: string;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** Format: uri */
        html_url: string;
        id: number;
        /** @description Name of the project */
        name: string;
        node_id: string;
        number: number;
        /** Format: uri */
        owner_url: string;
        /**
         * @description State of the project; either 'open' or 'closed'
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      repository?: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** project reopened event */
    "webhook-project-reopened": {
      /** @enum {string} */
      action: "reopened";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Project */
      project: {
        /** @description Body of the project */
        body: OneOf<[string, null]>;
        /** Format: uri */
        columns_url: string;
        /** Format: date-time */
        created_at: string;
        /** User */
        creator: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** Format: uri */
        html_url: string;
        id: number;
        /** @description Name of the project */
        name: string;
        node_id: string;
        number: number;
        /** Format: uri */
        owner_url: string;
        /**
         * @description State of the project; either 'open' or 'closed'
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
      };
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** Projects v2 Project Closed Event */
    "webhook-projects-v2-project-closed": {
      /** @enum {string} */
      action: "closed";
      organization: components["schemas"]["organization-simple"];
      projects_v2: components["schemas"]["projects-v2"];
      sender: components["schemas"]["simple-user"];
    };
    /** @description A project was created */
    "webhook-projects-v2-project-created": {
      /** @enum {string} */
      action: "created";
      organization: components["schemas"]["organization-simple"];
      projects_v2: components["schemas"]["projects-v2"];
      sender: components["schemas"]["simple-user"];
    };
    /** Projects v2 Project Deleted Event */
    "webhook-projects-v2-project-deleted": {
      /** @enum {string} */
      action: "deleted";
      organization: components["schemas"]["organization-simple"];
      projects_v2: components["schemas"]["projects-v2"];
      sender: components["schemas"]["simple-user"];
    };
    /** Projects v2 Project Edited Event */
    "webhook-projects-v2-project-edited": {
      /** @enum {string} */
      action: "edited";
      changes: {
        description?: {
          from?: OneOf<[string, null]>;
          to?: OneOf<[string, null]>;
        };
        public?: {
          from?: boolean;
          to?: boolean;
        };
        short_description?: {
          from?: OneOf<[string, null]>;
          to?: OneOf<[string, null]>;
        };
        title?: {
          from?: string;
          to?: string;
        };
      };
      organization: components["schemas"]["organization-simple"];
      projects_v2: components["schemas"]["projects-v2"];
      sender: components["schemas"]["simple-user"];
    };
    /** Projects v2 Project Reopened Event */
    "webhook-projects-v2-project-reopened": {
      /** @enum {string} */
      action: "reopened";
      organization: components["schemas"]["organization-simple"];
      projects_v2: components["schemas"]["projects-v2"];
      sender: components["schemas"]["simple-user"];
    };
    /** public event */
    "webhook-public": {
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request assigned event */
    "webhook-pull-request-assigned": {
      /** @enum {string} */
      action: "assigned";
      /** User */
      assignee: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The pull request number. */
      number: number;
      organization?: components["schemas"]["organization-simple"];
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        additions?: number;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        changed_files?: number;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments?: number;
        /** Format: uri */
        comments_url: string;
        commits?: number;
        /** Format: uri */
        commits_url: string;
        /** Format: date-time */
        created_at: string;
        deletions?: number;
        /** Format: uri */
        diff_url: string;
        /** @description Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: OneOf<[string, null]>;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: OneOf<
            [
              {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              },
              null
            ]
          >;
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        /** @description Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        mergeable?: OneOf<[boolean, null]>;
        mergeable_state?: string;
        merged?: OneOf<[boolean, null]>;
        /** Format: date-time */
        merged_at: OneOf<[string, null]>;
        /** User */
        merged_by?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        /** @description Number uniquely identifying the pull request within its repository. */
        number: number;
        /** Format: uri */
        patch_url: string;
        rebaseable?: OneOf<[boolean, null]>;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** Format: uri */
        review_comments_url: string;
        /**
         * @description State of this Pull Request. Either `open` or `closed`.
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        /** @description The title of the pull request. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request auto_merge_disabled event */
    "webhook-pull-request-auto-merge-disabled": {
      /** @enum {string} */
      action: "auto_merge_disabled";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      number: number;
      organization?: components["schemas"]["organization-simple"];
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        additions?: number;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        changed_files?: number;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments?: number;
        /** Format: uri */
        comments_url: string;
        commits?: number;
        /** Format: uri */
        commits_url: string;
        /** Format: date-time */
        created_at: string;
        deletions?: number;
        /** Format: uri */
        diff_url: string;
        /** @description Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        /** @description Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        mergeable?: OneOf<[boolean, null]>;
        mergeable_state?: string;
        merged?: OneOf<[boolean, null]>;
        /** Format: date-time */
        merged_at: OneOf<[string, null]>;
        /** User */
        merged_by?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        /** @description Number uniquely identifying the pull request within its repository. */
        number: number;
        /** Format: uri */
        patch_url: string;
        rebaseable?: OneOf<[boolean, null]>;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** Format: uri */
        review_comments_url: string;
        /**
         * @description State of this Pull Request. Either `open` or `closed`.
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        /** @description The title of the pull request. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      reason: string;
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request auto_merge_enabled event */
    "webhook-pull-request-auto-merge-enabled": {
      /** @enum {string} */
      action: "auto_merge_enabled";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      number: number;
      organization?: components["schemas"]["organization-simple"];
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        additions?: number;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        changed_files?: number;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments?: number;
        /** Format: uri */
        comments_url: string;
        commits?: number;
        /** Format: uri */
        commits_url: string;
        /** Format: date-time */
        created_at: string;
        deletions?: number;
        /** Format: uri */
        diff_url: string;
        /** @description Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        /** @description Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        mergeable?: OneOf<[boolean, null]>;
        mergeable_state?: string;
        merged?: OneOf<[boolean, null]>;
        /** Format: date-time */
        merged_at: OneOf<[string, null]>;
        /** User */
        merged_by?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        /** @description Number uniquely identifying the pull request within its repository. */
        number: number;
        /** Format: uri */
        patch_url: string;
        rebaseable?: OneOf<[boolean, null]>;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** Format: uri */
        review_comments_url: string;
        /**
         * @description State of this Pull Request. Either `open` or `closed`.
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        /** @description The title of the pull request. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      reason?: string;
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request closed event */
    "webhook-pull-request-closed": {
      /** @enum {string} */
      action: "closed";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The pull request number. */
      number: number;
      organization?: components["schemas"]["organization-simple"];
      pull_request: components["schemas"]["pull-request"] & {
        /**
         * @description Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** @description Whether to allow updating the pull request's branch. */
        allow_update_branch?: boolean;
        /**
         * @description Whether to delete head branches when pull requests are merged.
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @description The default value for a merge commit message.
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * @description The default value for a merge commit title.
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
         * @enum {string}
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @description The default value for a squash merge commit message:
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * @description The default value for a squash merge commit title:
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         * @enum {string}
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        /**
         * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request converted_to_draft event */
    "webhook-pull-request-converted-to-draft": {
      /** @enum {string} */
      action: "converted_to_draft";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The pull request number. */
      number: number;
      organization?: components["schemas"]["organization-simple"];
      pull_request: components["schemas"]["pull-request"] & {
        /**
         * @description Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** @description Whether to allow updating the pull request's branch. */
        allow_update_branch?: boolean;
        /**
         * @description Whether to delete head branches when pull requests are merged.
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @description The default value for a merge commit message.
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * @description The default value for a merge commit title.
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
         * @enum {string}
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @description The default value for a squash merge commit message:
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * @description The default value for a squash merge commit title:
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         * @enum {string}
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        /**
         * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request demilestoned event */
    "webhook-pull-request-demilestoned": {
      /** @enum {string} */
      action: "demilestoned";
      enterprise?: components["schemas"]["enterprise"];
      milestone?: components["schemas"]["milestone"];
      /** @description The pull request number. */
      number: number;
      organization?: components["schemas"]["organization-simple"];
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        additions?: number;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        changed_files?: number;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments?: number;
        /** Format: uri */
        comments_url: string;
        commits?: number;
        /** Format: uri */
        commits_url: string;
        /** Format: date-time */
        created_at: string;
        deletions?: number;
        /** Format: uri */
        diff_url: string;
        /** @description Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        /** @description Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        mergeable?: OneOf<[boolean, null]>;
        mergeable_state?: string;
        merged?: OneOf<[boolean, null]>;
        /** Format: date-time */
        merged_at: OneOf<[string, null]>;
        /** User */
        merged_by?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        /** @description Number uniquely identifying the pull request within its repository. */
        number: number;
        /** Format: uri */
        patch_url: string;
        rebaseable?: OneOf<[boolean, null]>;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description?: OneOf<[string, null]>;
              /** Format: uri */
              html_url?: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url?: string;
              /** @description Name of the team */
              name: string;
              node_id?: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission?: string;
              /** @enum {string} */
              privacy?: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url?: string;
              slug?: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url?: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** Format: uri */
        review_comments_url: string;
        /**
         * @description State of this Pull Request. Either `open` or `closed`.
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        /** @description The title of the pull request. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** pull_request edited event */
    "webhook-pull-request-edited": {
      /** @enum {string} */
      action: "edited";
      /** @description The changes to the comment if the action was `edited`. */
      changes: {
        base?: {
          ref: {
            from: string;
          };
          sha: {
            from: string;
          };
        };
        body?: {
          /** @description The previous version of the body if the action was `edited`. */
          from: string;
        };
        title?: {
          /** @description The previous version of the title if the action was `edited`. */
          from: string;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The pull request number. */
      number: number;
      organization?: components["schemas"]["organization-simple"];
      pull_request: components["schemas"]["pull-request"] & {
        /**
         * @description Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** @description Whether to allow updating the pull request's branch. */
        allow_update_branch?: boolean;
        /**
         * @description Whether to delete head branches when pull requests are merged.
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @description The default value for a merge commit message.
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * @description The default value for a merge commit title.
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
         * @enum {string}
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @description The default value for a squash merge commit message:
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * @description The default value for a squash merge commit title:
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         * @enum {string}
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        /**
         * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
      };
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** pull_request labeled event */
    "webhook-pull-request-labeled": {
      /** @enum {string} */
      action: "labeled";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** Label */
      label?: {
        /** @description 6-character hex code, without the leading #, identifying the color */
        color: string;
        default: boolean;
        description: OneOf<[string, null]>;
        id: number;
        /** @description The name of the label. */
        name: string;
        node_id: string;
        /**
         * Format: uri
         * @description URL for the label
         */
        url: string;
      };
      /** @description The pull request number. */
      number: number;
      organization?: components["schemas"]["organization-simple"];
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        additions?: number;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        changed_files?: number;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments?: number;
        /** Format: uri */
        comments_url: string;
        commits?: number;
        /** Format: uri */
        commits_url: string;
        /** Format: date-time */
        created_at: string;
        deletions?: number;
        /** Format: uri */
        diff_url: string;
        /** @description Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: OneOf<[string, null]>;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: OneOf<
            [
              {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              },
              null
            ]
          >;
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        /** @description Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        mergeable?: OneOf<[boolean, null]>;
        mergeable_state?: string;
        merged?: OneOf<[boolean, null]>;
        /** Format: date-time */
        merged_at: OneOf<[string, null]>;
        /** User */
        merged_by?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        /** @description Number uniquely identifying the pull request within its repository. */
        number: number;
        /** Format: uri */
        patch_url: string;
        rebaseable?: OneOf<[boolean, null]>;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** Format: uri */
        review_comments_url: string;
        /**
         * @description State of this Pull Request. Either `open` or `closed`.
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        /** @description The title of the pull request. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request locked event */
    "webhook-pull-request-locked": {
      /** @enum {string} */
      action: "locked";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The pull request number. */
      number: number;
      organization?: components["schemas"]["organization-simple"];
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        additions?: number;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        changed_files?: number;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments?: number;
        /** Format: uri */
        comments_url: string;
        commits?: number;
        /** Format: uri */
        commits_url: string;
        /** Format: date-time */
        created_at: string;
        deletions?: number;
        /** Format: uri */
        diff_url: string;
        /** @description Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: OneOf<[string, null]>;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: OneOf<
            [
              {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              },
              null
            ]
          >;
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        /** @description Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        mergeable?: OneOf<[boolean, null]>;
        mergeable_state?: string;
        merged?: OneOf<[boolean, null]>;
        /** Format: date-time */
        merged_at: OneOf<[string, null]>;
        /** User */
        merged_by?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        /** @description Number uniquely identifying the pull request within its repository. */
        number: number;
        /** Format: uri */
        patch_url: string;
        rebaseable?: OneOf<[boolean, null]>;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** Format: uri */
        review_comments_url: string;
        /**
         * @description State of this Pull Request. Either `open` or `closed`.
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        /** @description The title of the pull request. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request milestoned event */
    "webhook-pull-request-milestoned": {
      /** @enum {string} */
      action: "milestoned";
      enterprise?: components["schemas"]["enterprise"];
      milestone?: components["schemas"]["milestone"];
      /** @description The pull request number. */
      number: number;
      organization?: components["schemas"]["organization-simple"];
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        additions?: number;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        changed_files?: number;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments?: number;
        /** Format: uri */
        comments_url: string;
        commits?: number;
        /** Format: uri */
        commits_url: string;
        /** Format: date-time */
        created_at: string;
        deletions?: number;
        /** Format: uri */
        diff_url: string;
        /** @description Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        /** @description Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        mergeable?: OneOf<[boolean, null]>;
        mergeable_state?: string;
        merged?: OneOf<[boolean, null]>;
        /** Format: date-time */
        merged_at: OneOf<[string, null]>;
        /** User */
        merged_by?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        /** @description Number uniquely identifying the pull request within its repository. */
        number: number;
        /** Format: uri */
        patch_url: string;
        rebaseable?: OneOf<[boolean, null]>;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description?: OneOf<[string, null]>;
              /** Format: uri */
              html_url?: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url?: string;
              /** @description Name of the team */
              name: string;
              node_id?: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission?: string;
              /** @enum {string} */
              privacy?: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url?: string;
              slug?: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url?: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** Format: uri */
        review_comments_url: string;
        /**
         * @description State of this Pull Request. Either `open` or `closed`.
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        /** @description The title of the pull request. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** pull_request opened event */
    "webhook-pull-request-opened": {
      /** @enum {string} */
      action: "opened";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The pull request number. */
      number: number;
      organization?: components["schemas"]["organization-simple"];
      pull_request: components["schemas"]["pull-request"] & {
        /**
         * @description Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** @description Whether to allow updating the pull request's branch. */
        allow_update_branch?: boolean;
        /**
         * @description Whether to delete head branches when pull requests are merged.
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @description The default value for a merge commit message.
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * @description The default value for a merge commit title.
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         * @enum {string}
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @description The default value for a squash merge commit message:
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * @description The default value for a squash merge commit title:
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         * @enum {string}
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        /**
         * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request ready_for_review event */
    "webhook-pull-request-ready-for-review": {
      /** @enum {string} */
      action: "ready_for_review";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The pull request number. */
      number: number;
      organization?: components["schemas"]["organization-simple"];
      pull_request: components["schemas"]["pull-request"] & {
        /**
         * @description Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** @description Whether to allow updating the pull request's branch. */
        allow_update_branch?: boolean;
        /**
         * @description Whether to delete head branches when pull requests are merged.
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @description The default value for a merge commit message.
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * @description The default value for a merge commit title.
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
         * @enum {string}
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @description The default value for a squash merge commit message:
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * @description The default value for a squash merge commit title:
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         * @enum {string}
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        /**
         * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request reopened event */
    "webhook-pull-request-reopened": {
      /** @enum {string} */
      action: "reopened";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The pull request number. */
      number: number;
      organization?: components["schemas"]["organization-simple"];
      pull_request: components["schemas"]["pull-request"] & {
        /**
         * @description Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** @description Whether to allow updating the pull request's branch. */
        allow_update_branch?: boolean;
        /**
         * @description Whether to delete head branches when pull requests are merged.
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * @description The default value for a merge commit message.
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * @description The default value for a merge commit title.
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
         * @enum {string}
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * @description The default value for a squash merge commit message:
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * @description The default value for a squash merge commit title:
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         * @enum {string}
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        /**
         * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request_review_comment created event */
    "webhook-pull-request-review-comment-created": {
      /** @enum {string} */
      action: "created";
      /**
       * Pull Request Review Comment
       * @description The [comment](https://docs.github.com/github-ae@latest/rest/reference/pulls#comments) itself.
       */
      comment: {
        _links: {
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          pull_request: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
        };
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description The text of the comment. */
        body: string;
        /** @description The SHA of the commit to which the comment applies. */
        commit_id: string;
        /** Format: date-time */
        created_at: string;
        /** @description The diff of the line that the comment refers to. */
        diff_hunk: string;
        /**
         * Format: uri
         * @description HTML URL for the pull request review comment.
         */
        html_url: string;
        /** @description The ID of the pull request review comment. */
        id: number;
        /** @description The comment ID to reply to. */
        in_reply_to_id?: number;
        /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
        line: OneOf<[number, null]>;
        /** @description The node ID of the pull request review comment. */
        node_id: string;
        /** @description The SHA of the original commit to which the comment applies. */
        original_commit_id: string;
        /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
        original_line: OneOf<[number, null]>;
        /** @description The index of the original line in the diff to which the comment applies. */
        original_position: number;
        /** @description The first line of the range for a multi-line comment. */
        original_start_line: OneOf<[number, null]>;
        /** @description The relative path of the file to which the comment applies. */
        path: string;
        /** @description The line index in the diff to which the comment applies. */
        position: OneOf<[number, null]>;
        /** @description The ID of the pull request review to which the comment belongs. */
        pull_request_review_id: OneOf<[number, null]>;
        /**
         * Format: uri
         * @description URL for the pull request that the review comment belongs to.
         */
        pull_request_url: string;
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /**
         * @description The side of the first line of the range for a multi-line comment.
         * @enum {string}
         */
        side: "LEFT" | "RIGHT";
        /** @description The first line of the range for a multi-line comment. */
        start_line: OneOf<[number, null]>;
        /**
         * @description The side of the first line of the range for a multi-line comment.
         * @default RIGHT
         * @enum {string|null}
         */
        start_side: "LEFT" | "RIGHT" | "" | null;
        /**
         * @description The level at which the comment is targeted, can be a diff line or a file.
         * @enum {string}
         */
        subject_type?: "line" | "file";
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the pull request review comment
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge?: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        closed_at: OneOf<[string, null]>;
        /** Format: uri */
        comments_url: string;
        /** Format: uri */
        commits_url: string;
        created_at: string;
        /** Format: uri */
        diff_url: string;
        draft?: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: OneOf<
            [
              {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions?: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              },
              null
            ]
          >;
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        merged_at: OneOf<[string, null]>;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /** Format: uri */
        patch_url: string;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        /** Format: uri */
        review_comments_url: string;
        /** @enum {string} */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        title: string;
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request_review_comment deleted event */
    "webhook-pull-request-review-comment-deleted": {
      /** @enum {string} */
      action: "deleted";
      /**
       * Pull Request Review Comment
       * @description The [comment](https://docs.github.com/github-ae@latest/rest/reference/pulls#comments) itself.
       */
      comment: {
        _links: {
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          pull_request: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
        };
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description The text of the comment. */
        body: string;
        /** @description The SHA of the commit to which the comment applies. */
        commit_id: string;
        /** Format: date-time */
        created_at: string;
        /** @description The diff of the line that the comment refers to. */
        diff_hunk: string;
        /**
         * Format: uri
         * @description HTML URL for the pull request review comment.
         */
        html_url: string;
        /** @description The ID of the pull request review comment. */
        id: number;
        /** @description The comment ID to reply to. */
        in_reply_to_id?: number;
        /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
        line: OneOf<[number, null]>;
        /** @description The node ID of the pull request review comment. */
        node_id: string;
        /** @description The SHA of the original commit to which the comment applies. */
        original_commit_id: string;
        /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
        original_line: number;
        /** @description The index of the original line in the diff to which the comment applies. */
        original_position: number;
        /** @description The first line of the range for a multi-line comment. */
        original_start_line: OneOf<[number, null]>;
        /** @description The relative path of the file to which the comment applies. */
        path: string;
        /** @description The line index in the diff to which the comment applies. */
        position: OneOf<[number, null]>;
        /** @description The ID of the pull request review to which the comment belongs. */
        pull_request_review_id: OneOf<[number, null]>;
        /**
         * Format: uri
         * @description URL for the pull request that the review comment belongs to.
         */
        pull_request_url: string;
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /**
         * @description The side of the first line of the range for a multi-line comment.
         * @enum {string}
         */
        side: "LEFT" | "RIGHT";
        /** @description The first line of the range for a multi-line comment. */
        start_line: OneOf<[number, null]>;
        /**
         * @description The side of the first line of the range for a multi-line comment.
         * @default RIGHT
         * @enum {string|null}
         */
        start_side: "LEFT" | "RIGHT" | "" | null;
        /**
         * @description The level at which the comment is targeted, can be a diff line or a file.
         * @enum {string}
         */
        subject_type?: "line" | "file";
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the pull request review comment
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge?: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        closed_at: OneOf<[string, null]>;
        /** Format: uri */
        comments_url: string;
        /** Format: uri */
        commits_url: string;
        created_at: string;
        /** Format: uri */
        diff_url: string;
        draft?: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: OneOf<
            [
              {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              },
              null
            ]
          >;
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        merged_at: OneOf<[string, null]>;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /** Format: uri */
        patch_url: string;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description?: OneOf<[string, null]>;
              /** Format: uri */
              html_url?: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url?: string;
              /** @description Name of the team */
              name: string;
              node_id?: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission?: string;
              /** @enum {string} */
              privacy?: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url?: string;
              slug?: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url?: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        /** Format: uri */
        review_comments_url: string;
        /** @enum {string} */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        title: string;
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request_review_comment edited event */
    "webhook-pull-request-review-comment-edited": {
      /** @enum {string} */
      action: "edited";
      /** @description The changes to the comment. */
      changes: {
        body?: {
          /** @description The previous version of the body. */
          from: string;
        };
      };
      /**
       * Pull Request Review Comment
       * @description The [comment](https://docs.github.com/github-ae@latest/rest/reference/pulls#comments) itself.
       */
      comment: {
        _links: {
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          pull_request: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
        };
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description The text of the comment. */
        body: string;
        /** @description The SHA of the commit to which the comment applies. */
        commit_id: string;
        /** Format: date-time */
        created_at: string;
        /** @description The diff of the line that the comment refers to. */
        diff_hunk: string;
        /**
         * Format: uri
         * @description HTML URL for the pull request review comment.
         */
        html_url: string;
        /** @description The ID of the pull request review comment. */
        id: number;
        /** @description The comment ID to reply to. */
        in_reply_to_id?: number;
        /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
        line: OneOf<[number, null]>;
        /** @description The node ID of the pull request review comment. */
        node_id: string;
        /** @description The SHA of the original commit to which the comment applies. */
        original_commit_id: string;
        /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
        original_line: number;
        /** @description The index of the original line in the diff to which the comment applies. */
        original_position: number;
        /** @description The first line of the range for a multi-line comment. */
        original_start_line: OneOf<[number, null]>;
        /** @description The relative path of the file to which the comment applies. */
        path: string;
        /** @description The line index in the diff to which the comment applies. */
        position: OneOf<[number, null]>;
        /** @description The ID of the pull request review to which the comment belongs. */
        pull_request_review_id: OneOf<[number, null]>;
        /**
         * Format: uri
         * @description URL for the pull request that the review comment belongs to.
         */
        pull_request_url: string;
        /** Reactions */
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /**
         * @description The side of the first line of the range for a multi-line comment.
         * @enum {string}
         */
        side: "LEFT" | "RIGHT";
        /** @description The first line of the range for a multi-line comment. */
        start_line: OneOf<[number, null]>;
        /**
         * @description The side of the first line of the range for a multi-line comment.
         * @default RIGHT
         * @enum {string|null}
         */
        start_side: "LEFT" | "RIGHT" | "" | null;
        /**
         * @description The level at which the comment is targeted, can be a diff line or a file.
         * @enum {string}
         */
        subject_type?: "line" | "file";
        /** Format: date-time */
        updated_at: string;
        /**
         * Format: uri
         * @description URL for the pull request review comment
         */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge?: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        closed_at: OneOf<[string, null]>;
        /** Format: uri */
        comments_url: string;
        /** Format: uri */
        commits_url: string;
        created_at: string;
        /** Format: uri */
        diff_url: string;
        draft?: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: OneOf<
            [
              {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              },
              null
            ]
          >;
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        merged_at: OneOf<[string, null]>;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /** Format: uri */
        patch_url: string;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description?: OneOf<[string, null]>;
              /** Format: uri */
              html_url?: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url?: string;
              /** @description Name of the team */
              name: string;
              node_id?: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission?: string;
              /** @enum {string} */
              privacy?: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url?: string;
              slug?: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url?: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        /** Format: uri */
        review_comments_url: string;
        /** @enum {string} */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        title: string;
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request_review dismissed event */
    "webhook-pull-request-review-dismissed": {
      /** @enum {string} */
      action: "dismissed";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Simple Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        closed_at: OneOf<[string, null]>;
        /** Format: uri */
        comments_url: string;
        /** Format: uri */
        commits_url: string;
        created_at: string;
        /** Format: uri */
        diff_url: string;
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: OneOf<
            [
              {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              },
              null
            ]
          >;
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        merged_at: OneOf<[string, null]>;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /** Format: uri */
        patch_url: string;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        /** Format: uri */
        review_comments_url: string;
        /** @enum {string} */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        title: string;
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      /** @description The review that was affected. */
      review: {
        _links: {
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          pull_request: {
            /** Format: uri-template */
            href: string;
          };
        };
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description The text of the review. */
        body: OneOf<[string, null]>;
        /** @description A commit SHA for the review. */
        commit_id: string;
        /** Format: uri */
        html_url: string;
        /** @description Unique identifier of the review */
        id: number;
        node_id: string;
        /** Format: uri */
        pull_request_url: string;
        /** @enum {string} */
        state: "dismissed" | "approved" | "changes_requested";
        /** Format: date-time */
        submitted_at: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request_review edited event */
    "webhook-pull-request-review-edited": {
      /** @enum {string} */
      action: "edited";
      changes: {
        body?: {
          /** @description The previous version of the body if the action was `edited`. */
          from: string;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Simple Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        closed_at: OneOf<[string, null]>;
        /** Format: uri */
        comments_url: string;
        /** Format: uri */
        commits_url: string;
        created_at: string;
        /** Format: uri */
        diff_url: string;
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: OneOf<
            [
              {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
              },
              null
            ]
          >;
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        merged_at: OneOf<[string, null]>;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /** Format: uri */
        patch_url: string;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        /** Format: uri */
        review_comments_url: string;
        /** @enum {string} */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        title: string;
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      /** @description The review that was affected. */
      review: {
        _links: {
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          pull_request: {
            /** Format: uri-template */
            href: string;
          };
        };
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description The text of the review. */
        body: OneOf<[string, null]>;
        /** @description A commit SHA for the review. */
        commit_id: string;
        /** Format: uri */
        html_url: string;
        /** @description Unique identifier of the review */
        id: number;
        node_id: string;
        /** Format: uri */
        pull_request_url: string;
        state: string;
        /** Format: date-time */
        submitted_at: OneOf<[string, null]>;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request review_request_removed event */
    "webhook-pull-request-review-request-removed": OneOf<
      [
        {
          /** @enum {string} */
          action: "review_request_removed";
          enterprise?: components["schemas"]["enterprise"];
          installation?: components["schemas"]["simple-installation"];
          /** @description The pull request number. */
          number: number;
          organization?: components["schemas"]["organization-simple"];
          /** Pull Request */
          pull_request: {
            _links: {
              /** Link */
              comments: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              commits: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              html: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              issue: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              review_comment: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              review_comments: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              self: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              statuses: {
                /** Format: uri-template */
                href: string;
              };
            };
            /** @enum {string|null} */
            active_lock_reason:
              | "resolved"
              | "off-topic"
              | "too heated"
              | "spam"
              | ""
              | null;
            additions?: number;
            /** User */
            assignee: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            assignees: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >[];
            /**
             * AuthorAssociation
             * @description How the author is associated with the repository.
             * @enum {string}
             */
            author_association:
              | "COLLABORATOR"
              | "CONTRIBUTOR"
              | "FIRST_TIMER"
              | "FIRST_TIME_CONTRIBUTOR"
              | "MANNEQUIN"
              | "MEMBER"
              | "NONE"
              | "OWNER";
            /**
             * PullRequestAutoMerge
             * @description The status of auto merging a pull request.
             */
            auto_merge: OneOf<
              [
                {
                  /** @description Commit message for the merge commit. */
                  commit_message: OneOf<[string, null]>;
                  /** @description Title for the merge commit message. */
                  commit_title: OneOf<[string, null]>;
                  /** User */
                  enabled_by: OneOf<
                    [
                      {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: OneOf<[string, null]>;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                      },
                      null
                    ]
                  >;
                  /**
                   * @description The merge method to use.
                   * @enum {string}
                   */
                  merge_method: "merge" | "squash" | "rebase";
                },
                null
              ]
            >;
            base: {
              label: string;
              ref: string;
              /**
               * Repository
               * @description A git repository
               */
              repo: {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title.
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              };
              sha: string;
              /** User */
              user: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
            };
            body: OneOf<[string, null]>;
            changed_files?: number;
            /** Format: date-time */
            closed_at: OneOf<[string, null]>;
            comments?: number;
            /** Format: uri */
            comments_url: string;
            commits?: number;
            /** Format: uri */
            commits_url: string;
            /** Format: date-time */
            created_at: string;
            deletions?: number;
            /** Format: uri */
            diff_url: string;
            /** @description Indicates whether or not the pull request is a draft. */
            draft: boolean;
            head: {
              label: string;
              ref: string;
              /**
               * Repository
               * @description A git repository
               */
              repo: {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              };
              sha: string;
              /** User */
              user: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
            };
            /** Format: uri */
            html_url: string;
            id: number;
            /** Format: uri */
            issue_url: string;
            labels: {
              /** @description 6-character hex code, without the leading #, identifying the color */
              color: string;
              default: boolean;
              description: OneOf<[string, null]>;
              id: number;
              /** @description The name of the label. */
              name: string;
              node_id: string;
              /**
               * Format: uri
               * @description URL for the label
               */
              url: string;
            }[];
            locked: boolean;
            /** @description Indicates whether maintainers can modify the pull request. */
            maintainer_can_modify?: boolean;
            merge_commit_sha: OneOf<[string, null]>;
            mergeable?: OneOf<[boolean, null]>;
            mergeable_state?: string;
            merged?: OneOf<[boolean, null]>;
            /** Format: date-time */
            merged_at: OneOf<[string, null]>;
            /** User */
            merged_by?: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            /**
             * Milestone
             * @description A collection of related issues and pull requests.
             */
            milestone: OneOf<
              [
                {
                  /** Format: date-time */
                  closed_at: OneOf<[string, null]>;
                  closed_issues: number;
                  /** Format: date-time */
                  created_at: string;
                  /** User */
                  creator: OneOf<
                    [
                      {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: OneOf<[string, null]>;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                      },
                      null
                    ]
                  >;
                  description: OneOf<[string, null]>;
                  /** Format: date-time */
                  due_on: OneOf<[string, null]>;
                  /** Format: uri */
                  html_url: string;
                  id: number;
                  /** Format: uri */
                  labels_url: string;
                  node_id: string;
                  /** @description The number of the milestone. */
                  number: number;
                  open_issues: number;
                  /**
                   * @description The state of the milestone.
                   * @enum {string}
                   */
                  state: "open" | "closed";
                  /** @description The title of the milestone. */
                  title: string;
                  /** Format: date-time */
                  updated_at: string;
                  /** Format: uri */
                  url: string;
                },
                null
              ]
            >;
            node_id: string;
            /** @description Number uniquely identifying the pull request within its repository. */
            number: number;
            /** Format: uri */
            patch_url: string;
            rebaseable?: OneOf<[boolean, null]>;
            requested_reviewers: OneOf<
              [
                OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >,
                {
                  deleted?: boolean;
                  /** @description Description of the team */
                  description: OneOf<[string, null]>;
                  /** Format: uri */
                  html_url: string;
                  /** @description Unique identifier of the team */
                  id: number;
                  /** Format: uri-template */
                  members_url: string;
                  /** @description Name of the team */
                  name: string;
                  node_id: string;
                  parent?: OneOf<
                    [
                      {
                        /** @description Description of the team */
                        description: OneOf<[string, null]>;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                      },
                      null
                    ]
                  >;
                  /** @description Permission that the team will have for its repositories */
                  permission: string;
                  /** @enum {string} */
                  privacy: "open" | "closed" | "secret";
                  /** Format: uri */
                  repositories_url: string;
                  slug: string;
                  /**
                   * Format: uri
                   * @description URL for the team
                   */
                  url: string;
                }
              ]
            >[];
            requested_teams: {
              deleted?: boolean;
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            }[];
            /** Format: uri-template */
            review_comment_url: string;
            review_comments?: number;
            /** Format: uri */
            review_comments_url: string;
            /**
             * @description State of this Pull Request. Either `open` or `closed`.
             * @enum {string}
             */
            state: "open" | "closed";
            /** Format: uri */
            statuses_url: string;
            /** @description The title of the pull request. */
            title: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /** User */
            user: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
          };
          repository: components["schemas"]["repository"];
          /** User */
          requested_reviewer: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          sender: components["schemas"]["simple-user"];
        },
        {
          /** @enum {string} */
          action: "review_request_removed";
          enterprise?: components["schemas"]["enterprise"];
          installation?: components["schemas"]["simple-installation"];
          /** @description The pull request number. */
          number: number;
          organization?: components["schemas"]["organization-simple"];
          /** Pull Request */
          pull_request: {
            _links: {
              /** Link */
              comments: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              commits: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              html: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              issue: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              review_comment: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              review_comments: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              self: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              statuses: {
                /** Format: uri-template */
                href: string;
              };
            };
            /** @enum {string|null} */
            active_lock_reason:
              | "resolved"
              | "off-topic"
              | "too heated"
              | "spam"
              | ""
              | null;
            additions?: number;
            /** User */
            assignee: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            assignees: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >[];
            /**
             * AuthorAssociation
             * @description How the author is associated with the repository.
             * @enum {string}
             */
            author_association:
              | "COLLABORATOR"
              | "CONTRIBUTOR"
              | "FIRST_TIMER"
              | "FIRST_TIME_CONTRIBUTOR"
              | "MANNEQUIN"
              | "MEMBER"
              | "NONE"
              | "OWNER";
            /**
             * PullRequestAutoMerge
             * @description The status of auto merging a pull request.
             */
            auto_merge: OneOf<
              [
                {
                  /** @description Commit message for the merge commit. */
                  commit_message: OneOf<[string, null]>;
                  /** @description Title for the merge commit message. */
                  commit_title: OneOf<[string, null]>;
                  /** User */
                  enabled_by: OneOf<
                    [
                      {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: OneOf<[string, null]>;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                      },
                      null
                    ]
                  >;
                  /**
                   * @description The merge method to use.
                   * @enum {string}
                   */
                  merge_method: "merge" | "squash" | "rebase";
                },
                null
              ]
            >;
            base: {
              label: string;
              ref: string;
              /**
               * Repository
               * @description A git repository
               */
              repo: {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              };
              sha: string;
              /** User */
              user: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
            };
            body: OneOf<[string, null]>;
            changed_files?: number;
            /** Format: date-time */
            closed_at: OneOf<[string, null]>;
            comments?: number;
            /** Format: uri */
            comments_url: string;
            commits?: number;
            /** Format: uri */
            commits_url: string;
            /** Format: date-time */
            created_at: string;
            deletions?: number;
            /** Format: uri */
            diff_url: string;
            /** @description Indicates whether or not the pull request is a draft. */
            draft: boolean;
            head: {
              label: string;
              ref: string;
              /**
               * Repository
               * @description A git repository
               */
              repo: {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              };
              sha: string;
              /** User */
              user: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
            };
            /** Format: uri */
            html_url: string;
            id: number;
            /** Format: uri */
            issue_url: string;
            labels: {
              /** @description 6-character hex code, without the leading #, identifying the color */
              color: string;
              default: boolean;
              description: OneOf<[string, null]>;
              id: number;
              /** @description The name of the label. */
              name: string;
              node_id: string;
              /**
               * Format: uri
               * @description URL for the label
               */
              url: string;
            }[];
            locked: boolean;
            /** @description Indicates whether maintainers can modify the pull request. */
            maintainer_can_modify?: boolean;
            merge_commit_sha: OneOf<[string, null]>;
            mergeable?: OneOf<[boolean, null]>;
            mergeable_state?: string;
            merged?: OneOf<[boolean, null]>;
            /** Format: date-time */
            merged_at: OneOf<[string, null]>;
            /** User */
            merged_by?: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            /**
             * Milestone
             * @description A collection of related issues and pull requests.
             */
            milestone: OneOf<
              [
                {
                  /** Format: date-time */
                  closed_at: OneOf<[string, null]>;
                  closed_issues: number;
                  /** Format: date-time */
                  created_at: string;
                  /** User */
                  creator: OneOf<
                    [
                      {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: OneOf<[string, null]>;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                      },
                      null
                    ]
                  >;
                  description: OneOf<[string, null]>;
                  /** Format: date-time */
                  due_on: OneOf<[string, null]>;
                  /** Format: uri */
                  html_url: string;
                  id: number;
                  /** Format: uri */
                  labels_url: string;
                  node_id: string;
                  /** @description The number of the milestone. */
                  number: number;
                  open_issues: number;
                  /**
                   * @description The state of the milestone.
                   * @enum {string}
                   */
                  state: "open" | "closed";
                  /** @description The title of the milestone. */
                  title: string;
                  /** Format: date-time */
                  updated_at: string;
                  /** Format: uri */
                  url: string;
                },
                null
              ]
            >;
            node_id: string;
            /** @description Number uniquely identifying the pull request within its repository. */
            number: number;
            /** Format: uri */
            patch_url: string;
            rebaseable?: OneOf<[boolean, null]>;
            requested_reviewers: OneOf<
              [
                OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >,
                {
                  deleted?: boolean;
                  /** @description Description of the team */
                  description: OneOf<[string, null]>;
                  /** Format: uri */
                  html_url: string;
                  /** @description Unique identifier of the team */
                  id: number;
                  /** Format: uri-template */
                  members_url: string;
                  /** @description Name of the team */
                  name: string;
                  node_id: string;
                  parent?: OneOf<
                    [
                      {
                        /** @description Description of the team */
                        description: OneOf<[string, null]>;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                      },
                      null
                    ]
                  >;
                  /** @description Permission that the team will have for its repositories */
                  permission: string;
                  /** @enum {string} */
                  privacy: "open" | "closed" | "secret";
                  /** Format: uri */
                  repositories_url: string;
                  slug: string;
                  /**
                   * Format: uri
                   * @description URL for the team
                   */
                  url: string;
                }
              ]
            >[];
            requested_teams: {
              deleted?: boolean;
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            }[];
            /** Format: uri-template */
            review_comment_url: string;
            review_comments?: number;
            /** Format: uri */
            review_comments_url: string;
            /**
             * @description State of this Pull Request. Either `open` or `closed`.
             * @enum {string}
             */
            state: "open" | "closed";
            /** Format: uri */
            statuses_url: string;
            /** @description The title of the pull request. */
            title: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /** User */
            user: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
          };
          repository: components["schemas"]["repository"];
          /**
           * Team
           * @description Groups of organization members that gives permissions on specified repositories.
           */
          requested_team: {
            deleted?: boolean;
            /** @description Description of the team */
            description: OneOf<[string, null]>;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the team */
            id: number;
            /** Format: uri-template */
            members_url: string;
            /** @description Name of the team */
            name: string;
            node_id: string;
            parent?: OneOf<
              [
                {
                  /** @description Description of the team */
                  description: OneOf<[string, null]>;
                  /** Format: uri */
                  html_url: string;
                  /** @description Unique identifier of the team */
                  id: number;
                  /** Format: uri-template */
                  members_url: string;
                  /** @description Name of the team */
                  name: string;
                  node_id: string;
                  /** @description Permission that the team will have for its repositories */
                  permission: string;
                  /** @enum {string} */
                  privacy: "open" | "closed" | "secret";
                  /** Format: uri */
                  repositories_url: string;
                  slug: string;
                  /**
                   * Format: uri
                   * @description URL for the team
                   */
                  url: string;
                },
                null
              ]
            >;
            /** @description Permission that the team will have for its repositories */
            permission: string;
            /** @enum {string} */
            privacy: "open" | "closed" | "secret";
            /** Format: uri */
            repositories_url: string;
            slug: string;
            /**
             * Format: uri
             * @description URL for the team
             */
            url: string;
          };
          sender: components["schemas"]["simple-user"];
        }
      ]
    >;
    /** pull_request review_requested event */
    "webhook-pull-request-review-requested": OneOf<
      [
        {
          /** @enum {string} */
          action: "review_requested";
          enterprise?: components["schemas"]["enterprise"];
          installation?: components["schemas"]["simple-installation"];
          /** @description The pull request number. */
          number: number;
          organization?: components["schemas"]["organization-simple"];
          /** Pull Request */
          pull_request: {
            _links: {
              /** Link */
              comments: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              commits: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              html: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              issue: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              review_comment: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              review_comments: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              self: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              statuses: {
                /** Format: uri-template */
                href: string;
              };
            };
            /** @enum {string|null} */
            active_lock_reason:
              | "resolved"
              | "off-topic"
              | "too heated"
              | "spam"
              | ""
              | null;
            additions?: number;
            /** User */
            assignee: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            assignees: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >[];
            /**
             * AuthorAssociation
             * @description How the author is associated with the repository.
             * @enum {string}
             */
            author_association:
              | "COLLABORATOR"
              | "CONTRIBUTOR"
              | "FIRST_TIMER"
              | "FIRST_TIME_CONTRIBUTOR"
              | "MANNEQUIN"
              | "MEMBER"
              | "NONE"
              | "OWNER";
            /**
             * PullRequestAutoMerge
             * @description The status of auto merging a pull request.
             */
            auto_merge: OneOf<
              [
                {
                  /** @description Commit message for the merge commit. */
                  commit_message: OneOf<[string, null]>;
                  /** @description Title for the merge commit message. */
                  commit_title: OneOf<[string, null]>;
                  /** User */
                  enabled_by: OneOf<
                    [
                      {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: OneOf<[string, null]>;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                      },
                      null
                    ]
                  >;
                  /**
                   * @description The merge method to use.
                   * @enum {string}
                   */
                  merge_method: "merge" | "squash" | "rebase";
                },
                null
              ]
            >;
            base: {
              label: string;
              ref: string;
              /**
               * Repository
               * @description A git repository
               */
              repo: {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              };
              sha: string;
              /** User */
              user: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
            };
            body: OneOf<[string, null]>;
            changed_files?: number;
            /** Format: date-time */
            closed_at: OneOf<[string, null]>;
            comments?: number;
            /** Format: uri */
            comments_url: string;
            commits?: number;
            /** Format: uri */
            commits_url: string;
            /** Format: date-time */
            created_at: string;
            deletions?: number;
            /** Format: uri */
            diff_url: string;
            /** @description Indicates whether or not the pull request is a draft. */
            draft: boolean;
            head: {
              label: string;
              ref: string;
              /**
               * Repository
               * @description A git repository
               */
              repo: {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              };
              sha: string;
              /** User */
              user: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
            };
            /** Format: uri */
            html_url: string;
            id: number;
            /** Format: uri */
            issue_url: string;
            labels: {
              /** @description 6-character hex code, without the leading #, identifying the color */
              color: string;
              default: boolean;
              description: OneOf<[string, null]>;
              id: number;
              /** @description The name of the label. */
              name: string;
              node_id: string;
              /**
               * Format: uri
               * @description URL for the label
               */
              url: string;
            }[];
            locked: boolean;
            /** @description Indicates whether maintainers can modify the pull request. */
            maintainer_can_modify?: boolean;
            merge_commit_sha: OneOf<[string, null]>;
            mergeable?: OneOf<[boolean, null]>;
            mergeable_state?: string;
            merged?: OneOf<[boolean, null]>;
            /** Format: date-time */
            merged_at: OneOf<[string, null]>;
            /** User */
            merged_by?: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            /**
             * Milestone
             * @description A collection of related issues and pull requests.
             */
            milestone: OneOf<
              [
                {
                  /** Format: date-time */
                  closed_at: OneOf<[string, null]>;
                  closed_issues: number;
                  /** Format: date-time */
                  created_at: string;
                  /** User */
                  creator: OneOf<
                    [
                      {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: OneOf<[string, null]>;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                      },
                      null
                    ]
                  >;
                  description: OneOf<[string, null]>;
                  /** Format: date-time */
                  due_on: OneOf<[string, null]>;
                  /** Format: uri */
                  html_url: string;
                  id: number;
                  /** Format: uri */
                  labels_url: string;
                  node_id: string;
                  /** @description The number of the milestone. */
                  number: number;
                  open_issues: number;
                  /**
                   * @description The state of the milestone.
                   * @enum {string}
                   */
                  state: "open" | "closed";
                  /** @description The title of the milestone. */
                  title: string;
                  /** Format: date-time */
                  updated_at: string;
                  /** Format: uri */
                  url: string;
                },
                null
              ]
            >;
            node_id: string;
            /** @description Number uniquely identifying the pull request within its repository. */
            number: number;
            /** Format: uri */
            patch_url: string;
            rebaseable?: OneOf<[boolean, null]>;
            requested_reviewers: OneOf<
              [
                OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >,
                {
                  deleted?: boolean;
                  /** @description Description of the team */
                  description: OneOf<[string, null]>;
                  /** Format: uri */
                  html_url: string;
                  /** @description Unique identifier of the team */
                  id: number;
                  /** Format: uri-template */
                  members_url: string;
                  /** @description Name of the team */
                  name: string;
                  node_id: string;
                  parent?: OneOf<
                    [
                      {
                        /** @description Description of the team */
                        description: OneOf<[string, null]>;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                      },
                      null
                    ]
                  >;
                  /** @description Permission that the team will have for its repositories */
                  permission: string;
                  /** @enum {string} */
                  privacy: "open" | "closed" | "secret";
                  /** Format: uri */
                  repositories_url: string;
                  slug: string;
                  /**
                   * Format: uri
                   * @description URL for the team
                   */
                  url: string;
                }
              ]
            >[];
            requested_teams: {
              deleted?: boolean;
              /** @description Description of the team */
              description?: OneOf<[string, null]>;
              /** Format: uri */
              html_url?: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url?: string;
              /** @description Name of the team */
              name: string;
              node_id?: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission?: string;
              /** @enum {string} */
              privacy?: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url?: string;
              slug?: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url?: string;
            }[];
            /** Format: uri-template */
            review_comment_url: string;
            review_comments?: number;
            /** Format: uri */
            review_comments_url: string;
            /**
             * @description State of this Pull Request. Either `open` or `closed`.
             * @enum {string}
             */
            state: "open" | "closed";
            /** Format: uri */
            statuses_url: string;
            /** @description The title of the pull request. */
            title: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /** User */
            user: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
          };
          repository: components["schemas"]["repository"];
          /** User */
          requested_reviewer: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization" | "Mannequin";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          sender: components["schemas"]["simple-user"];
        },
        {
          /** @enum {string} */
          action: "review_requested";
          enterprise?: components["schemas"]["enterprise"];
          installation?: components["schemas"]["simple-installation"];
          /** @description The pull request number. */
          number: number;
          organization?: components["schemas"]["organization-simple"];
          /** Pull Request */
          pull_request: {
            _links: {
              /** Link */
              comments: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              commits: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              html: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              issue: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              review_comment: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              review_comments: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              self: {
                /** Format: uri-template */
                href: string;
              };
              /** Link */
              statuses: {
                /** Format: uri-template */
                href: string;
              };
            };
            /** @enum {string|null} */
            active_lock_reason:
              | "resolved"
              | "off-topic"
              | "too heated"
              | "spam"
              | ""
              | null;
            additions?: number;
            /** User */
            assignee: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            assignees: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >[];
            /**
             * AuthorAssociation
             * @description How the author is associated with the repository.
             * @enum {string}
             */
            author_association:
              | "COLLABORATOR"
              | "CONTRIBUTOR"
              | "FIRST_TIMER"
              | "FIRST_TIME_CONTRIBUTOR"
              | "MANNEQUIN"
              | "MEMBER"
              | "NONE"
              | "OWNER";
            /**
             * PullRequestAutoMerge
             * @description The status of auto merging a pull request.
             */
            auto_merge: OneOf<
              [
                {
                  /** @description Commit message for the merge commit. */
                  commit_message: OneOf<[string, null]>;
                  /** @description Title for the merge commit message. */
                  commit_title: OneOf<[string, null]>;
                  /** User */
                  enabled_by: OneOf<
                    [
                      {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: OneOf<[string, null]>;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization";
                        /** Format: uri */
                        url?: string;
                      },
                      null
                    ]
                  >;
                  /**
                   * @description The merge method to use.
                   * @enum {string}
                   */
                  merge_method: "merge" | "squash" | "rebase";
                },
                null
              ]
            >;
            base: {
              label: string;
              ref: string;
              /**
               * Repository
               * @description A git repository
               */
              repo: {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              };
              sha: string;
              /** User */
              user: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
            };
            body: OneOf<[string, null]>;
            changed_files?: number;
            /** Format: date-time */
            closed_at: OneOf<[string, null]>;
            comments?: number;
            /** Format: uri */
            comments_url: string;
            commits?: number;
            /** Format: uri */
            commits_url: string;
            /** Format: date-time */
            created_at: string;
            deletions?: number;
            /** Format: uri */
            diff_url: string;
            /** @description Indicates whether or not the pull request is a draft. */
            draft: boolean;
            head: {
              label: string;
              ref: string;
              /**
               * Repository
               * @description A git repository
               */
              repo: {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              };
              sha: string;
              /** User */
              user: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
            };
            /** Format: uri */
            html_url: string;
            id: number;
            /** Format: uri */
            issue_url: string;
            labels: {
              /** @description 6-character hex code, without the leading #, identifying the color */
              color: string;
              default: boolean;
              description: OneOf<[string, null]>;
              id: number;
              /** @description The name of the label. */
              name: string;
              node_id: string;
              /**
               * Format: uri
               * @description URL for the label
               */
              url: string;
            }[];
            locked: boolean;
            /** @description Indicates whether maintainers can modify the pull request. */
            maintainer_can_modify?: boolean;
            merge_commit_sha: OneOf<[string, null]>;
            mergeable?: OneOf<[boolean, null]>;
            mergeable_state?: string;
            merged?: OneOf<[boolean, null]>;
            /** Format: date-time */
            merged_at: OneOf<[string, null]>;
            /** User */
            merged_by?: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            /**
             * Milestone
             * @description A collection of related issues and pull requests.
             */
            milestone: OneOf<
              [
                {
                  /** Format: date-time */
                  closed_at: OneOf<[string, null]>;
                  closed_issues: number;
                  /** Format: date-time */
                  created_at: string;
                  /** User */
                  creator: OneOf<
                    [
                      {
                        /** Format: uri */
                        avatar_url?: string;
                        deleted?: boolean;
                        email?: OneOf<[string, null]>;
                        /** Format: uri-template */
                        events_url?: string;
                        /** Format: uri */
                        followers_url?: string;
                        /** Format: uri-template */
                        following_url?: string;
                        /** Format: uri-template */
                        gists_url?: string;
                        gravatar_id?: string;
                        /** Format: uri */
                        html_url?: string;
                        id: number;
                        login: string;
                        name?: string;
                        node_id?: string;
                        /** Format: uri */
                        organizations_url?: string;
                        /** Format: uri */
                        received_events_url?: string;
                        /** Format: uri */
                        repos_url?: string;
                        site_admin?: boolean;
                        /** Format: uri-template */
                        starred_url?: string;
                        /** Format: uri */
                        subscriptions_url?: string;
                        /** @enum {string} */
                        type?: "Bot" | "User" | "Organization" | "Mannequin";
                        /** Format: uri */
                        url?: string;
                      },
                      null
                    ]
                  >;
                  description: OneOf<[string, null]>;
                  /** Format: date-time */
                  due_on: OneOf<[string, null]>;
                  /** Format: uri */
                  html_url: string;
                  id: number;
                  /** Format: uri */
                  labels_url: string;
                  node_id: string;
                  /** @description The number of the milestone. */
                  number: number;
                  open_issues: number;
                  /**
                   * @description The state of the milestone.
                   * @enum {string}
                   */
                  state: "open" | "closed";
                  /** @description The title of the milestone. */
                  title: string;
                  /** Format: date-time */
                  updated_at: string;
                  /** Format: uri */
                  url: string;
                },
                null
              ]
            >;
            node_id: string;
            /** @description Number uniquely identifying the pull request within its repository. */
            number: number;
            /** Format: uri */
            patch_url: string;
            rebaseable?: OneOf<[boolean, null]>;
            requested_reviewers: OneOf<
              [
                OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >,
                {
                  deleted?: boolean;
                  /** @description Description of the team */
                  description?: OneOf<[string, null]>;
                  /** Format: uri */
                  html_url?: string;
                  /** @description Unique identifier of the team */
                  id: number;
                  /** Format: uri-template */
                  members_url?: string;
                  /** @description Name of the team */
                  name: string;
                  node_id?: string;
                  parent?: OneOf<
                    [
                      {
                        /** @description Description of the team */
                        description: OneOf<[string, null]>;
                        /** Format: uri */
                        html_url: string;
                        /** @description Unique identifier of the team */
                        id: number;
                        /** Format: uri-template */
                        members_url: string;
                        /** @description Name of the team */
                        name: string;
                        node_id: string;
                        /** @description Permission that the team will have for its repositories */
                        permission: string;
                        /** @enum {string} */
                        privacy: "open" | "closed" | "secret";
                        /** Format: uri */
                        repositories_url: string;
                        slug: string;
                        /**
                         * Format: uri
                         * @description URL for the team
                         */
                        url: string;
                      },
                      null
                    ]
                  >;
                  /** @description Permission that the team will have for its repositories */
                  permission?: string;
                  /** @enum {string} */
                  privacy?: "open" | "closed" | "secret";
                  /** Format: uri */
                  repositories_url?: string;
                  slug?: string;
                  /**
                   * Format: uri
                   * @description URL for the team
                   */
                  url?: string;
                }
              ]
            >[];
            requested_teams: {
              deleted?: boolean;
              /** @description Description of the team */
              description?: OneOf<[string, null]>;
              /** Format: uri */
              html_url?: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url?: string;
              /** @description Name of the team */
              name: string;
              node_id?: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission?: string;
              /** @enum {string} */
              privacy?: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url?: string;
              slug?: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url?: string;
            }[];
            /** Format: uri-template */
            review_comment_url: string;
            review_comments?: number;
            /** Format: uri */
            review_comments_url: string;
            /**
             * @description State of this Pull Request. Either `open` or `closed`.
             * @enum {string}
             */
            state: "open" | "closed";
            /** Format: uri */
            statuses_url: string;
            /** @description The title of the pull request. */
            title: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /** User */
            user: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
          };
          repository: components["schemas"]["repository"];
          /**
           * Team
           * @description Groups of organization members that gives permissions on specified repositories.
           */
          requested_team: {
            deleted?: boolean;
            /** @description Description of the team */
            description?: OneOf<[string, null]>;
            /** Format: uri */
            html_url?: string;
            /** @description Unique identifier of the team */
            id: number;
            /** Format: uri-template */
            members_url?: string;
            /** @description Name of the team */
            name: string;
            node_id?: string;
            parent?: OneOf<
              [
                {
                  /** @description Description of the team */
                  description: OneOf<[string, null]>;
                  /** Format: uri */
                  html_url: string;
                  /** @description Unique identifier of the team */
                  id: number;
                  /** Format: uri-template */
                  members_url: string;
                  /** @description Name of the team */
                  name: string;
                  node_id: string;
                  /** @description Permission that the team will have for its repositories */
                  permission: string;
                  /** @enum {string} */
                  privacy: "open" | "closed" | "secret";
                  /** Format: uri */
                  repositories_url: string;
                  slug: string;
                  /**
                   * Format: uri
                   * @description URL for the team
                   */
                  url: string;
                },
                null
              ]
            >;
            /** @description Permission that the team will have for its repositories */
            permission?: string;
            /** @enum {string} */
            privacy?: "open" | "closed" | "secret";
            /** Format: uri */
            repositories_url?: string;
            slug?: string;
            /**
             * Format: uri
             * @description URL for the team
             */
            url?: string;
          };
          sender: components["schemas"]["simple-user"];
        }
      ]
    >;
    /** pull_request_review submitted event */
    "webhook-pull-request-review-submitted": {
      /** @enum {string} */
      action: "submitted";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Simple Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        closed_at: OneOf<[string, null]>;
        /** Format: uri */
        comments_url: string;
        /** Format: uri */
        commits_url: string;
        created_at: string;
        /** Format: uri */
        diff_url: string;
        draft: boolean;
        head: {
          label: OneOf<[string, null]>;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: OneOf<
            [
              {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              },
              null
            ]
          >;
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        merged_at: OneOf<[string, null]>;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /** Format: uri */
        patch_url: string;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        /** Format: uri */
        review_comments_url: string;
        /** @enum {string} */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        title: string;
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      /** @description The review that was affected. */
      review: {
        _links: {
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          pull_request: {
            /** Format: uri-template */
            href: string;
          };
        };
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /** @description The text of the review. */
        body: OneOf<[string, null]>;
        /** @description A commit SHA for the review. */
        commit_id: string;
        /** Format: uri */
        html_url: string;
        /** @description Unique identifier of the review */
        id: number;
        node_id: string;
        /** Format: uri */
        pull_request_url: string;
        state: string;
        /** Format: date-time */
        submitted_at: OneOf<[string, null]>;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request_review_thread resolved event */
    "webhook-pull-request-review-thread-resolved": {
      /** @enum {string} */
      action: "resolved";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Simple Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        closed_at: OneOf<[string, null]>;
        /** Format: uri */
        comments_url: string;
        /** Format: uri */
        commits_url: string;
        created_at: string;
        /** Format: uri */
        diff_url: string;
        draft: boolean;
        head: {
          label: OneOf<[string, null]>;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: OneOf<
            [
              {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              },
              null
            ]
          >;
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        merged_at: OneOf<[string, null]>;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /** Format: uri */
        patch_url: string;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        /** Format: uri */
        review_comments_url: string;
        /** @enum {string} */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        title: string;
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
      thread: {
        comments: {
          _links: {
            /** Link */
            html: {
              /** Format: uri-template */
              href: string;
            };
            /** Link */
            pull_request: {
              /** Format: uri-template */
              href: string;
            };
            /** Link */
            self: {
              /** Format: uri-template */
              href: string;
            };
          };
          /**
           * AuthorAssociation
           * @description How the author is associated with the repository.
           * @enum {string}
           */
          author_association:
            | "COLLABORATOR"
            | "CONTRIBUTOR"
            | "FIRST_TIMER"
            | "FIRST_TIME_CONTRIBUTOR"
            | "MANNEQUIN"
            | "MEMBER"
            | "NONE"
            | "OWNER";
          /** @description The text of the comment. */
          body: string;
          /** @description The SHA of the commit to which the comment applies. */
          commit_id: string;
          /** Format: date-time */
          created_at: string;
          /** @description The diff of the line that the comment refers to. */
          diff_hunk: string;
          /**
           * Format: uri
           * @description HTML URL for the pull request review comment.
           */
          html_url: string;
          /** @description The ID of the pull request review comment. */
          id: number;
          /** @description The comment ID to reply to. */
          in_reply_to_id?: number;
          /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
          line: OneOf<[number, null]>;
          /** @description The node ID of the pull request review comment. */
          node_id: string;
          /** @description The SHA of the original commit to which the comment applies. */
          original_commit_id: string;
          /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
          original_line: OneOf<[number, null]>;
          /** @description The index of the original line in the diff to which the comment applies. */
          original_position: number;
          /** @description The first line of the range for a multi-line comment. */
          original_start_line: OneOf<[number, null]>;
          /** @description The relative path of the file to which the comment applies. */
          path: string;
          /** @description The line index in the diff to which the comment applies. */
          position: OneOf<[number, null]>;
          /** @description The ID of the pull request review to which the comment belongs. */
          pull_request_review_id: OneOf<[number, null]>;
          /**
           * Format: uri
           * @description URL for the pull request that the review comment belongs to.
           */
          pull_request_url: string;
          /** Reactions */
          reactions: {
            "+1": number;
            "-1": number;
            confused: number;
            eyes: number;
            heart: number;
            hooray: number;
            laugh: number;
            rocket: number;
            total_count: number;
            /** Format: uri */
            url: string;
          };
          /**
           * @description The side of the first line of the range for a multi-line comment.
           * @enum {string}
           */
          side: "LEFT" | "RIGHT";
          /** @description The first line of the range for a multi-line comment. */
          start_line: OneOf<[number, null]>;
          /**
           * @description The side of the first line of the range for a multi-line comment.
           * @default RIGHT
           * @enum {string|null}
           */
          start_side: "LEFT" | "RIGHT" | "" | null;
          /**
           * @description The level at which the comment is targeted, can be a diff line or a file.
           * @enum {string}
           */
          subject_type?: "line" | "file";
          /** Format: date-time */
          updated_at: string;
          /**
           * Format: uri
           * @description URL for the pull request review comment
           */
          url: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization" | "Mannequin";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        }[];
        node_id: string;
      };
    };
    /** pull_request_review_thread unresolved event */
    "webhook-pull-request-review-thread-unresolved": {
      /** @enum {string} */
      action: "unresolved";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /** Simple Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: string;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        closed_at: OneOf<[string, null]>;
        /** Format: uri */
        comments_url: string;
        /** Format: uri */
        commits_url: string;
        created_at: string;
        /** Format: uri */
        diff_url: string;
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        merged_at: OneOf<[string, null]>;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        number: number;
        /** Format: uri */
        patch_url: string;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description?: OneOf<[string, null]>;
              /** Format: uri */
              html_url?: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url?: string;
              /** @description Name of the team */
              name: string;
              node_id?: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission?: string;
              /** @enum {string} */
              privacy?: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url?: string;
              slug?: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url?: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        /** Format: uri */
        review_comments_url: string;
        /** @enum {string} */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        title: string;
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
      thread: {
        comments: {
          _links: {
            /** Link */
            html: {
              /** Format: uri-template */
              href: string;
            };
            /** Link */
            pull_request: {
              /** Format: uri-template */
              href: string;
            };
            /** Link */
            self: {
              /** Format: uri-template */
              href: string;
            };
          };
          /**
           * AuthorAssociation
           * @description How the author is associated with the repository.
           * @enum {string}
           */
          author_association:
            | "COLLABORATOR"
            | "CONTRIBUTOR"
            | "FIRST_TIMER"
            | "FIRST_TIME_CONTRIBUTOR"
            | "MANNEQUIN"
            | "MEMBER"
            | "NONE"
            | "OWNER";
          /** @description The text of the comment. */
          body: string;
          /** @description The SHA of the commit to which the comment applies. */
          commit_id: string;
          /** Format: date-time */
          created_at: string;
          /** @description The diff of the line that the comment refers to. */
          diff_hunk: string;
          /**
           * Format: uri
           * @description HTML URL for the pull request review comment.
           */
          html_url: string;
          /** @description The ID of the pull request review comment. */
          id: number;
          /** @description The comment ID to reply to. */
          in_reply_to_id?: number;
          /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
          line: OneOf<[number, null]>;
          /** @description The node ID of the pull request review comment. */
          node_id: string;
          /** @description The SHA of the original commit to which the comment applies. */
          original_commit_id: string;
          /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
          original_line: number;
          /** @description The index of the original line in the diff to which the comment applies. */
          original_position: number;
          /** @description The first line of the range for a multi-line comment. */
          original_start_line: OneOf<[number, null]>;
          /** @description The relative path of the file to which the comment applies. */
          path: string;
          /** @description The line index in the diff to which the comment applies. */
          position: OneOf<[number, null]>;
          /** @description The ID of the pull request review to which the comment belongs. */
          pull_request_review_id: OneOf<[number, null]>;
          /**
           * Format: uri
           * @description URL for the pull request that the review comment belongs to.
           */
          pull_request_url: string;
          /** Reactions */
          reactions: {
            "+1": number;
            "-1": number;
            confused: number;
            eyes: number;
            heart: number;
            hooray: number;
            laugh: number;
            rocket: number;
            total_count: number;
            /** Format: uri */
            url: string;
          };
          /**
           * @description The side of the first line of the range for a multi-line comment.
           * @enum {string}
           */
          side: "LEFT" | "RIGHT";
          /** @description The first line of the range for a multi-line comment. */
          start_line: OneOf<[number, null]>;
          /**
           * @description The side of the first line of the range for a multi-line comment.
           * @default RIGHT
           * @enum {string|null}
           */
          start_side: "LEFT" | "RIGHT" | "" | null;
          /**
           * @description The level at which the comment is targeted, can be a diff line or a file.
           * @enum {string}
           */
          subject_type?: "line" | "file";
          /** Format: date-time */
          updated_at: string;
          /**
           * Format: uri
           * @description URL for the pull request review comment
           */
          url: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        }[];
        node_id: string;
      };
    };
    /** pull_request synchronize event */
    "webhook-pull-request-synchronize": {
      /** @enum {string} */
      action: "synchronize";
      after: string;
      before: string;
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The pull request number. */
      number: number;
      organization?: components["schemas"]["organization-simple"];
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        additions?: number;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        changed_files?: number;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments?: number;
        /** Format: uri */
        comments_url: string;
        commits?: number;
        /** Format: uri */
        commits_url: string;
        /** Format: date-time */
        created_at: string;
        deletions?: number;
        /** Format: uri */
        diff_url: string;
        /** @description Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit message title.
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        /** @description Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        mergeable?: OneOf<[boolean, null]>;
        mergeable_state?: string;
        merged?: OneOf<[boolean, null]>;
        /** Format: date-time */
        merged_at: OneOf<[string, null]>;
        /** User */
        merged_by?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        /** @description Number uniquely identifying the pull request within its repository. */
        number: number;
        /** Format: uri */
        patch_url: string;
        rebaseable?: OneOf<[boolean, null]>;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** Format: uri */
        review_comments_url: string;
        /**
         * @description State of this Pull Request. Either `open` or `closed`.
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        /** @description The title of the pull request. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request unassigned event */
    "webhook-pull-request-unassigned": {
      /** @enum {string} */
      action: "unassigned";
      /** User */
      assignee?: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization" | "Mannequin";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The pull request number. */
      number: number;
      organization?: components["schemas"]["organization-simple"];
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        additions?: number;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: OneOf<[string, null]>;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        changed_files?: number;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments?: number;
        /** Format: uri */
        comments_url: string;
        commits?: number;
        /** Format: uri */
        commits_url: string;
        /** Format: date-time */
        created_at: string;
        deletions?: number;
        /** Format: uri */
        diff_url: string;
        /** @description Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: OneOf<[string, null]>;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: OneOf<
            [
              {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              },
              null
            ]
          >;
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        /** @description Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        mergeable?: OneOf<[boolean, null]>;
        mergeable_state?: string;
        merged?: OneOf<[boolean, null]>;
        /** Format: date-time */
        merged_at: OneOf<[string, null]>;
        /** User */
        merged_by?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        /** @description Number uniquely identifying the pull request within its repository. */
        number: number;
        /** Format: uri */
        patch_url: string;
        rebaseable?: OneOf<[boolean, null]>;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** Format: uri */
        review_comments_url: string;
        /**
         * @description State of this Pull Request. Either `open` or `closed`.
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        /** @description The title of the pull request. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** pull_request unlabeled event */
    "webhook-pull-request-unlabeled": {
      /** @enum {string} */
      action: "unlabeled";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** Label */
      label?: {
        /** @description 6-character hex code, without the leading #, identifying the color */
        color: string;
        default: boolean;
        description: OneOf<[string, null]>;
        id: number;
        /** @description The name of the label. */
        name: string;
        node_id: string;
        /**
         * Format: uri
         * @description URL for the label
         */
        url: string;
      };
      /** @description The pull request number. */
      number: number;
      organization?: components["schemas"]["organization-simple"];
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        additions?: number;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: OneOf<[string, null]>;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        changed_files?: number;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments?: number;
        /** Format: uri */
        comments_url: string;
        commits?: number;
        /** Format: uri */
        commits_url: string;
        /** Format: date-time */
        created_at: string;
        deletions?: number;
        /** Format: uri */
        diff_url: string;
        /** @description Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: OneOf<[string, null]>;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: OneOf<
            [
              {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit message title.
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              },
              null
            ]
          >;
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        /** @description Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        mergeable?: OneOf<[boolean, null]>;
        mergeable_state?: string;
        merged?: OneOf<[boolean, null]>;
        /** Format: date-time */
        merged_at: OneOf<[string, null]>;
        /** User */
        merged_by?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization" | "Mannequin";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        /** @description Number uniquely identifying the pull request within its repository. */
        number: number;
        /** Format: uri */
        patch_url: string;
        rebaseable?: OneOf<[boolean, null]>;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization" | "Mannequin";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** Format: uri */
        review_comments_url: string;
        /**
         * @description State of this Pull Request. Either `open` or `closed`.
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        /** @description The title of the pull request. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization" | "Mannequin";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** pull_request unlocked event */
    "webhook-pull-request-unlocked": {
      /** @enum {string} */
      action: "unlocked";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      /** @description The pull request number. */
      number: number;
      organization?: components["schemas"]["organization-simple"];
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** Format: uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** Format: uri-template */
            href: string;
          };
        };
        /** @enum {string|null} */
        active_lock_reason:
          | "resolved"
          | "off-topic"
          | "too heated"
          | "spam"
          | ""
          | null;
        additions?: number;
        /** User */
        assignee: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        assignees: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >[];
        /**
         * AuthorAssociation
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * @description The status of auto merging a pull request.
         */
        auto_merge: OneOf<
          [
            {
              /** @description Commit message for the merge commit. */
              commit_message: OneOf<[string, null]>;
              /** @description Title for the merge commit message. */
              commit_title: string;
              /** User */
              enabled_by: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              /**
               * @description The merge method to use.
               * @enum {string}
               */
              merge_method: "merge" | "squash" | "rebase";
            },
            null
          ]
        >;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: {
            /**
             * @description Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** @description Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** Format: uri-template */
            archive_url: string;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** Format: uri-template */
            assignees_url: string;
            /** Format: uri-template */
            blobs_url: string;
            /** Format: uri-template */
            branches_url: string;
            /** Format: uri */
            clone_url: string;
            /** Format: uri-template */
            collaborators_url: string;
            /** Format: uri-template */
            comments_url: string;
            /** Format: uri-template */
            commits_url: string;
            /** Format: uri-template */
            compare_url: string;
            /** Format: uri-template */
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            created_at: number | string;
            /** @description The default branch of the repository. */
            default_branch: string;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** Format: uri */
            deployments_url: string;
            description: OneOf<[string, null]>;
            /** @description Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** Format: uri */
            forks_url: string;
            full_name: string;
            /** Format: uri-template */
            git_commits_url: string;
            /** Format: uri-template */
            git_refs_url: string;
            /** Format: uri-template */
            git_tags_url: string;
            /** Format: uri */
            git_url: string;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * @description Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: OneOf<[string, null]>;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Unique identifier of the repository */
            id: number;
            is_template?: boolean;
            /** Format: uri-template */
            issue_comment_url: string;
            /** Format: uri-template */
            issue_events_url: string;
            /** Format: uri-template */
            issues_url: string;
            /** Format: uri-template */
            keys_url: string;
            /** Format: uri-template */
            labels_url: string;
            language: OneOf<[string, null]>;
            /** Format: uri */
            languages_url: string;
            /** License */
            license: OneOf<
              [
                {
                  key: string;
                  name: string;
                  node_id: string;
                  spdx_id: string;
                  /** Format: uri */
                  url: OneOf<[string, null]>;
                },
                null
              ]
            >;
            master_branch?: string;
            /**
             * @description The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * @description The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             * @enum {string}
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** Format: uri */
            merges_url: string;
            /** Format: uri-template */
            milestones_url: string;
            /** Format: uri */
            mirror_url: OneOf<[string, null]>;
            /** @description The name of the repository. */
            name: string;
            node_id: string;
            /** Format: uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** @description Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** Format: uri-template */
            pulls_url: string;
            pushed_at: number | string;
            /** Format: uri-template */
            releases_url: string;
            role_name?: OneOf<[string, null]>;
            size: number;
            /**
             * @description The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             * @enum {string}
             */
            squash_merge_commit_message?:
              | "PR_BODY"
              | "COMMIT_MESSAGES"
              | "BLANK";
            /**
             * @description The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             * @enum {string}
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri-template */
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            topics: string[];
            /** Format: uri-template */
            trees_url: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            /**
             * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            /** @enum {string} */
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** @description Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        body: OneOf<[string, null]>;
        changed_files?: number;
        /** Format: date-time */
        closed_at: OneOf<[string, null]>;
        comments?: number;
        /** Format: uri */
        comments_url: string;
        commits?: number;
        /** Format: uri */
        commits_url: string;
        /** Format: date-time */
        created_at: string;
        deletions?: number;
        /** Format: uri */
        diff_url: string;
        /** @description Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * @description A git repository
           */
          repo: OneOf<
            [
              {
                /**
                 * @description Whether to allow auto-merge for pull requests.
                 * @default false
                 */
                allow_auto_merge?: boolean;
                /** @description Whether to allow private forks */
                allow_forking?: boolean;
                /**
                 * @description Whether to allow merge commits for pull requests.
                 * @default true
                 */
                allow_merge_commit?: boolean;
                /**
                 * @description Whether to allow rebase merges for pull requests.
                 * @default true
                 */
                allow_rebase_merge?: boolean;
                /**
                 * @description Whether to allow squash merges for pull requests.
                 * @default true
                 */
                allow_squash_merge?: boolean;
                allow_update_branch?: boolean;
                /** Format: uri-template */
                archive_url: string;
                /**
                 * @description Whether the repository is archived.
                 * @default false
                 */
                archived: boolean;
                /** Format: uri-template */
                assignees_url: string;
                /** Format: uri-template */
                blobs_url: string;
                /** Format: uri-template */
                branches_url: string;
                /** Format: uri */
                clone_url: string;
                /** Format: uri-template */
                collaborators_url: string;
                /** Format: uri-template */
                comments_url: string;
                /** Format: uri-template */
                commits_url: string;
                /** Format: uri-template */
                compare_url: string;
                /** Format: uri-template */
                contents_url: string;
                /** Format: uri */
                contributors_url: string;
                created_at: number | string;
                /** @description The default branch of the repository. */
                default_branch: string;
                /**
                 * @description Whether to delete head branches when pull requests are merged
                 * @default false
                 */
                delete_branch_on_merge?: boolean;
                /** Format: uri */
                deployments_url: string;
                description: OneOf<[string, null]>;
                /** @description Returns whether or not this repository is disabled. */
                disabled?: boolean;
                /** Format: uri */
                downloads_url: string;
                /** Format: uri */
                events_url: string;
                fork: boolean;
                forks: number;
                forks_count: number;
                /** Format: uri */
                forks_url: string;
                full_name: string;
                /** Format: uri-template */
                git_commits_url: string;
                /** Format: uri-template */
                git_refs_url: string;
                /** Format: uri-template */
                git_tags_url: string;
                /** Format: uri */
                git_url: string;
                /**
                 * @description Whether downloads are enabled.
                 * @default true
                 */
                has_downloads: boolean;
                /**
                 * @description Whether issues are enabled.
                 * @default true
                 */
                has_issues: boolean;
                has_pages: boolean;
                /**
                 * @description Whether projects are enabled.
                 * @default true
                 */
                has_projects: boolean;
                /**
                 * @description Whether the wiki is enabled.
                 * @default true
                 */
                has_wiki: boolean;
                /**
                 * @description Whether discussions are enabled.
                 * @default false
                 */
                has_discussions: boolean;
                homepage: OneOf<[string, null]>;
                /** Format: uri */
                hooks_url: string;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the repository */
                id: number;
                is_template?: boolean;
                /** Format: uri-template */
                issue_comment_url: string;
                /** Format: uri-template */
                issue_events_url: string;
                /** Format: uri-template */
                issues_url: string;
                /** Format: uri-template */
                keys_url: string;
                /** Format: uri-template */
                labels_url: string;
                language: OneOf<[string, null]>;
                /** Format: uri */
                languages_url: string;
                /** License */
                license: OneOf<
                  [
                    {
                      key: string;
                      name: string;
                      node_id: string;
                      spdx_id: string;
                      /** Format: uri */
                      url: OneOf<[string, null]>;
                    },
                    null
                  ]
                >;
                master_branch?: string;
                /**
                 * @description The default value for a merge commit message.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `PR_BODY` - default to the pull request's body.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                /**
                 * @description The default value for a merge commit title.
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                 * @enum {string}
                 */
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                /** Format: uri */
                merges_url: string;
                /** Format: uri-template */
                milestones_url: string;
                /** Format: uri */
                mirror_url: OneOf<[string, null]>;
                /** @description The name of the repository. */
                name: string;
                node_id: string;
                /** Format: uri-template */
                notifications_url: string;
                open_issues: number;
                open_issues_count: number;
                organization?: string;
                /** User */
                owner: OneOf<
                  [
                    {
                      /** Format: uri */
                      avatar_url?: string;
                      deleted?: boolean;
                      email?: OneOf<[string, null]>;
                      /** Format: uri-template */
                      events_url?: string;
                      /** Format: uri */
                      followers_url?: string;
                      /** Format: uri-template */
                      following_url?: string;
                      /** Format: uri-template */
                      gists_url?: string;
                      gravatar_id?: string;
                      /** Format: uri */
                      html_url?: string;
                      id: number;
                      login: string;
                      name?: string;
                      node_id?: string;
                      /** Format: uri */
                      organizations_url?: string;
                      /** Format: uri */
                      received_events_url?: string;
                      /** Format: uri */
                      repos_url?: string;
                      site_admin?: boolean;
                      /** Format: uri-template */
                      starred_url?: string;
                      /** Format: uri */
                      subscriptions_url?: string;
                      /** @enum {string} */
                      type?: "Bot" | "User" | "Organization";
                      /** Format: uri */
                      url?: string;
                    },
                    null
                  ]
                >;
                permissions?: {
                  admin: boolean;
                  maintain?: boolean;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean;
                };
                /** @description Whether the repository is private or public. */
                private: boolean;
                public?: boolean;
                /** Format: uri-template */
                pulls_url: string;
                pushed_at: number | string;
                /** Format: uri-template */
                releases_url: string;
                role_name?: OneOf<[string, null]>;
                size: number;
                /**
                 * @description The default value for a squash merge commit message:
                 *
                 * - `PR_BODY` - default to the pull request's body.
                 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
                 * - `BLANK` - default to a blank commit message.
                 * @enum {string}
                 */
                squash_merge_commit_message?:
                  | "PR_BODY"
                  | "COMMIT_MESSAGES"
                  | "BLANK";
                /**
                 * @description The default value for a squash merge commit title:
                 *
                 * - `PR_TITLE` - default to the pull request's title.
                 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                 * @enum {string}
                 */
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                ssh_url: string;
                stargazers?: number;
                stargazers_count: number;
                /** Format: uri */
                stargazers_url: string;
                /** Format: uri-template */
                statuses_url: string;
                /** Format: uri */
                subscribers_url: string;
                /** Format: uri */
                subscription_url: string;
                /** Format: uri */
                svn_url: string;
                /** Format: uri */
                tags_url: string;
                /** Format: uri */
                teams_url: string;
                topics: string[];
                /** Format: uri-template */
                trees_url: string;
                /** Format: date-time */
                updated_at: string;
                /** Format: uri */
                url: string;
                /**
                 * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
                 * @default false
                 */
                use_squash_pr_title_as_default?: boolean;
                /** @enum {string} */
                visibility: "public" | "private" | "internal";
                watchers: number;
                watchers_count: number;
                /** @description Whether to require contributors to sign off on web-based commits */
                web_commit_signoff_required?: boolean;
              },
              null
            ]
          >;
          sha: string;
          /** User */
          user: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
        };
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        issue_url: string;
        labels: {
          /** @description 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: OneOf<[string, null]>;
          id: number;
          /** @description The name of the label. */
          name: string;
          node_id: string;
          /**
           * Format: uri
           * @description URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        /** @description Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: OneOf<[string, null]>;
        mergeable?: OneOf<[boolean, null]>;
        mergeable_state?: string;
        merged?: OneOf<[boolean, null]>;
        /** Format: date-time */
        merged_at: OneOf<[string, null]>;
        /** User */
        merged_by?: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: OneOf<
          [
            {
              /** Format: date-time */
              closed_at: OneOf<[string, null]>;
              closed_issues: number;
              /** Format: date-time */
              created_at: string;
              /** User */
              creator: OneOf<
                [
                  {
                    /** Format: uri */
                    avatar_url?: string;
                    deleted?: boolean;
                    email?: OneOf<[string, null]>;
                    /** Format: uri-template */
                    events_url?: string;
                    /** Format: uri */
                    followers_url?: string;
                    /** Format: uri-template */
                    following_url?: string;
                    /** Format: uri-template */
                    gists_url?: string;
                    gravatar_id?: string;
                    /** Format: uri */
                    html_url?: string;
                    id: number;
                    login: string;
                    name?: string;
                    node_id?: string;
                    /** Format: uri */
                    organizations_url?: string;
                    /** Format: uri */
                    received_events_url?: string;
                    /** Format: uri */
                    repos_url?: string;
                    site_admin?: boolean;
                    /** Format: uri-template */
                    starred_url?: string;
                    /** Format: uri */
                    subscriptions_url?: string;
                    /** @enum {string} */
                    type?: "Bot" | "User" | "Organization";
                    /** Format: uri */
                    url?: string;
                  },
                  null
                ]
              >;
              description: OneOf<[string, null]>;
              /** Format: date-time */
              due_on: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              id: number;
              /** Format: uri */
              labels_url: string;
              node_id: string;
              /** @description The number of the milestone. */
              number: number;
              open_issues: number;
              /**
               * @description The state of the milestone.
               * @enum {string}
               */
              state: "open" | "closed";
              /** @description The title of the milestone. */
              title: string;
              /** Format: date-time */
              updated_at: string;
              /** Format: uri */
              url: string;
            },
            null
          ]
        >;
        node_id: string;
        /** @description Number uniquely identifying the pull request within its repository. */
        number: number;
        /** Format: uri */
        patch_url: string;
        rebaseable?: OneOf<[boolean, null]>;
        requested_reviewers: OneOf<
          [
            OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >,
            {
              deleted?: boolean;
              /** @description Description of the team */
              description?: OneOf<[string, null]>;
              /** Format: uri */
              html_url?: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url?: string;
              /** @description Name of the team */
              name: string;
              node_id?: string;
              parent?: OneOf<
                [
                  {
                    /** @description Description of the team */
                    description: OneOf<[string, null]>;
                    /** Format: uri */
                    html_url: string;
                    /** @description Unique identifier of the team */
                    id: number;
                    /** Format: uri-template */
                    members_url: string;
                    /** @description Name of the team */
                    name: string;
                    node_id: string;
                    /** @description Permission that the team will have for its repositories */
                    permission: string;
                    /** @enum {string} */
                    privacy: "open" | "closed" | "secret";
                    /** Format: uri */
                    repositories_url: string;
                    slug: string;
                    /**
                     * Format: uri
                     * @description URL for the team
                     */
                    url: string;
                  },
                  null
                ]
              >;
              /** @description Permission that the team will have for its repositories */
              permission?: string;
              /** @enum {string} */
              privacy?: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url?: string;
              slug?: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url?: string;
            }
          ]
        >[];
        requested_teams: {
          deleted?: boolean;
          /** @description Description of the team */
          description?: OneOf<[string, null]>;
          /** Format: uri */
          html_url?: string;
          /** @description Unique identifier of the team */
          id: number;
          /** Format: uri-template */
          members_url?: string;
          /** @description Name of the team */
          name: string;
          node_id?: string;
          parent?: OneOf<
            [
              {
                /** @description Description of the team */
                description: OneOf<[string, null]>;
                /** Format: uri */
                html_url: string;
                /** @description Unique identifier of the team */
                id: number;
                /** Format: uri-template */
                members_url: string;
                /** @description Name of the team */
                name: string;
                node_id: string;
                /** @description Permission that the team will have for its repositories */
                permission: string;
                /** @enum {string} */
                privacy: "open" | "closed" | "secret";
                /** Format: uri */
                repositories_url: string;
                slug: string;
                /**
                 * Format: uri
                 * @description URL for the team
                 */
                url: string;
              },
              null
            ]
          >;
          /** @description Permission that the team will have for its repositories */
          permission?: string;
          /** @enum {string} */
          privacy?: "open" | "closed" | "secret";
          /** Format: uri */
          repositories_url?: string;
          slug?: string;
          /**
           * Format: uri
           * @description URL for the team
           */
          url?: string;
        }[];
        /** Format: uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** Format: uri */
        review_comments_url: string;
        /**
         * @description State of this Pull Request. Either `open` or `closed`.
         * @enum {string}
         */
        state: "open" | "closed";
        /** Format: uri */
        statuses_url: string;
        /** @description The title of the pull request. */
        title: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** User */
        user: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** push event */
    "webhook-push": {
      /** @description The SHA of the most recent commit on `ref` after the push. */
      after: string;
      base_ref: OneOf<[string, null]>;
      /** @description The SHA of the most recent commit on `ref` before the push. */
      before: string;
      /** @description An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 20 commits. If necessary, you can use the [Commits API](https://docs.github.com/github-ae@latest/rest/reference/repos#commits) to fetch additional commits. This limit is applied to timeline events only and isn't applied to webhook deliveries. */
      commits: {
        /** @description An array of files added in the commit. */
        added?: string[];
        /**
         * Committer
         * @description Metaproperties for Git author/committer information.
         */
        author: {
          /** Format: date-time */
          date?: string;
          /** Format: email */
          email: OneOf<[string, null]>;
          /** @description The git author's name. */
          name: string;
          username?: string;
        };
        /**
         * Committer
         * @description Metaproperties for Git author/committer information.
         */
        committer: {
          /** Format: date-time */
          date?: string;
          /** Format: email */
          email: OneOf<[string, null]>;
          /** @description The git author's name. */
          name: string;
          username?: string;
        };
        /** @description Whether this commit is distinct from any that have been pushed before. */
        distinct: boolean;
        id: string;
        /** @description The commit message. */
        message: string;
        /** @description An array of files modified by the commit. */
        modified?: string[];
        /** @description An array of files removed in the commit. */
        removed?: string[];
        /**
         * Format: date-time
         * @description The ISO 8601 timestamp of the commit.
         */
        timestamp: string;
        tree_id: string;
        /**
         * Format: uri
         * @description URL that points to the commit API resource.
         */
        url: string;
      }[];
      /** @description URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit. */
      compare: string;
      /** @description Whether this push created the `ref`. */
      created: boolean;
      /** @description Whether this push deleted the `ref`. */
      deleted: boolean;
      enterprise?: components["schemas"]["enterprise"];
      /** @description Whether this push was a force push of the `ref`. */
      forced: boolean;
      /** Commit */
      head_commit: OneOf<
        [
          {
            /** @description An array of files added in the commit. */
            added?: string[];
            /**
             * Committer
             * @description Metaproperties for Git author/committer information.
             */
            author: {
              /** Format: date-time */
              date?: string;
              /** Format: email */
              email: OneOf<[string, null]>;
              /** @description The git author's name. */
              name: string;
              username?: string;
            };
            /**
             * Committer
             * @description Metaproperties for Git author/committer information.
             */
            committer: {
              /** Format: date-time */
              date?: string;
              /** Format: email */
              email: OneOf<[string, null]>;
              /** @description The git author's name. */
              name: string;
              username?: string;
            };
            /** @description Whether this commit is distinct from any that have been pushed before. */
            distinct: boolean;
            id: string;
            /** @description The commit message. */
            message: string;
            /** @description An array of files modified by the commit. */
            modified?: string[];
            /** @description An array of files removed in the commit. */
            removed?: string[];
            /**
             * Format: date-time
             * @description The ISO 8601 timestamp of the commit.
             */
            timestamp: string;
            tree_id: string;
            /**
             * Format: uri
             * @description URL that points to the commit API resource.
             */
            url: string;
          },
          null
        ]
      >;
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /**
       * Committer
       * @description Metaproperties for Git author/committer information.
       */
      pusher: {
        /** Format: date-time */
        date?: string;
        /** Format: email */
        email?: OneOf<[string, null]>;
        /** @description The git author's name. */
        name: string;
        username?: string;
      };
      /** @description The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`. */
      ref: string;
      /**
       * Repository
       * @description A git repository
       */
      repository: {
        /**
         * @description Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** @description Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * @description Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * @description Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * @description Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** Format: uri-template */
        archive_url: string;
        /**
         * @description Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** Format: uri-template */
        assignees_url: string;
        /** Format: uri-template */
        blobs_url: string;
        /** Format: uri-template */
        branches_url: string;
        /** Format: uri */
        clone_url: string;
        /** Format: uri-template */
        collaborators_url: string;
        /** Format: uri-template */
        comments_url: string;
        /** Format: uri-template */
        commits_url: string;
        /** Format: uri-template */
        compare_url: string;
        /** Format: uri-template */
        contents_url: string;
        /** Format: uri */
        contributors_url: string;
        created_at: number | string;
        /** @description The default branch of the repository. */
        default_branch: string;
        /**
         * @description Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** Format: uri */
        deployments_url: string;
        description: OneOf<[string, null]>;
        /** @description Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** Format: uri */
        downloads_url: string;
        /** Format: uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** Format: uri */
        forks_url: string;
        full_name: string;
        /** Format: uri-template */
        git_commits_url: string;
        /** Format: uri-template */
        git_refs_url: string;
        /** Format: uri-template */
        git_tags_url: string;
        /** Format: uri */
        git_url: string;
        /**
         * @description Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * @description Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * @description Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * @description Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * @description Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: OneOf<[string, null]>;
        /** Format: uri */
        hooks_url: string;
        /** Format: uri */
        html_url: string;
        /** @description Unique identifier of the repository */
        id: number;
        is_template?: boolean;
        /** Format: uri-template */
        issue_comment_url: string;
        /** Format: uri-template */
        issue_events_url: string;
        /** Format: uri-template */
        issues_url: string;
        /** Format: uri-template */
        keys_url: string;
        /** Format: uri-template */
        labels_url: string;
        language: OneOf<[string, null]>;
        /** Format: uri */
        languages_url: string;
        /** License */
        license: OneOf<
          [
            {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** Format: uri */
              url: OneOf<[string, null]>;
            },
            null
          ]
        >;
        master_branch?: string;
        /** Format: uri */
        merges_url: string;
        /** Format: uri-template */
        milestones_url: string;
        /** Format: uri */
        mirror_url: OneOf<[string, null]>;
        /** @description The name of the repository. */
        name: string;
        node_id: string;
        /** Format: uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** @description Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** Format: uri-template */
        pulls_url: string;
        pushed_at: number | string;
        /** Format: uri-template */
        releases_url: string;
        role_name?: OneOf<[string, null]>;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** Format: uri */
        stargazers_url: string;
        /** Format: uri-template */
        statuses_url: string;
        /** Format: uri */
        subscribers_url: string;
        /** Format: uri */
        subscription_url: string;
        /** Format: uri */
        svn_url: string;
        /** Format: uri */
        tags_url: string;
        /** Format: uri */
        teams_url: string;
        topics: string[];
        /** Format: uri-template */
        trees_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** @enum {string} */
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** @description Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sender?: components["schemas"]["simple-user"];
    };
    "webhook-registry-package-published": {
      /** @enum {string} */
      action: "published";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      registry_package: {
        created_at: OneOf<[string, null]>;
        description: OneOf<[string, null]>;
        ecosystem: string;
        html_url: string;
        id: number;
        name: string;
        namespace: string;
        owner: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string;
          html_url: string;
          id: number;
          login: string;
          node_id: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
        };
        package_type: string;
        package_version: OneOf<
          [
            {
              author?: {
                avatar_url: string;
                events_url: string;
                followers_url: string;
                following_url: string;
                gists_url: string;
                gravatar_id: string;
                html_url: string;
                id: number;
                login: string;
                node_id: string;
                organizations_url: string;
                received_events_url: string;
                repos_url: string;
                site_admin: boolean;
                starred_url: string;
                subscriptions_url: string;
                type: string;
                url: string;
              };
              body?: string | Record<string, never>;
              body_html?: string;
              container_metadata?: {
                labels?: OneOf<[Record<string, never>, null]>;
                manifest?: OneOf<[Record<string, never>, null]>;
                tag?: {
                  digest?: string;
                  name?: string;
                };
              };
              created_at?: string;
              description: string;
              docker_metadata?: Record<string, never>[];
              draft?: boolean;
              html_url: string;
              id: number;
              installation_command: string;
              manifest?: string;
              metadata: {
                [key: string]: unknown | undefined;
              }[];
              name: string;
              npm_metadata?: OneOf<
                [
                  {
                    name?: string;
                    version?: string;
                    npm_user?: string;
                    author?: string | Record<string, never>;
                    bugs?: string | Record<string, never>;
                    dependencies?: Record<string, never>;
                    dev_dependencies?: Record<string, never>;
                    peer_dependencies?: Record<string, never>;
                    optional_dependencies?: Record<string, never>;
                    description?: string;
                    dist?: string | Record<string, never>;
                    git_head?: string;
                    homepage?: string;
                    license?: string;
                    main?: string;
                    repository?: string | Record<string, never>;
                    scripts?: Record<string, never>;
                    id?: string;
                    node_version?: string;
                    npm_version?: string;
                    has_shrinkwrap?: boolean;
                    maintainers?: string[];
                    contributors?: string[];
                    engines?: Record<string, never>;
                    keywords?: string[];
                    files?: string[];
                    bin?: Record<string, never>;
                    man?: Record<string, never>;
                    directories?: string | Record<string, never>;
                    os?: string[];
                    cpu?: string[];
                    readme?: string;
                    installation_command?: string;
                    release_id?: number;
                    commit_oid?: string;
                    published_via_actions?: boolean;
                    deleted_by_id?: number;
                  },
                  null
                ]
              >;
              nuget_metadata?: OneOf<
                [
                  {
                    id?: string | Record<string, never> | number;
                    name?: string;
                    value?: OneOf<
                      [
                        boolean,
                        string,
                        number,
                        {
                          url?: string;
                          branch?: string;
                          commit?: string;
                          type?: string;
                        }
                      ]
                    >;
                  }[],
                  null
                ]
              >;
              package_files: {
                content_type: string;
                created_at: string;
                download_url: string;
                id: number;
                md5: OneOf<[string, null]>;
                name: string;
                sha1: OneOf<[string, null]>;
                sha256: OneOf<[string, null]>;
                size: number;
                state: OneOf<[string, null]>;
                updated_at: string;
              }[];
              package_url: string;
              prerelease?: boolean;
              release?: {
                author?: {
                  avatar_url?: string;
                  events_url?: string;
                  followers_url?: string;
                  following_url?: string;
                  gists_url?: string;
                  gravatar_id?: string;
                  html_url?: string;
                  id?: number;
                  login?: string;
                  node_id?: string;
                  organizations_url?: string;
                  received_events_url?: string;
                  repos_url?: string;
                  site_admin?: boolean;
                  starred_url?: string;
                  subscriptions_url?: string;
                  type?: string;
                  url?: string;
                };
                created_at?: string;
                draft?: boolean;
                html_url?: string;
                id?: number;
                name?: OneOf<[string, null]>;
                prerelease?: boolean;
                published_at?: string;
                tag_name?: string;
                target_commitish?: string;
                url?: string;
              };
              rubygems_metadata?: Record<string, never>[];
              summary: string;
              tag_name?: string;
              target_commitish?: string;
              target_oid?: string;
              updated_at?: string;
              version: string;
            },
            null
          ]
        >;
        registry: OneOf<
          [
            {
              about_url?: string;
              name?: string;
              type?: string;
              url?: string;
              vendor?: string;
            },
            null
          ]
        >;
        updated_at: OneOf<[string, null]>;
      };
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    "webhook-registry-package-updated": {
      action: string;
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      registry_package: {
        created_at: string;
        description: null;
        ecosystem: string;
        html_url: string;
        id: number;
        name: string;
        namespace: string;
        owner: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string;
          html_url: string;
          id: number;
          login: string;
          node_id: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
        };
        package_type: string;
        package_version: {
          author: {
            avatar_url: string;
            events_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            gravatar_id: string;
            html_url: string;
            id: number;
            login: string;
            node_id: string;
            organizations_url: string;
            received_events_url: string;
            repos_url: string;
            site_admin: boolean;
            starred_url: string;
            subscriptions_url: string;
            type: string;
            url: string;
          };
          body: string;
          body_html: string;
          created_at: string;
          description: string;
          docker_metadata?: null[];
          draft?: boolean;
          html_url: string;
          id: number;
          installation_command: string;
          manifest?: string;
          metadata: Record<string, never>[];
          name: string;
          package_files: {
            content_type?: string;
            created_at?: string;
            download_url?: string;
            id?: number;
            md5?: OneOf<[string, null]>;
            name?: string;
            sha1?: OneOf<[string, null]>;
            sha256?: string;
            size?: number;
            state?: string;
            updated_at?: string;
          }[];
          package_url: string;
          prerelease?: boolean;
          release?: {
            author: {
              avatar_url: string;
              events_url: string;
              followers_url: string;
              following_url: string;
              gists_url: string;
              gravatar_id: string;
              html_url: string;
              id: number;
              login: string;
              node_id: string;
              organizations_url: string;
              received_events_url: string;
              repos_url: string;
              site_admin: boolean;
              starred_url: string;
              subscriptions_url: string;
              type: string;
              url: string;
            };
            created_at: string;
            draft: boolean;
            html_url: string;
            id: number;
            name: string;
            prerelease: boolean;
            published_at: string;
            tag_name: string;
            target_commitish: string;
            url: string;
          };
          rubygems_metadata?: Record<string, never>[];
          summary: string;
          tag_name?: string;
          target_commitish: string;
          target_oid: string;
          updated_at: string;
          version: string;
        };
        registry: OneOf<[Record<string, never>, null]>;
        updated_at: string;
      };
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** release created event */
    "webhook-release-created": {
      /** @enum {string} */
      action: "created";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /**
       * Release
       * @description The [release](https://docs.github.com/github-ae@latest/rest/reference/repos/#get-a-release) object.
       */
      release: {
        assets: {
          /** Format: uri */
          browser_download_url: string;
          content_type: string;
          /** Format: date-time */
          created_at: string;
          download_count: number;
          id: number;
          label: OneOf<[string, null]>;
          /** @description The file name of the asset. */
          name: string;
          node_id: string;
          size: number;
          /**
           * @description State of the release asset.
           * @enum {string}
           */
          state: "uploaded";
          /** Format: date-time */
          updated_at: string;
          /** User */
          uploader?: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** Format: uri */
          url: string;
        }[];
        /** Format: uri */
        assets_url: string;
        /** User */
        author: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        body: OneOf<[string, null]>;
        /** Format: date-time */
        created_at: OneOf<[string, null]>;
        /** Format: uri */
        discussion_url?: string;
        /** @description Whether the release is a draft or published */
        draft: boolean;
        /** Format: uri */
        html_url: string;
        id: number;
        name: OneOf<[string, null]>;
        node_id: string;
        /** @description Whether the release is identified as a prerelease or a full release. */
        prerelease: boolean;
        /** Format: date-time */
        published_at: OneOf<[string, null]>;
        /** Reactions */
        reactions?: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** @description The name of the tag. */
        tag_name: string;
        /** Format: uri */
        tarball_url: OneOf<[string, null]>;
        /** @description Specifies the commitish value that determines where the Git tag is created from. */
        target_commitish: string;
        /** Format: uri-template */
        upload_url: string;
        /** Format: uri */
        url: string;
        /** Format: uri */
        zipball_url: OneOf<[string, null]>;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** release deleted event */
    "webhook-release-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /**
       * Release
       * @description The [release](https://docs.github.com/github-ae@latest/rest/reference/repos/#get-a-release) object.
       */
      release: {
        assets: {
          /** Format: uri */
          browser_download_url: string;
          content_type: string;
          /** Format: date-time */
          created_at: string;
          download_count: number;
          id: number;
          label: OneOf<[string, null]>;
          /** @description The file name of the asset. */
          name: string;
          node_id: string;
          size: number;
          /**
           * @description State of the release asset.
           * @enum {string}
           */
          state: "uploaded";
          /** Format: date-time */
          updated_at: string;
          /** User */
          uploader?: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** Format: uri */
          url: string;
        }[];
        /** Format: uri */
        assets_url: string;
        /** User */
        author: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        body: OneOf<[string, null]>;
        /** Format: date-time */
        created_at: OneOf<[string, null]>;
        /** Format: uri */
        discussion_url?: string;
        /** @description Whether the release is a draft or published */
        draft: boolean;
        /** Format: uri */
        html_url: string;
        id: number;
        name: OneOf<[string, null]>;
        node_id: string;
        /** @description Whether the release is identified as a prerelease or a full release. */
        prerelease: boolean;
        /** Format: date-time */
        published_at: OneOf<[string, null]>;
        /** Reactions */
        reactions?: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** @description The name of the tag. */
        tag_name: string;
        /** Format: uri */
        tarball_url: OneOf<[string, null]>;
        /** @description Specifies the commitish value that determines where the Git tag is created from. */
        target_commitish: string;
        /** Format: uri-template */
        upload_url: string;
        /** Format: uri */
        url: string;
        /** Format: uri */
        zipball_url: OneOf<[string, null]>;
      };
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** release edited event */
    "webhook-release-edited": {
      /** @enum {string} */
      action: "edited";
      changes: {
        body?: {
          /** @description The previous version of the body if the action was `edited`. */
          from: string;
        };
        name?: {
          /** @description The previous version of the name if the action was `edited`. */
          from: string;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /**
       * Release
       * @description The [release](https://docs.github.com/github-ae@latest/rest/reference/repos/#get-a-release) object.
       */
      release: {
        assets: {
          /** Format: uri */
          browser_download_url: string;
          content_type: string;
          /** Format: date-time */
          created_at: string;
          download_count: number;
          id: number;
          label: OneOf<[string, null]>;
          /** @description The file name of the asset. */
          name: string;
          node_id: string;
          size: number;
          /**
           * @description State of the release asset.
           * @enum {string}
           */
          state: "uploaded";
          /** Format: date-time */
          updated_at: string;
          /** User */
          uploader?: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** Format: uri */
          url: string;
        }[];
        /** Format: uri */
        assets_url: string;
        /** User */
        author: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        body: OneOf<[string, null]>;
        /** Format: date-time */
        created_at: OneOf<[string, null]>;
        /** Format: uri */
        discussion_url?: string;
        /** @description Whether the release is a draft or published */
        draft: boolean;
        /** Format: uri */
        html_url: string;
        id: number;
        name: OneOf<[string, null]>;
        node_id: string;
        /** @description Whether the release is identified as a prerelease or a full release. */
        prerelease: boolean;
        /** Format: date-time */
        published_at: OneOf<[string, null]>;
        /** Reactions */
        reactions?: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** @description The name of the tag. */
        tag_name: string;
        /** Format: uri */
        tarball_url: OneOf<[string, null]>;
        /** @description Specifies the commitish value that determines where the Git tag is created from. */
        target_commitish: string;
        /** Format: uri-template */
        upload_url: string;
        /** Format: uri */
        url: string;
        /** Format: uri */
        zipball_url: OneOf<[string, null]>;
      };
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** release prereleased event */
    "webhook-release-prereleased": {
      /** @enum {string} */
      action: "prereleased";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      release: {
        assets: {
          /** Format: uri */
          browser_download_url: string;
          content_type: string;
          /** Format: date-time */
          created_at: string;
          download_count: number;
          id: number;
          label: OneOf<[string, null]>;
          /** @description The file name of the asset. */
          name: string;
          node_id: string;
          size: number;
          /**
           * @description State of the release asset.
           * @enum {string}
           */
          state: "uploaded";
          /** Format: date-time */
          updated_at: string;
          /** User */
          uploader?: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** Format: uri */
          url: string;
        }[];
        /** Format: uri */
        assets_url: string;
        /** User */
        author: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        body: OneOf<[string, null]>;
        /** Format: date-time */
        created_at: OneOf<[string, null]>;
        /** Format: uri */
        discussion_url?: string;
        /** @description Whether the release is a draft or published */
        draft: boolean;
        /** Format: uri */
        html_url: string;
        id: number;
        name: OneOf<[string, null]>;
        node_id: string;
        /** @description Whether the release is identified as a prerelease or a full release. */
        prerelease: boolean;
        /** Format: date-time */
        published_at: OneOf<[string, null]>;
        /** Reactions */
        reactions?: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** @description The name of the tag. */
        tag_name: string;
        /** Format: uri */
        tarball_url: OneOf<[string, null]>;
        /** @description Specifies the commitish value that determines where the Git tag is created from. */
        target_commitish: string;
        /** Format: uri-template */
        upload_url: string;
        /** Format: uri */
        url: string;
        /** Format: uri */
        zipball_url: OneOf<[string, null]>;
      } & {
        assets?: OneOf<[Record<string, never>, null]>[];
        assets_url?: string;
        author?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        body?: OneOf<[string, null]>;
        created_at?: string;
        draft?: boolean;
        html_url?: string;
        id?: number;
        name?: OneOf<[string, null]>;
        node_id?: string;
        /**
         * @description Whether the release is identified as a prerelease or a full release.
         * @enum {boolean}
         */
        prerelease: true;
        published_at?: OneOf<[string, null]>;
        tag_name?: string;
        tarball_url?: OneOf<[string, null]>;
        target_commitish?: string;
        upload_url?: string;
        url?: string;
        zipball_url?: OneOf<[string, null]>;
      };
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** release published event */
    "webhook-release-published": {
      /** @enum {string} */
      action: "published";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      release: {
        assets: {
          /** Format: uri */
          browser_download_url: string;
          content_type: string;
          /** Format: date-time */
          created_at: string;
          download_count: number;
          id: number;
          label: OneOf<[string, null]>;
          /** @description The file name of the asset. */
          name: string;
          node_id: string;
          size: number;
          /**
           * @description State of the release asset.
           * @enum {string}
           */
          state: "uploaded";
          /** Format: date-time */
          updated_at: string;
          /** User */
          uploader?: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** Format: uri */
          url: string;
        }[];
        /** Format: uri */
        assets_url: string;
        /** User */
        author: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        body: OneOf<[string, null]>;
        /** Format: date-time */
        created_at: OneOf<[string, null]>;
        /** Format: uri */
        discussion_url?: string;
        /** @description Whether the release is a draft or published */
        draft: boolean;
        /** Format: uri */
        html_url: string;
        id: number;
        name: OneOf<[string, null]>;
        node_id: string;
        /** @description Whether the release is identified as a prerelease or a full release. */
        prerelease: boolean;
        /** Format: date-time */
        published_at: OneOf<[string, null]>;
        /** Reactions */
        reactions?: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** @description The name of the tag. */
        tag_name: string;
        /** Format: uri */
        tarball_url: OneOf<[string, null]>;
        /** @description Specifies the commitish value that determines where the Git tag is created from. */
        target_commitish: string;
        /** Format: uri-template */
        upload_url: string;
        /** Format: uri */
        url: string;
        /** Format: uri */
        zipball_url: OneOf<[string, null]>;
      } & {
        assets?: OneOf<[Record<string, never>, null]>[];
        assets_url?: string;
        author?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        body?: OneOf<[string, null]>;
        created_at?: string;
        draft?: boolean;
        html_url?: string;
        id?: number;
        name?: OneOf<[string, null]>;
        node_id?: string;
        prerelease?: boolean;
        /** Format: date-time */
        published_at: OneOf<[string, null]>;
        tag_name?: string;
        tarball_url?: OneOf<[string, null]>;
        target_commitish?: string;
        upload_url?: string;
        url?: string;
        zipball_url?: OneOf<[string, null]>;
      };
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** release released event */
    "webhook-release-released": {
      /** @enum {string} */
      action: "released";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      /**
       * Release
       * @description The [release](https://docs.github.com/github-ae@latest/rest/reference/repos/#get-a-release) object.
       */
      release: {
        assets: {
          /** Format: uri */
          browser_download_url: string;
          content_type: string;
          /** Format: date-time */
          created_at: string;
          download_count: number;
          id: number;
          label: OneOf<[string, null]>;
          /** @description The file name of the asset. */
          name: string;
          node_id: string;
          size: number;
          /**
           * @description State of the release asset.
           * @enum {string}
           */
          state: "uploaded";
          /** Format: date-time */
          updated_at: string;
          /** User */
          uploader?: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** Format: uri */
          url: string;
        }[];
        /** Format: uri */
        assets_url: string;
        /** User */
        author: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        body: OneOf<[string, null]>;
        /** Format: date-time */
        created_at: OneOf<[string, null]>;
        /** Format: uri */
        discussion_url?: string;
        /** @description Whether the release is a draft or published */
        draft: boolean;
        /** Format: uri */
        html_url: string;
        id: number;
        name: OneOf<[string, null]>;
        node_id: string;
        /** @description Whether the release is identified as a prerelease or a full release. */
        prerelease: boolean;
        /** Format: date-time */
        published_at: OneOf<[string, null]>;
        /** Reactions */
        reactions?: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** @description The name of the tag. */
        tag_name: string;
        /** Format: uri */
        tarball_url: OneOf<[string, null]>;
        /** @description Specifies the commitish value that determines where the Git tag is created from. */
        target_commitish: string;
        /** Format: uri-template */
        upload_url: string;
        /** Format: uri */
        url: string;
        /** Format: uri */
        zipball_url: OneOf<[string, null]>;
      };
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** release unpublished event */
    "webhook-release-unpublished": {
      /** @enum {string} */
      action: "unpublished";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      release: {
        assets: {
          /** Format: uri */
          browser_download_url: string;
          content_type: string;
          /** Format: date-time */
          created_at: string;
          download_count: number;
          id: number;
          label: OneOf<[string, null]>;
          /** @description The file name of the asset. */
          name: string;
          node_id: string;
          size: number;
          /**
           * @description State of the release asset.
           * @enum {string}
           */
          state: "uploaded";
          /** Format: date-time */
          updated_at: string;
          /** User */
          uploader?: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** Format: uri */
          url: string;
        }[];
        /** Format: uri */
        assets_url: string;
        /** User */
        author: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        body: OneOf<[string, null]>;
        /** Format: date-time */
        created_at: OneOf<[string, null]>;
        /** Format: uri */
        discussion_url?: string;
        /** @description Whether the release is a draft or published */
        draft: boolean;
        /** Format: uri */
        html_url: string;
        id: number;
        name: OneOf<[string, null]>;
        node_id: string;
        /** @description Whether the release is identified as a prerelease or a full release. */
        prerelease: boolean;
        /** Format: date-time */
        published_at: OneOf<[string, null]>;
        /** Reactions */
        reactions?: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          /** Format: uri */
          url: string;
        };
        /** @description The name of the tag. */
        tag_name: string;
        /** Format: uri */
        tarball_url: OneOf<[string, null]>;
        /** @description Specifies the commitish value that determines where the Git tag is created from. */
        target_commitish: string;
        /** Format: uri-template */
        upload_url: string;
        /** Format: uri */
        url: string;
        /** Format: uri */
        zipball_url: OneOf<[string, null]>;
      } & {
        assets?: OneOf<[Record<string, never>, null]>[];
        assets_url?: string;
        author?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        body?: OneOf<[string, null]>;
        created_at?: string;
        draft?: boolean;
        html_url?: string;
        id?: number;
        name?: OneOf<[string, null]>;
        node_id?: string;
        prerelease?: boolean;
        published_at: OneOf<[string, null]>;
        tag_name?: string;
        tarball_url?: OneOf<[string, null]>;
        target_commitish?: string;
        upload_url?: string;
        url?: string;
        zipball_url?: OneOf<[string, null]>;
      };
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    "webhook-repository-anonymous-access-disabled": {
      /** @enum {string} */
      action: "anonymous_access_disabled";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    "webhook-repository-anonymous-access-enabled": {
      /** @enum {string} */
      action: "anonymous_access_enabled";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** repository archived event */
    "webhook-repository-archived": {
      /** @enum {string} */
      action: "archived";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** repository created event */
    "webhook-repository-created": {
      /** @enum {string} */
      action: "created";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** repository deleted event */
    "webhook-repository-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** repository_dispatch event */
    "webhook-repository-dispatch-sample": {
      action: string;
      branch: string;
      client_payload: OneOf<
        [
          {
            [key: string]: unknown | undefined;
          },
          null
        ]
      >;
      enterprise?: components["schemas"]["enterprise"];
      installation: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** repository edited event */
    "webhook-repository-edited": {
      /** @enum {string} */
      action: "edited";
      changes: {
        default_branch?: {
          from: string;
        };
        description?: {
          from: OneOf<[string, null]>;
        };
        homepage?: {
          from: OneOf<[string, null]>;
        };
        topics?: {
          from?: OneOf<[string[], null]>;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** repository privatized event */
    "webhook-repository-privatized": {
      /** @enum {string} */
      action: "privatized";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** repository publicized event */
    "webhook-repository-publicized": {
      /** @enum {string} */
      action: "publicized";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** repository renamed event */
    "webhook-repository-renamed": {
      /** @enum {string} */
      action: "renamed";
      changes: {
        repository: {
          name: {
            from: string;
          };
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** repository transferred event */
    "webhook-repository-transferred": {
      /** @enum {string} */
      action: "transferred";
      changes: {
        owner: {
          from: {
            /** Organization */
            organization?: {
              /** Format: uri */
              avatar_url: string;
              description: OneOf<[string, null]>;
              /** Format: uri */
              events_url: string;
              /** Format: uri */
              hooks_url: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              /** Format: uri */
              issues_url: string;
              login: string;
              /** Format: uri-template */
              members_url: string;
              node_id: string;
              /** Format: uri-template */
              public_members_url: string;
              /** Format: uri */
              repos_url: string;
              /** Format: uri */
              url: string;
            };
            /** User */
            user?: OneOf<
              [
                {
                  /** Format: uri */
                  avatar_url?: string;
                  deleted?: boolean;
                  email?: OneOf<[string, null]>;
                  /** Format: uri-template */
                  events_url?: string;
                  /** Format: uri */
                  followers_url?: string;
                  /** Format: uri-template */
                  following_url?: string;
                  /** Format: uri-template */
                  gists_url?: string;
                  gravatar_id?: string;
                  /** Format: uri */
                  html_url?: string;
                  id: number;
                  login: string;
                  name?: string;
                  node_id?: string;
                  /** Format: uri */
                  organizations_url?: string;
                  /** Format: uri */
                  received_events_url?: string;
                  /** Format: uri */
                  repos_url?: string;
                  site_admin?: boolean;
                  /** Format: uri-template */
                  starred_url?: string;
                  /** Format: uri */
                  subscriptions_url?: string;
                  /** @enum {string} */
                  type?: "Bot" | "User" | "Organization";
                  /** Format: uri */
                  url?: string;
                },
                null
              ]
            >;
          };
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** repository unarchived event */
    "webhook-repository-unarchived": {
      /** @enum {string} */
      action: "unarchived";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** secret_scanning_alert created event */
    "webhook-secret-scanning-alert-created": {
      /** @enum {string} */
      action: "created";
      alert: components["schemas"]["secret-scanning-alert"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** Secret Scanning Alert Location Created Event */
    "webhook-secret-scanning-alert-location-created": {
      /** @enum {string} */
      action?: "created";
      alert: components["schemas"]["secret-scanning-alert"];
      installation?: components["schemas"]["simple-installation"];
      location: components["schemas"]["secret-scanning-location"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** Secret Scanning Alert Location Created Event */
    "webhook-secret-scanning-alert-location-created-form-encoded": {
      /** @description A URL-encoded string of the secret_scanning_alert_location.created JSON payload. The decoded payload is a JSON object. */
      payload: string;
    };
    /** secret_scanning_alert reopened event */
    "webhook-secret-scanning-alert-reopened": {
      /** @enum {string} */
      action: "reopened";
      alert: components["schemas"]["secret-scanning-alert"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** secret_scanning_alert resolved event */
    "webhook-secret-scanning-alert-resolved": {
      /** @enum {string} */
      action: "resolved";
      alert: {
        created_at?: components["schemas"]["alert-created-at"];
        html_url?: components["schemas"]["alert-html-url"];
        /**
         * Format: uri
         * @description The REST API URL of the code locations for this alert.
         */
        locations_url?: string;
        number?: components["schemas"]["alert-number"];
        /** @description Whether push protection was bypassed for the detected secret. */
        push_protection_bypassed?: OneOf<[boolean, null]>;
        /**
         * Format: date-time
         * @description The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        push_protection_bypassed_at?: OneOf<[string, null]>;
        push_protection_bypassed_by?:
          | null
          | components["schemas"]["simple-user"];
        /**
         * @description **Required when the `state` is `resolved`.** The reason for resolving the alert.
         * @enum {string|null}
         */
        resolution?:
          | ""
          | "false_positive"
          | "wont_fix"
          | "revoked"
          | "used_in_tests"
          | "pattern_deleted"
          | "pattern_edited"
          | null;
        /**
         * Format: date-time
         * @description The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        resolved_at?: OneOf<[string, null]>;
        resolved_by?: null | components["schemas"]["simple-user"];
        /** @description An optional comment to resolve an alert. */
        resolution_comment?: OneOf<[string, null]>;
        /** @description The secret that was detected. */
        secret?: string;
        /** @description The type of secret that secret scanning detected. */
        secret_type?: string;
        /**
         * @description User-friendly name for the detected secret, matching the `secret_type`.
         * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/github-ae@latest/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
         */
        secret_type_display_name?: string;
        state?: components["schemas"]["secret-scanning-alert-state"];
        updated_at?: components["schemas"]["alert-updated-at"];
        url?: components["schemas"]["alert-url"];
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** secret_scanning_alert revoked event */
    "webhook-secret-scanning-alert-revoked": {
      /** @enum {string} */
      action: "revoked";
      alert: components["schemas"]["secret-scanning-alert"];
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** security_and_analysis event */
    "webhook-security-and-analysis": {
      changes: {
        from?: {
          security_and_analysis?: components["schemas"]["security-and-analysis"];
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["full-repository"];
      sender?: components["schemas"]["simple-user"];
    };
    /** sponsorship cancelled event */
    "webhook-sponsorship-cancelled": {
      /** @enum {string} */
      action: "cancelled";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      sponsorship: {
        created_at: string;
        maintainer?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        node_id: string;
        privacy_level: string;
        /** User */
        sponsor: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** User */
        sponsorable: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Sponsorship Tier
         * @description The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
         */
        tier: {
          created_at: string;
          description: string;
          is_custom_ammount?: boolean;
          is_custom_amount?: boolean;
          is_one_time: boolean;
          monthly_price_in_cents: number;
          monthly_price_in_dollars: number;
          name: string;
          node_id: string;
        };
      };
    };
    /** sponsorship created event */
    "webhook-sponsorship-created": {
      /** @enum {string} */
      action: "created";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      sponsorship: {
        created_at: string;
        maintainer?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        node_id: string;
        privacy_level: string;
        /** User */
        sponsor: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** User */
        sponsorable: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Sponsorship Tier
         * @description The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
         */
        tier: {
          created_at: string;
          description: string;
          is_custom_ammount?: boolean;
          is_custom_amount?: boolean;
          is_one_time: boolean;
          monthly_price_in_cents: number;
          monthly_price_in_dollars: number;
          name: string;
          node_id: string;
        };
      };
    };
    /** sponsorship edited event */
    "webhook-sponsorship-edited": {
      /** @enum {string} */
      action: "edited";
      changes: {
        privacy_level?: {
          /** @description The `edited` event types include the details about the change when someone edits a sponsorship to change the privacy. */
          from: string;
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      sponsorship: {
        created_at: string;
        maintainer?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        node_id: string;
        privacy_level: string;
        /** User */
        sponsor: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** User */
        sponsorable: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Sponsorship Tier
         * @description The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
         */
        tier: {
          created_at: string;
          description: string;
          is_custom_ammount?: boolean;
          is_custom_amount?: boolean;
          is_one_time: boolean;
          monthly_price_in_cents: number;
          monthly_price_in_dollars: number;
          name: string;
          node_id: string;
        };
      };
    };
    /** sponsorship pending_cancellation event */
    "webhook-sponsorship-pending-cancellation": {
      /** @enum {string} */
      action: "pending_cancellation";
      /** @description The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect. */
      effective_date?: string;
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      sponsorship: {
        created_at: string;
        maintainer?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        node_id: string;
        privacy_level: string;
        /** User */
        sponsor: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** User */
        sponsorable: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Sponsorship Tier
         * @description The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
         */
        tier: {
          created_at: string;
          description: string;
          is_custom_ammount?: boolean;
          is_custom_amount?: boolean;
          is_one_time: boolean;
          monthly_price_in_cents: number;
          monthly_price_in_dollars: number;
          name: string;
          node_id: string;
        };
      };
    };
    /** sponsorship pending_tier_change event */
    "webhook-sponsorship-pending-tier-change": {
      /** @enum {string} */
      action: "pending_tier_change";
      changes: {
        tier: {
          /**
           * Sponsorship Tier
           * @description The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
           */
          from: {
            created_at: string;
            description: string;
            is_custom_ammount?: boolean;
            is_custom_amount?: boolean;
            is_one_time: boolean;
            monthly_price_in_cents: number;
            monthly_price_in_dollars: number;
            name: string;
            node_id: string;
          };
        };
      };
      /** @description The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect. */
      effective_date?: string;
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      sponsorship: {
        created_at: string;
        maintainer?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        node_id: string;
        privacy_level: string;
        /** User */
        sponsor: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** User */
        sponsorable: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Sponsorship Tier
         * @description The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
         */
        tier: {
          created_at: string;
          description: string;
          is_custom_ammount?: boolean;
          is_custom_amount?: boolean;
          is_one_time: boolean;
          monthly_price_in_cents: number;
          monthly_price_in_dollars: number;
          name: string;
          node_id: string;
        };
      };
    };
    /** sponsorship tier_changed event */
    "webhook-sponsorship-tier-changed": {
      /** @enum {string} */
      action: "tier_changed";
      changes: {
        tier: {
          /**
           * Sponsorship Tier
           * @description The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
           */
          from: {
            created_at: string;
            description: string;
            is_custom_ammount?: boolean;
            is_custom_amount?: boolean;
            is_one_time: boolean;
            monthly_price_in_cents: number;
            monthly_price_in_dollars: number;
            name: string;
            node_id: string;
          };
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      sponsorship: {
        created_at: string;
        maintainer?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        node_id: string;
        privacy_level: string;
        /** User */
        sponsor: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** User */
        sponsorable: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /**
         * Sponsorship Tier
         * @description The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
         */
        tier: {
          created_at: string;
          description: string;
          is_custom_ammount?: boolean;
          is_custom_amount?: boolean;
          is_one_time: boolean;
          monthly_price_in_cents: number;
          monthly_price_in_dollars: number;
          name: string;
          node_id: string;
        };
      };
    };
    /** star created event */
    "webhook-star-created": {
      /** @enum {string} */
      action: "created";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      /** @description The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action. */
      starred_at: OneOf<[string, null]>;
    };
    /** star deleted event */
    "webhook-star-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      /** @description The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action. */
      starred_at: null;
    };
    /** status event */
    "webhook-status": {
      /** Format: uri */
      avatar_url?: OneOf<[string, null]>;
      /** @description An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches. */
      branches: {
        commit: {
          sha: OneOf<[string, null]>;
          /** Format: uri */
          url: OneOf<[string, null]>;
        };
        name: string;
        protected: boolean;
      }[];
      commit: {
        /** User */
        author: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id?: number;
              login?: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** Format: uri */
        comments_url: string;
        commit: {
          author: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          } & {
            date: string;
            email?: string;
            name?: string;
          };
          comment_count: number;
          committer: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          } & {
            date: string;
            email?: string;
            name?: string;
          };
          message: string;
          tree: {
            sha: string;
            /** Format: uri */
            url: string;
          };
          /** Format: uri */
          url: string;
          verification: {
            payload: OneOf<[string, null]>;
            /** @enum {string} */
            reason:
              | "expired_key"
              | "not_signing_key"
              | "gpgverify_error"
              | "gpgverify_unavailable"
              | "unsigned"
              | "unknown_signature_type"
              | "no_user"
              | "unverified_email"
              | "bad_email"
              | "unknown_key"
              | "malformed_signature"
              | "invalid"
              | "valid"
              | "bad_cert"
              | "ocsp_pending";
            signature: OneOf<[string, null]>;
            verified: boolean;
          };
        };
        /** User */
        committer: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id?: number;
              login?: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** Format: uri */
        html_url: string;
        node_id: string;
        parents: {
          /** Format: uri */
          html_url: string;
          sha: string;
          /** Format: uri */
          url: string;
        }[];
        sha: string;
        /** Format: uri */
        url: string;
      };
      context: string;
      created_at: string;
      /** @description The optional human-readable description added to the status. */
      description: OneOf<[string, null]>;
      enterprise?: components["schemas"]["enterprise"];
      /** @description The unique identifier of the status. */
      id: number;
      installation?: components["schemas"]["simple-installation"];
      name: string;
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      /** @description The Commit SHA. */
      sha: string;
      /**
       * @description The new state. Can be `pending`, `success`, `failure`, or `error`.
       * @enum {string}
       */
      state: "pending" | "success" | "failure" | "error";
      /** @description The optional link added to the status. */
      target_url: OneOf<[string, null]>;
      updated_at: string;
    };
    /** team_add event */
    "webhook-team-add": {
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      /**
       * Team
       * @description Groups of organization members that gives permissions on specified repositories.
       */
      team: {
        deleted?: boolean;
        /** @description Description of the team */
        description?: OneOf<[string, null]>;
        /** Format: uri */
        html_url?: string;
        /** @description Unique identifier of the team */
        id: number;
        /** Format: uri-template */
        members_url?: string;
        /** @description Name of the team */
        name: string;
        node_id?: string;
        parent?: OneOf<
          [
            {
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            },
            null
          ]
        >;
        /** @description Permission that the team will have for its repositories */
        permission?: string;
        /** @enum {string} */
        privacy?: "open" | "closed" | "secret";
        /** Format: uri */
        repositories_url?: string;
        slug?: string;
        /**
         * Format: uri
         * @description URL for the team
         */
        url?: string;
      };
    };
    /** team added_to_repository event */
    "webhook-team-added-to-repository": {
      /** @enum {string} */
      action: "added_to_repository";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization: components["schemas"]["organization-simple"];
      /**
       * Repository
       * @description A git repository
       */
      repository?: {
        /**
         * @description Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** @description Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * @description Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * @description Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * @description Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** Format: uri-template */
        archive_url: string;
        /**
         * @description Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** Format: uri-template */
        assignees_url: string;
        /** Format: uri-template */
        blobs_url: string;
        /** Format: uri-template */
        branches_url: string;
        /** Format: uri */
        clone_url: string;
        /** Format: uri-template */
        collaborators_url: string;
        /** Format: uri-template */
        comments_url: string;
        /** Format: uri-template */
        commits_url: string;
        /** Format: uri-template */
        compare_url: string;
        /** Format: uri-template */
        contents_url: string;
        /** Format: uri */
        contributors_url: string;
        created_at: number | string;
        /** @description The default branch of the repository. */
        default_branch: string;
        /**
         * @description Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** Format: uri */
        deployments_url: string;
        description: OneOf<[string, null]>;
        /** @description Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** Format: uri */
        downloads_url: string;
        /** Format: uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** Format: uri */
        forks_url: string;
        full_name: string;
        /** Format: uri-template */
        git_commits_url: string;
        /** Format: uri-template */
        git_refs_url: string;
        /** Format: uri-template */
        git_tags_url: string;
        /** Format: uri */
        git_url: string;
        /**
         * @description Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * @description Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * @description Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * @description Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        homepage: OneOf<[string, null]>;
        /** Format: uri */
        hooks_url: string;
        /** Format: uri */
        html_url: string;
        /** @description Unique identifier of the repository */
        id: number;
        is_template?: boolean;
        /** Format: uri-template */
        issue_comment_url: string;
        /** Format: uri-template */
        issue_events_url: string;
        /** Format: uri-template */
        issues_url: string;
        /** Format: uri-template */
        keys_url: string;
        /** Format: uri-template */
        labels_url: string;
        language: OneOf<[string, null]>;
        /** Format: uri */
        languages_url: string;
        /** License */
        license: OneOf<
          [
            {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** Format: uri */
              url: OneOf<[string, null]>;
            },
            null
          ]
        >;
        master_branch?: string;
        /** Format: uri */
        merges_url: string;
        /** Format: uri-template */
        milestones_url: string;
        /** Format: uri */
        mirror_url: OneOf<[string, null]>;
        /** @description The name of the repository. */
        name: string;
        node_id: string;
        /** Format: uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** @description Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** Format: uri-template */
        pulls_url: string;
        pushed_at: number | string;
        /** Format: uri-template */
        releases_url: string;
        role_name?: OneOf<[string, null]>;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** Format: uri */
        stargazers_url: string;
        /** Format: uri-template */
        statuses_url: string;
        /** Format: uri */
        subscribers_url: string;
        /** Format: uri */
        subscription_url: string;
        /** Format: uri */
        svn_url: string;
        /** Format: uri */
        tags_url: string;
        /** Format: uri */
        teams_url: string;
        topics: string[];
        /** Format: uri-template */
        trees_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** @enum {string} */
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
      };
      sender?: components["schemas"]["simple-user"];
      /**
       * Team
       * @description Groups of organization members that gives permissions on specified repositories.
       */
      team: {
        deleted?: boolean;
        /** @description Description of the team */
        description?: OneOf<[string, null]>;
        /** Format: uri */
        html_url?: string;
        /** @description Unique identifier of the team */
        id: number;
        /** Format: uri-template */
        members_url?: string;
        /** @description Name of the team */
        name: string;
        node_id?: string;
        parent?: OneOf<
          [
            {
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            },
            null
          ]
        >;
        /** @description Permission that the team will have for its repositories */
        permission?: string;
        /** @enum {string} */
        privacy?: "open" | "closed" | "secret";
        /** Format: uri */
        repositories_url?: string;
        slug?: string;
        /**
         * Format: uri
         * @description URL for the team
         */
        url?: string;
      };
    };
    /** team created event */
    "webhook-team-created": {
      /** @enum {string} */
      action: "created";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization: components["schemas"]["organization-simple"];
      /**
       * Repository
       * @description A git repository
       */
      repository?: {
        /**
         * @description Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** @description Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * @description Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * @description Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * @description Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** Format: uri-template */
        archive_url: string;
        /**
         * @description Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** Format: uri-template */
        assignees_url: string;
        /** Format: uri-template */
        blobs_url: string;
        /** Format: uri-template */
        branches_url: string;
        /** Format: uri */
        clone_url: string;
        /** Format: uri-template */
        collaborators_url: string;
        /** Format: uri-template */
        comments_url: string;
        /** Format: uri-template */
        commits_url: string;
        /** Format: uri-template */
        compare_url: string;
        /** Format: uri-template */
        contents_url: string;
        /** Format: uri */
        contributors_url: string;
        created_at: number | string;
        /** @description The default branch of the repository. */
        default_branch: string;
        /**
         * @description Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** Format: uri */
        deployments_url: string;
        description: OneOf<[string, null]>;
        /** @description Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** Format: uri */
        downloads_url: string;
        /** Format: uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** Format: uri */
        forks_url: string;
        full_name: string;
        /** Format: uri-template */
        git_commits_url: string;
        /** Format: uri-template */
        git_refs_url: string;
        /** Format: uri-template */
        git_tags_url: string;
        /** Format: uri */
        git_url: string;
        /**
         * @description Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * @description Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * @description Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * @description Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        homepage: OneOf<[string, null]>;
        /** Format: uri */
        hooks_url: string;
        /** Format: uri */
        html_url: string;
        /** @description Unique identifier of the repository */
        id: number;
        is_template?: boolean;
        /** Format: uri-template */
        issue_comment_url: string;
        /** Format: uri-template */
        issue_events_url: string;
        /** Format: uri-template */
        issues_url: string;
        /** Format: uri-template */
        keys_url: string;
        /** Format: uri-template */
        labels_url: string;
        language: OneOf<[string, null]>;
        /** Format: uri */
        languages_url: string;
        /** License */
        license: OneOf<
          [
            {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** Format: uri */
              url: OneOf<[string, null]>;
            },
            null
          ]
        >;
        master_branch?: string;
        /** Format: uri */
        merges_url: string;
        /** Format: uri-template */
        milestones_url: string;
        /** Format: uri */
        mirror_url: OneOf<[string, null]>;
        /** @description The name of the repository. */
        name: string;
        node_id: string;
        /** Format: uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** @description Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** Format: uri-template */
        pulls_url: string;
        pushed_at: number | string;
        /** Format: uri-template */
        releases_url: string;
        role_name?: OneOf<[string, null]>;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** Format: uri */
        stargazers_url: string;
        /** Format: uri-template */
        statuses_url: string;
        /** Format: uri */
        subscribers_url: string;
        /** Format: uri */
        subscription_url: string;
        /** Format: uri */
        svn_url: string;
        /** Format: uri */
        tags_url: string;
        /** Format: uri */
        teams_url: string;
        topics: string[];
        /** Format: uri-template */
        trees_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** @enum {string} */
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
      };
      sender: components["schemas"]["simple-user"];
      /**
       * Team
       * @description Groups of organization members that gives permissions on specified repositories.
       */
      team: {
        deleted?: boolean;
        /** @description Description of the team */
        description?: OneOf<[string, null]>;
        /** Format: uri */
        html_url?: string;
        /** @description Unique identifier of the team */
        id: number;
        /** Format: uri-template */
        members_url?: string;
        /** @description Name of the team */
        name: string;
        node_id?: string;
        parent?: OneOf<
          [
            {
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            },
            null
          ]
        >;
        /** @description Permission that the team will have for its repositories */
        permission?: string;
        /** @enum {string} */
        privacy?: "open" | "closed" | "secret";
        /** Format: uri */
        repositories_url?: string;
        slug?: string;
        /**
         * Format: uri
         * @description URL for the team
         */
        url?: string;
      };
    };
    /** team deleted event */
    "webhook-team-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization: components["schemas"]["organization-simple"];
      /**
       * Repository
       * @description A git repository
       */
      repository?: {
        /**
         * @description Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** @description Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * @description Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * @description Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * @description Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** Format: uri-template */
        archive_url: string;
        /**
         * @description Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** Format: uri-template */
        assignees_url: string;
        /** Format: uri-template */
        blobs_url: string;
        /** Format: uri-template */
        branches_url: string;
        /** Format: uri */
        clone_url: string;
        /** Format: uri-template */
        collaborators_url: string;
        /** Format: uri-template */
        comments_url: string;
        /** Format: uri-template */
        commits_url: string;
        /** Format: uri-template */
        compare_url: string;
        /** Format: uri-template */
        contents_url: string;
        /** Format: uri */
        contributors_url: string;
        created_at: number | string;
        /** @description The default branch of the repository. */
        default_branch: string;
        /**
         * @description Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** Format: uri */
        deployments_url: string;
        description: OneOf<[string, null]>;
        /** @description Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** Format: uri */
        downloads_url: string;
        /** Format: uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** Format: uri */
        forks_url: string;
        full_name: string;
        /** Format: uri-template */
        git_commits_url: string;
        /** Format: uri-template */
        git_refs_url: string;
        /** Format: uri-template */
        git_tags_url: string;
        /** Format: uri */
        git_url: string;
        /**
         * @description Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * @description Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * @description Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * @description Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        homepage: OneOf<[string, null]>;
        /** Format: uri */
        hooks_url: string;
        /** Format: uri */
        html_url: string;
        /** @description Unique identifier of the repository */
        id: number;
        is_template?: boolean;
        /** Format: uri-template */
        issue_comment_url: string;
        /** Format: uri-template */
        issue_events_url: string;
        /** Format: uri-template */
        issues_url: string;
        /** Format: uri-template */
        keys_url: string;
        /** Format: uri-template */
        labels_url: string;
        language: OneOf<[string, null]>;
        /** Format: uri */
        languages_url: string;
        /** License */
        license: OneOf<
          [
            {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** Format: uri */
              url: OneOf<[string, null]>;
            },
            null
          ]
        >;
        master_branch?: string;
        /** Format: uri */
        merges_url: string;
        /** Format: uri-template */
        milestones_url: string;
        /** Format: uri */
        mirror_url: OneOf<[string, null]>;
        /** @description The name of the repository. */
        name: string;
        node_id: string;
        /** Format: uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** @description Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** Format: uri-template */
        pulls_url: string;
        pushed_at: number | string;
        /** Format: uri-template */
        releases_url: string;
        role_name?: OneOf<[string, null]>;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** Format: uri */
        stargazers_url: string;
        /** Format: uri-template */
        statuses_url: string;
        /** Format: uri */
        subscribers_url: string;
        /** Format: uri */
        subscription_url: string;
        /** Format: uri */
        svn_url: string;
        /** Format: uri */
        tags_url: string;
        /** Format: uri */
        teams_url: string;
        topics: string[];
        /** Format: uri-template */
        trees_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** @enum {string} */
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
      };
      sender?: components["schemas"]["simple-user"];
      /**
       * Team
       * @description Groups of organization members that gives permissions on specified repositories.
       */
      team: {
        deleted?: boolean;
        /** @description Description of the team */
        description?: OneOf<[string, null]>;
        /** Format: uri */
        html_url?: string;
        /** @description Unique identifier of the team */
        id: number;
        /** Format: uri-template */
        members_url?: string;
        /** @description Name of the team */
        name: string;
        node_id?: string;
        parent?: OneOf<
          [
            {
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            },
            null
          ]
        >;
        /** @description Permission that the team will have for its repositories */
        permission?: string;
        /** @enum {string} */
        privacy?: "open" | "closed" | "secret";
        /** Format: uri */
        repositories_url?: string;
        slug?: string;
        /**
         * Format: uri
         * @description URL for the team
         */
        url?: string;
      };
    };
    /** team edited event */
    "webhook-team-edited": {
      /** @enum {string} */
      action: "edited";
      /** @description The changes to the team if the action was `edited`. */
      changes: {
        description?: {
          /** @description The previous version of the description if the action was `edited`. */
          from: string;
        };
        name?: {
          /** @description The previous version of the name if the action was `edited`. */
          from: string;
        };
        privacy?: {
          /** @description The previous version of the team's privacy if the action was `edited`. */
          from: string;
        };
        repository?: {
          permissions: {
            from: {
              /** @description The previous version of the team member's `admin` permission on a repository, if the action was `edited`. */
              admin?: boolean;
              /** @description The previous version of the team member's `pull` permission on a repository, if the action was `edited`. */
              pull?: boolean;
              /** @description The previous version of the team member's `push` permission on a repository, if the action was `edited`. */
              push?: boolean;
            };
          };
        };
      };
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization: components["schemas"]["organization-simple"];
      /**
       * Repository
       * @description A git repository
       */
      repository?: {
        /**
         * @description Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** @description Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * @description Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * @description Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * @description Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** Format: uri-template */
        archive_url: string;
        /**
         * @description Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** Format: uri-template */
        assignees_url: string;
        /** Format: uri-template */
        blobs_url: string;
        /** Format: uri-template */
        branches_url: string;
        /** Format: uri */
        clone_url: string;
        /** Format: uri-template */
        collaborators_url: string;
        /** Format: uri-template */
        comments_url: string;
        /** Format: uri-template */
        commits_url: string;
        /** Format: uri-template */
        compare_url: string;
        /** Format: uri-template */
        contents_url: string;
        /** Format: uri */
        contributors_url: string;
        created_at: number | string;
        /** @description The default branch of the repository. */
        default_branch: string;
        /**
         * @description Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** Format: uri */
        deployments_url: string;
        description: OneOf<[string, null]>;
        /** @description Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** Format: uri */
        downloads_url: string;
        /** Format: uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** Format: uri */
        forks_url: string;
        full_name: string;
        /** Format: uri-template */
        git_commits_url: string;
        /** Format: uri-template */
        git_refs_url: string;
        /** Format: uri-template */
        git_tags_url: string;
        /** Format: uri */
        git_url: string;
        /**
         * @description Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * @description Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * @description Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * @description Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        homepage: OneOf<[string, null]>;
        /** Format: uri */
        hooks_url: string;
        /** Format: uri */
        html_url: string;
        /** @description Unique identifier of the repository */
        id: number;
        is_template?: boolean;
        /** Format: uri-template */
        issue_comment_url: string;
        /** Format: uri-template */
        issue_events_url: string;
        /** Format: uri-template */
        issues_url: string;
        /** Format: uri-template */
        keys_url: string;
        /** Format: uri-template */
        labels_url: string;
        language: OneOf<[string, null]>;
        /** Format: uri */
        languages_url: string;
        /** License */
        license: OneOf<
          [
            {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** Format: uri */
              url: OneOf<[string, null]>;
            },
            null
          ]
        >;
        master_branch?: string;
        /** Format: uri */
        merges_url: string;
        /** Format: uri-template */
        milestones_url: string;
        /** Format: uri */
        mirror_url: OneOf<[string, null]>;
        /** @description The name of the repository. */
        name: string;
        node_id: string;
        /** Format: uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** @description Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** Format: uri-template */
        pulls_url: string;
        pushed_at: number | string;
        /** Format: uri-template */
        releases_url: string;
        role_name?: OneOf<[string, null]>;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** Format: uri */
        stargazers_url: string;
        /** Format: uri-template */
        statuses_url: string;
        /** Format: uri */
        subscribers_url: string;
        /** Format: uri */
        subscription_url: string;
        /** Format: uri */
        svn_url: string;
        /** Format: uri */
        tags_url: string;
        /** Format: uri */
        teams_url: string;
        topics: string[];
        /** Format: uri-template */
        trees_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** @enum {string} */
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
      };
      sender: components["schemas"]["simple-user"];
      /**
       * Team
       * @description Groups of organization members that gives permissions on specified repositories.
       */
      team: {
        deleted?: boolean;
        /** @description Description of the team */
        description?: OneOf<[string, null]>;
        /** Format: uri */
        html_url?: string;
        /** @description Unique identifier of the team */
        id: number;
        /** Format: uri-template */
        members_url?: string;
        /** @description Name of the team */
        name: string;
        node_id?: string;
        parent?: OneOf<
          [
            {
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            },
            null
          ]
        >;
        /** @description Permission that the team will have for its repositories */
        permission?: string;
        /** @enum {string} */
        privacy?: "open" | "closed" | "secret";
        /** Format: uri */
        repositories_url?: string;
        slug?: string;
        /**
         * Format: uri
         * @description URL for the team
         */
        url?: string;
      };
    };
    /** team removed_from_repository event */
    "webhook-team-removed-from-repository": {
      /** @enum {string} */
      action: "removed_from_repository";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization: components["schemas"]["organization-simple"];
      /**
       * Repository
       * @description A git repository
       */
      repository?: {
        /**
         * @description Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** @description Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * @description Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * @description Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * @description Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** Format: uri-template */
        archive_url: string;
        /**
         * @description Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** Format: uri-template */
        assignees_url: string;
        /** Format: uri-template */
        blobs_url: string;
        /** Format: uri-template */
        branches_url: string;
        /** Format: uri */
        clone_url: string;
        /** Format: uri-template */
        collaborators_url: string;
        /** Format: uri-template */
        comments_url: string;
        /** Format: uri-template */
        commits_url: string;
        /** Format: uri-template */
        compare_url: string;
        /** Format: uri-template */
        contents_url: string;
        /** Format: uri */
        contributors_url: string;
        created_at: number | string;
        /** @description The default branch of the repository. */
        default_branch: string;
        /**
         * @description Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** Format: uri */
        deployments_url: string;
        description: OneOf<[string, null]>;
        /** @description Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** Format: uri */
        downloads_url: string;
        /** Format: uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** Format: uri */
        forks_url: string;
        full_name: string;
        /** Format: uri-template */
        git_commits_url: string;
        /** Format: uri-template */
        git_refs_url: string;
        /** Format: uri-template */
        git_tags_url: string;
        /** Format: uri */
        git_url: string;
        /**
         * @description Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * @description Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * @description Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * @description Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        homepage: OneOf<[string, null]>;
        /** Format: uri */
        hooks_url: string;
        /** Format: uri */
        html_url: string;
        /** @description Unique identifier of the repository */
        id: number;
        is_template?: boolean;
        /** Format: uri-template */
        issue_comment_url: string;
        /** Format: uri-template */
        issue_events_url: string;
        /** Format: uri-template */
        issues_url: string;
        /** Format: uri-template */
        keys_url: string;
        /** Format: uri-template */
        labels_url: string;
        language: OneOf<[string, null]>;
        /** Format: uri */
        languages_url: string;
        /** License */
        license: OneOf<
          [
            {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** Format: uri */
              url: OneOf<[string, null]>;
            },
            null
          ]
        >;
        master_branch?: string;
        /** Format: uri */
        merges_url: string;
        /** Format: uri-template */
        milestones_url: string;
        /** Format: uri */
        mirror_url: OneOf<[string, null]>;
        /** @description The name of the repository. */
        name: string;
        node_id: string;
        /** Format: uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** @description Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** Format: uri-template */
        pulls_url: string;
        pushed_at: number | string;
        /** Format: uri-template */
        releases_url: string;
        role_name?: OneOf<[string, null]>;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** Format: uri */
        stargazers_url: string;
        /** Format: uri-template */
        statuses_url: string;
        /** Format: uri */
        subscribers_url: string;
        /** Format: uri */
        subscription_url: string;
        /** Format: uri */
        svn_url: string;
        /** Format: uri */
        tags_url: string;
        /** Format: uri */
        teams_url: string;
        topics: string[];
        /** Format: uri-template */
        trees_url: string;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        /** @enum {string} */
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
      };
      sender: components["schemas"]["simple-user"];
      /**
       * Team
       * @description Groups of organization members that gives permissions on specified repositories.
       */
      team: {
        deleted?: boolean;
        /** @description Description of the team */
        description?: OneOf<[string, null]>;
        /** Format: uri */
        html_url?: string;
        /** @description Unique identifier of the team */
        id: number;
        /** Format: uri-template */
        members_url?: string;
        /** @description Name of the team */
        name: string;
        node_id?: string;
        parent?: OneOf<
          [
            {
              /** @description Description of the team */
              description: OneOf<[string, null]>;
              /** Format: uri */
              html_url: string;
              /** @description Unique identifier of the team */
              id: number;
              /** Format: uri-template */
              members_url: string;
              /** @description Name of the team */
              name: string;
              node_id: string;
              /** @description Permission that the team will have for its repositories */
              permission: string;
              /** @enum {string} */
              privacy: "open" | "closed" | "secret";
              /** Format: uri */
              repositories_url: string;
              slug: string;
              /**
               * Format: uri
               * @description URL for the team
               */
              url: string;
            },
            null
          ]
        >;
        /** @description Permission that the team will have for its repositories */
        permission?: string;
        /** @enum {string} */
        privacy?: "open" | "closed" | "secret";
        /** Format: uri */
        repositories_url?: string;
        slug?: string;
        /**
         * Format: uri
         * @description URL for the team
         */
        url?: string;
      };
    };
    "webhook-user-created": {
      /** @enum {string} */
      action: "created";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
      /** User */
      user?: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
    };
    "webhook-user-deleted": {
      /** @enum {string} */
      action: "deleted";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository?: components["schemas"]["repository"];
      sender?: components["schemas"]["simple-user"];
      /** User */
      user?: OneOf<
        [
          {
            /** Format: uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: OneOf<[string, null]>;
            /** Format: uri-template */
            events_url?: string;
            /** Format: uri */
            followers_url?: string;
            /** Format: uri-template */
            following_url?: string;
            /** Format: uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** Format: uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            received_events_url?: string;
            /** Format: uri */
            repos_url?: string;
            site_admin?: boolean;
            /** Format: uri-template */
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** @enum {string} */
            type?: "Bot" | "User" | "Organization";
            /** Format: uri */
            url?: string;
          },
          null
        ]
      >;
    };
    /** watch started event */
    "webhook-watch-started": {
      /** @enum {string} */
      action: "started";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
    };
    /** workflow_dispatch event */
    "webhook-workflow-dispatch": {
      enterprise?: components["schemas"]["enterprise"];
      inputs: OneOf<
        [
          {
            [key: string]: unknown | undefined;
          },
          null
        ]
      >;
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      ref: string;
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      workflow: string;
    };
    /** workflow_job completed event */
    "webhook-workflow-job-completed": {
      /** @enum {string} */
      action: "completed";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      workflow_job: {
        /** Format: uri */
        check_run_url: string;
        completed_at: OneOf<[string, null]>;
        /** @enum {string|null} */
        conclusion:
          | "success"
          | "failure"
          | ""
          | "skipped"
          | "cancelled"
          | "action_required"
          | "neutral"
          | "timed_out"
          | null;
        /** @description The time that the job created. */
        created_at: string;
        head_sha: string;
        /** Format: uri */
        html_url: string;
        id: number;
        /** @description Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/github-ae@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML. */
        labels: string[];
        name: string;
        node_id: string;
        run_attempt: number;
        run_id: number;
        /** Format: uri */
        run_url: string;
        /** @description The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
        runner_group_id: OneOf<[number, null]>;
        /** @description The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
        runner_group_name: OneOf<[string, null]>;
        /** @description The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
        runner_id: OneOf<[number, null]>;
        /** @description The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
        runner_name: OneOf<[string, null]>;
        started_at: string;
        /**
         * @description The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`.
         * @enum {string}
         */
        status: "queued" | "in_progress" | "completed" | "waiting";
        /** @description The name of the current branch. */
        head_branch: OneOf<[string, null]>;
        /** @description The name of the workflow. */
        workflow_name: OneOf<[string, null]>;
        steps: {
          completed_at: OneOf<[string, null]>;
          /** @enum {string|null} */
          conclusion:
            | "failure"
            | "skipped"
            | "success"
            | "cancelled"
            | ""
            | null;
          name: string;
          number: number;
          started_at: OneOf<[string, null]>;
          /** @enum {string} */
          status: "in_progress" | "completed" | "queued";
        }[];
        /** Format: uri */
        url: string;
      } & {
        check_run_url?: string;
        completed_at?: string;
        /** @enum {string} */
        conclusion:
          | "success"
          | "failure"
          | "skipped"
          | "cancelled"
          | "action_required"
          | "neutral"
          | "timed_out";
        /** @description The time that the job created. */
        created_at?: string;
        head_sha?: string;
        html_url?: string;
        id?: number;
        labels?: OneOf<[string, null]>[];
        name?: string;
        node_id?: string;
        run_attempt?: number;
        run_id?: number;
        run_url?: string;
        runner_group_id?: OneOf<[number, null]>;
        runner_group_name?: OneOf<[string, null]>;
        runner_id?: OneOf<[number, null]>;
        runner_name?: OneOf<[string, null]>;
        started_at?: string;
        status?: string;
        /** @description The name of the current branch. */
        head_branch?: OneOf<[string, null]>;
        /** @description The name of the workflow. */
        workflow_name?: OneOf<[string, null]>;
        steps?: OneOf<[Record<string, never>, null]>[];
        url?: string;
      };
      deployment?: components["schemas"]["deployment"];
    };
    /** workflow_job in_progress event */
    "webhook-workflow-job-in-progress": {
      /** @enum {string} */
      action: "in_progress";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      workflow_job: {
        /** Format: uri */
        check_run_url: string;
        completed_at: OneOf<[string, null]>;
        /** @enum {string|null} */
        conclusion: "success" | "failure" | "" | "cancelled" | "neutral" | null;
        /** @description The time that the job created. */
        created_at: string;
        head_sha: string;
        /** Format: uri */
        html_url: string;
        id: number;
        /** @description Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/github-ae@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML. */
        labels: string[];
        name: string;
        node_id: string;
        run_attempt: number;
        run_id: number;
        /** Format: uri */
        run_url: string;
        /** @description The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
        runner_group_id: OneOf<[number, null]>;
        /** @description The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
        runner_group_name: OneOf<[string, null]>;
        /** @description The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
        runner_id: OneOf<[number, null]>;
        /** @description The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
        runner_name: OneOf<[string, null]>;
        started_at: string;
        /**
         * @description The current status of the job. Can be `queued`, `in_progress`, or `completed`.
         * @enum {string}
         */
        status: "queued" | "in_progress" | "completed";
        /** @description The name of the current branch. */
        head_branch: OneOf<[string, null]>;
        /** @description The name of the workflow. */
        workflow_name: OneOf<[string, null]>;
        steps: {
          completed_at: OneOf<[string, null]>;
          /** @enum {string|null} */
          conclusion:
            | "failure"
            | "skipped"
            | "success"
            | ""
            | "cancelled"
            | null;
          name: string;
          number: number;
          started_at: OneOf<[string, null]>;
          /** @enum {string} */
          status: "in_progress" | "completed" | "queued" | "pending";
        }[];
        /** Format: uri */
        url: string;
      } & {
        check_run_url?: string;
        completed_at?: OneOf<[string, null]>;
        conclusion?: OneOf<[string, null]>;
        /** @description The time that the job created. */
        created_at?: string;
        head_sha?: string;
        html_url?: string;
        id?: number;
        labels?: string[];
        name?: string;
        node_id?: string;
        run_attempt?: number;
        run_id?: number;
        run_url?: string;
        runner_group_id?: OneOf<[number, null]>;
        runner_group_name?: OneOf<[string, null]>;
        runner_id?: OneOf<[number, null]>;
        runner_name?: OneOf<[string, null]>;
        started_at?: string;
        /** @enum {string} */
        status: "in_progress" | "completed" | "queued";
        /** @description The name of the current branch. */
        head_branch?: OneOf<[string, null]>;
        /** @description The name of the workflow. */
        workflow_name?: OneOf<[string, null]>;
        steps: {
          completed_at: OneOf<[string, null]>;
          conclusion: OneOf<[string, null]>;
          name: string;
          number: number;
          started_at: OneOf<[string, null]>;
          /** @enum {string} */
          status: "in_progress" | "completed" | "pending" | "queued";
        }[];
        url?: string;
      };
      deployment?: components["schemas"]["deployment"];
    };
    /** workflow_job queued event */
    "webhook-workflow-job-queued": {
      /** @enum {string} */
      action: "queued";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      workflow_job: {
        /** Format: uri */
        check_run_url: string;
        completed_at: OneOf<[string, null]>;
        conclusion: OneOf<[string, null]>;
        /** @description The time that the job created. */
        created_at: string;
        head_sha: string;
        /** Format: uri */
        html_url: string;
        id: number;
        labels: string[];
        name: string;
        node_id: string;
        run_attempt: number;
        run_id: number;
        /** Format: uri */
        run_url: string;
        runner_group_id: OneOf<[number, null]>;
        runner_group_name: OneOf<[string, null]>;
        runner_id: OneOf<[number, null]>;
        runner_name: OneOf<[string, null]>;
        /** Format: date-time */
        started_at: string;
        /** @enum {string} */
        status: "queued" | "in_progress" | "completed" | "waiting";
        /** @description The name of the current branch. */
        head_branch: OneOf<[string, null]>;
        /** @description The name of the workflow. */
        workflow_name: OneOf<[string, null]>;
        steps: {
          completed_at: OneOf<[string, null]>;
          /** @enum {string|null} */
          conclusion:
            | "failure"
            | "skipped"
            | "success"
            | "cancelled"
            | ""
            | null;
          name: string;
          number: number;
          started_at: OneOf<[string, null]>;
          /** @enum {string} */
          status: "completed" | "in_progress" | "queued" | "pending";
        }[];
        /** Format: uri */
        url: string;
      };
      deployment?: components["schemas"]["deployment"];
    };
    /** workflow_run completed event */
    "webhook-workflow-run-completed": {
      /** @enum {string} */
      action: "completed";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      /** Workflow */
      workflow: OneOf<
        [
          {
            /** Format: uri */
            badge_url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: uri */
            html_url: string;
            id: number;
            name: string;
            node_id: string;
            path: string;
            state: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
          },
          null
        ]
      >;
      workflow_run: {
        /** User */
        actor: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** Format: uri */
        artifacts_url: string;
        /** Format: uri */
        cancel_url: string;
        check_suite_id: number;
        check_suite_node_id: string;
        /** Format: uri */
        check_suite_url: string;
        /** @enum {string|null} */
        conclusion:
          | "success"
          | "failure"
          | "neutral"
          | "cancelled"
          | "timed_out"
          | "action_required"
          | "stale"
          | ""
          | "skipped"
          | null;
        /** Format: date-time */
        created_at: string;
        event: string;
        head_branch: OneOf<[string, null]>;
        /** SimpleCommit */
        head_commit: {
          /**
           * Committer
           * @description Metaproperties for Git author/committer information.
           */
          author: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          };
          /**
           * Committer
           * @description Metaproperties for Git author/committer information.
           */
          committer: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          };
          id: string;
          message: string;
          timestamp: string;
          tree_id: string;
        };
        /** Repository Lite */
        head_repository: {
          /** Format: uri-template */
          archive_url: string;
          /** Format: uri-template */
          assignees_url: string;
          /** Format: uri-template */
          blobs_url: string;
          /** Format: uri-template */
          branches_url: string;
          /** Format: uri-template */
          collaborators_url: string;
          /** Format: uri-template */
          comments_url: string;
          /** Format: uri-template */
          commits_url: string;
          /** Format: uri-template */
          compare_url: string;
          /** Format: uri-template */
          contents_url: string;
          /** Format: uri */
          contributors_url: string;
          /** Format: uri */
          deployments_url: string;
          description: OneOf<[string, null]>;
          /** Format: uri */
          downloads_url: string;
          /** Format: uri */
          events_url: string;
          fork: boolean;
          /** Format: uri */
          forks_url: string;
          full_name: string;
          /** Format: uri-template */
          git_commits_url: string;
          /** Format: uri-template */
          git_refs_url: string;
          /** Format: uri-template */
          git_tags_url: string;
          /** Format: uri */
          hooks_url: string;
          /** Format: uri */
          html_url: string;
          /** @description Unique identifier of the repository */
          id: number;
          /** Format: uri-template */
          issue_comment_url: string;
          /** Format: uri-template */
          issue_events_url: string;
          /** Format: uri-template */
          issues_url: string;
          /** Format: uri-template */
          keys_url: string;
          /** Format: uri-template */
          labels_url: string;
          /** Format: uri */
          languages_url: string;
          /** Format: uri */
          merges_url: string;
          /** Format: uri-template */
          milestones_url: string;
          /** @description The name of the repository. */
          name: string;
          node_id: string;
          /** Format: uri-template */
          notifications_url: string;
          /** User */
          owner: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** @description Whether the repository is private or public. */
          private: boolean;
          /** Format: uri-template */
          pulls_url: string;
          /** Format: uri-template */
          releases_url: string;
          /** Format: uri */
          stargazers_url: string;
          /** Format: uri-template */
          statuses_url: string;
          /** Format: uri */
          subscribers_url: string;
          /** Format: uri */
          subscription_url: string;
          /** Format: uri */
          tags_url: string;
          /** Format: uri */
          teams_url: string;
          /** Format: uri-template */
          trees_url: string;
          /** Format: uri */
          url: string;
        };
        head_sha: string;
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        jobs_url: string;
        /** Format: uri */
        logs_url: string;
        name: OneOf<[string, null]>;
        node_id: string;
        path: string;
        /** Format: uri */
        previous_attempt_url: OneOf<[string, null]>;
        pull_requests: {
          base: {
            ref: string;
            /** Repo Ref */
            repo: {
              id: number;
              name: string;
              /** Format: uri */
              url: string;
            };
            sha: string;
          };
          head: {
            ref: string;
            /** Repo Ref */
            repo: {
              id: number;
              name: string;
              /** Format: uri */
              url: string;
            };
            sha: string;
          };
          id: number;
          number: number;
          /** Format: uri */
          url: string;
        }[];
        referenced_workflows?: OneOf<
          [
            {
              path: string;
              ref?: string;
              sha: string;
            }[],
            null
          ]
        >;
        /** Repository Lite */
        repository: {
          /** Format: uri-template */
          archive_url: string;
          /** Format: uri-template */
          assignees_url: string;
          /** Format: uri-template */
          blobs_url: string;
          /** Format: uri-template */
          branches_url: string;
          /** Format: uri-template */
          collaborators_url: string;
          /** Format: uri-template */
          comments_url: string;
          /** Format: uri-template */
          commits_url: string;
          /** Format: uri-template */
          compare_url: string;
          /** Format: uri-template */
          contents_url: string;
          /** Format: uri */
          contributors_url: string;
          /** Format: uri */
          deployments_url: string;
          description: OneOf<[string, null]>;
          /** Format: uri */
          downloads_url: string;
          /** Format: uri */
          events_url: string;
          fork: boolean;
          /** Format: uri */
          forks_url: string;
          full_name: string;
          /** Format: uri-template */
          git_commits_url: string;
          /** Format: uri-template */
          git_refs_url: string;
          /** Format: uri-template */
          git_tags_url: string;
          /** Format: uri */
          hooks_url: string;
          /** Format: uri */
          html_url: string;
          /** @description Unique identifier of the repository */
          id: number;
          /** Format: uri-template */
          issue_comment_url: string;
          /** Format: uri-template */
          issue_events_url: string;
          /** Format: uri-template */
          issues_url: string;
          /** Format: uri-template */
          keys_url: string;
          /** Format: uri-template */
          labels_url: string;
          /** Format: uri */
          languages_url: string;
          /** Format: uri */
          merges_url: string;
          /** Format: uri-template */
          milestones_url: string;
          /** @description The name of the repository. */
          name: string;
          node_id: string;
          /** Format: uri-template */
          notifications_url: string;
          /** User */
          owner: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** @description Whether the repository is private or public. */
          private: boolean;
          /** Format: uri-template */
          pulls_url: string;
          /** Format: uri-template */
          releases_url: string;
          /** Format: uri */
          stargazers_url: string;
          /** Format: uri-template */
          statuses_url: string;
          /** Format: uri */
          subscribers_url: string;
          /** Format: uri */
          subscription_url: string;
          /** Format: uri */
          tags_url: string;
          /** Format: uri */
          teams_url: string;
          /** Format: uri-template */
          trees_url: string;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        rerun_url: string;
        run_attempt: number;
        run_number: number;
        /** Format: date-time */
        run_started_at: string;
        /** @enum {string} */
        status:
          | "requested"
          | "in_progress"
          | "completed"
          | "queued"
          | "pending"
          | "waiting";
        /** User */
        triggering_actor: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        workflow_id: number;
        /** Format: uri */
        workflow_url: string;
      } & {
        actor?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        artifacts_url?: string;
        cancel_url?: string;
        check_suite_id?: number;
        check_suite_node_id?: string;
        check_suite_url?: string;
        /** @enum {string} */
        conclusion:
          | "success"
          | "failure"
          | "neutral"
          | "cancelled"
          | "timed_out"
          | "action_required"
          | "stale"
          | "skipped";
        created_at?: string;
        event?: string;
        head_branch?: OneOf<[string, null]>;
        head_commit?: {
          author?: {
            email?: string;
            name?: string;
          };
          committer?: {
            email?: string;
            name?: string;
          };
          id?: string;
          message?: string;
          timestamp?: string;
          tree_id?: string;
        };
        head_repository?: {
          archive_url?: string;
          assignees_url?: string;
          blobs_url?: string;
          branches_url?: string;
          collaborators_url?: string;
          comments_url?: string;
          commits_url?: string;
          compare_url?: string;
          contents_url?: string;
          contributors_url?: string;
          deployments_url?: string;
          description?: OneOf<[string, null]>;
          downloads_url?: string;
          events_url?: string;
          fork?: boolean;
          forks_url?: string;
          full_name?: string;
          git_commits_url?: string;
          git_refs_url?: string;
          git_tags_url?: string;
          hooks_url?: string;
          html_url?: string;
          id?: number;
          issue_comment_url?: string;
          issue_events_url?: string;
          issues_url?: string;
          keys_url?: string;
          labels_url?: string;
          languages_url?: string;
          merges_url?: string;
          milestones_url?: string;
          name?: string;
          node_id?: string;
          notifications_url?: string;
          owner?: {
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: number;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
          };
          private?: boolean;
          pulls_url?: string;
          releases_url?: string;
          stargazers_url?: string;
          statuses_url?: string;
          subscribers_url?: string;
          subscription_url?: string;
          tags_url?: string;
          teams_url?: string;
          trees_url?: string;
          url?: string;
        };
        head_sha?: string;
        html_url?: string;
        id?: number;
        jobs_url?: string;
        logs_url?: string;
        name?: OneOf<[string, null]>;
        node_id?: string;
        path?: string;
        previous_attempt_url?: OneOf<[string, null]>;
        pull_requests?: OneOf<[Record<string, never>, null]>[];
        referenced_workflows?: OneOf<
          [
            {
              path: string;
              ref?: string;
              sha: string;
            }[],
            null
          ]
        >;
        repository?: {
          archive_url?: string;
          assignees_url?: string;
          blobs_url?: string;
          branches_url?: string;
          collaborators_url?: string;
          comments_url?: string;
          commits_url?: string;
          compare_url?: string;
          contents_url?: string;
          contributors_url?: string;
          deployments_url?: string;
          description?: OneOf<[string, null]>;
          downloads_url?: string;
          events_url?: string;
          fork?: boolean;
          forks_url?: string;
          full_name?: string;
          git_commits_url?: string;
          git_refs_url?: string;
          git_tags_url?: string;
          hooks_url?: string;
          html_url?: string;
          id?: number;
          issue_comment_url?: string;
          issue_events_url?: string;
          issues_url?: string;
          keys_url?: string;
          labels_url?: string;
          languages_url?: string;
          merges_url?: string;
          milestones_url?: string;
          name?: string;
          node_id?: string;
          notifications_url?: string;
          owner?: {
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: number;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
          };
          private?: boolean;
          pulls_url?: string;
          releases_url?: string;
          stargazers_url?: string;
          statuses_url?: string;
          subscribers_url?: string;
          subscription_url?: string;
          tags_url?: string;
          teams_url?: string;
          trees_url?: string;
          url?: string;
        };
        rerun_url?: string;
        run_attempt?: number;
        run_number?: number;
        run_started_at?: string;
        status?: string;
        triggering_actor?: OneOf<
          [
            {
              avatar_url?: string;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id?: number;
              login?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: string;
              url?: string;
            },
            null
          ]
        >;
        updated_at?: string;
        url?: string;
        workflow_id?: number;
        workflow_url?: string;
      };
    };
    /** workflow_run in_progress event */
    "webhook-workflow-run-in-progress": {
      /** @enum {string} */
      action: "in_progress";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      /** Workflow */
      workflow: OneOf<
        [
          {
            /** Format: uri */
            badge_url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: uri */
            html_url: string;
            id: number;
            name: string;
            node_id: string;
            path: string;
            state: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
          },
          null
        ]
      >;
      workflow_run: {
        /** User */
        actor: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** Format: uri */
        artifacts_url: string;
        /** Format: uri */
        cancel_url: string;
        check_suite_id: number;
        check_suite_node_id: string;
        /** Format: uri */
        check_suite_url: string;
        /** @enum {string|null} */
        conclusion:
          | "success"
          | "failure"
          | "neutral"
          | "cancelled"
          | "timed_out"
          | "action_required"
          | "stale"
          | "skipped"
          | ""
          | null;
        /** Format: date-time */
        created_at: string;
        event: string;
        head_branch: OneOf<[string, null]>;
        /** SimpleCommit */
        head_commit: {
          /**
           * Committer
           * @description Metaproperties for Git author/committer information.
           */
          author: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          };
          /**
           * Committer
           * @description Metaproperties for Git author/committer information.
           */
          committer: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          };
          id: string;
          message: string;
          timestamp: string;
          tree_id: string;
        };
        /** Repository Lite */
        head_repository: {
          /** Format: uri-template */
          archive_url: string;
          /** Format: uri-template */
          assignees_url: string;
          /** Format: uri-template */
          blobs_url: string;
          /** Format: uri-template */
          branches_url: string;
          /** Format: uri-template */
          collaborators_url: string;
          /** Format: uri-template */
          comments_url: string;
          /** Format: uri-template */
          commits_url: string;
          /** Format: uri-template */
          compare_url: string;
          /** Format: uri-template */
          contents_url: string;
          /** Format: uri */
          contributors_url: string;
          /** Format: uri */
          deployments_url: string;
          description: OneOf<[string, null]>;
          /** Format: uri */
          downloads_url: string;
          /** Format: uri */
          events_url: string;
          fork: boolean;
          /** Format: uri */
          forks_url: string;
          full_name: string;
          /** Format: uri-template */
          git_commits_url: string;
          /** Format: uri-template */
          git_refs_url: string;
          /** Format: uri-template */
          git_tags_url: string;
          /** Format: uri */
          hooks_url: string;
          /** Format: uri */
          html_url: string;
          /** @description Unique identifier of the repository */
          id: number;
          /** Format: uri-template */
          issue_comment_url: string;
          /** Format: uri-template */
          issue_events_url: string;
          /** Format: uri-template */
          issues_url: string;
          /** Format: uri-template */
          keys_url: string;
          /** Format: uri-template */
          labels_url: string;
          /** Format: uri */
          languages_url: string;
          /** Format: uri */
          merges_url: string;
          /** Format: uri-template */
          milestones_url: string;
          /** @description The name of the repository. */
          name: string;
          node_id: string;
          /** Format: uri-template */
          notifications_url: string;
          /** User */
          owner: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** @description Whether the repository is private or public. */
          private: boolean;
          /** Format: uri-template */
          pulls_url: string;
          /** Format: uri-template */
          releases_url: string;
          /** Format: uri */
          stargazers_url: string;
          /** Format: uri-template */
          statuses_url: string;
          /** Format: uri */
          subscribers_url: string;
          /** Format: uri */
          subscription_url: string;
          /** Format: uri */
          tags_url: string;
          /** Format: uri */
          teams_url: string;
          /** Format: uri-template */
          trees_url: string;
          /** Format: uri */
          url: string;
        };
        head_sha: string;
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        jobs_url: string;
        /** Format: uri */
        logs_url: string;
        name: OneOf<[string, null]>;
        node_id: string;
        path: string;
        /** Format: uri */
        previous_attempt_url: OneOf<[string, null]>;
        pull_requests: {
          base: {
            ref: string;
            /** Repo Ref */
            repo: {
              id: number;
              name: string;
              /** Format: uri */
              url: string;
            };
            sha: string;
          };
          head: {
            ref: string;
            /** Repo Ref */
            repo: {
              id: number;
              name: string;
              /** Format: uri */
              url: string;
            };
            sha: string;
          };
          id: number;
          number: number;
          /** Format: uri */
          url: string;
        }[];
        referenced_workflows?: OneOf<
          [
            {
              path: string;
              ref?: string;
              sha: string;
            }[],
            null
          ]
        >;
        /** Repository Lite */
        repository: {
          /** Format: uri-template */
          archive_url: string;
          /** Format: uri-template */
          assignees_url: string;
          /** Format: uri-template */
          blobs_url: string;
          /** Format: uri-template */
          branches_url: string;
          /** Format: uri-template */
          collaborators_url: string;
          /** Format: uri-template */
          comments_url: string;
          /** Format: uri-template */
          commits_url: string;
          /** Format: uri-template */
          compare_url: string;
          /** Format: uri-template */
          contents_url: string;
          /** Format: uri */
          contributors_url: string;
          /** Format: uri */
          deployments_url: string;
          description: OneOf<[string, null]>;
          /** Format: uri */
          downloads_url: string;
          /** Format: uri */
          events_url: string;
          fork: boolean;
          /** Format: uri */
          forks_url: string;
          full_name: string;
          /** Format: uri-template */
          git_commits_url: string;
          /** Format: uri-template */
          git_refs_url: string;
          /** Format: uri-template */
          git_tags_url: string;
          /** Format: uri */
          hooks_url: string;
          /** Format: uri */
          html_url: string;
          /** @description Unique identifier of the repository */
          id: number;
          /** Format: uri-template */
          issue_comment_url: string;
          /** Format: uri-template */
          issue_events_url: string;
          /** Format: uri-template */
          issues_url: string;
          /** Format: uri-template */
          keys_url: string;
          /** Format: uri-template */
          labels_url: string;
          /** Format: uri */
          languages_url: string;
          /** Format: uri */
          merges_url: string;
          /** Format: uri-template */
          milestones_url: string;
          /** @description The name of the repository. */
          name: string;
          node_id: string;
          /** Format: uri-template */
          notifications_url: string;
          /** User */
          owner: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** @description Whether the repository is private or public. */
          private: boolean;
          /** Format: uri-template */
          pulls_url: string;
          /** Format: uri-template */
          releases_url: string;
          /** Format: uri */
          stargazers_url: string;
          /** Format: uri-template */
          statuses_url: string;
          /** Format: uri */
          subscribers_url: string;
          /** Format: uri */
          subscription_url: string;
          /** Format: uri */
          tags_url: string;
          /** Format: uri */
          teams_url: string;
          /** Format: uri-template */
          trees_url: string;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        rerun_url: string;
        run_attempt: number;
        run_number: number;
        /** Format: date-time */
        run_started_at: string;
        /** @enum {string} */
        status:
          | "requested"
          | "in_progress"
          | "completed"
          | "queued"
          | "pending";
        /** User */
        triggering_actor: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        workflow_id: number;
        /** Format: uri */
        workflow_url: string;
      } & {
        actor?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        artifacts_url?: string;
        cancel_url?: string;
        check_suite_id?: number;
        check_suite_node_id?: string;
        check_suite_url?: string;
        /** @enum {string|null} */
        conclusion:
          | "success"
          | "failure"
          | "neutral"
          | "cancelled"
          | "timed_out"
          | "action_required"
          | "skipped"
          | "stale"
          | ""
          | null;
        created_at?: string;
        event?: string;
        head_branch?: OneOf<[string, null]>;
        head_commit?: {
          author?: {
            email?: string;
            name?: string;
          };
          committer?: {
            email?: string;
            name?: string;
          };
          id?: string;
          message?: string;
          timestamp?: string;
          tree_id?: string;
        };
        head_repository?: {
          archive_url?: string;
          assignees_url?: string;
          blobs_url?: string;
          branches_url?: string;
          collaborators_url?: string;
          comments_url?: string;
          commits_url?: string;
          compare_url?: string;
          contents_url?: string;
          contributors_url?: string;
          deployments_url?: string;
          description?: OneOf<[string, null]>;
          downloads_url?: string;
          events_url?: string;
          fork?: boolean;
          forks_url?: string;
          full_name?: string;
          git_commits_url?: string;
          git_refs_url?: string;
          git_tags_url?: string;
          hooks_url?: string;
          html_url?: string;
          id?: number;
          issue_comment_url?: string;
          issue_events_url?: string;
          issues_url?: string;
          keys_url?: string;
          labels_url?: string;
          languages_url?: string;
          merges_url?: string;
          milestones_url?: string;
          name?: OneOf<[string, null]>;
          node_id?: string;
          notifications_url?: string;
          owner?: {
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: number;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
          };
          private?: boolean;
          pulls_url?: string;
          releases_url?: string;
          stargazers_url?: string;
          statuses_url?: string;
          subscribers_url?: string;
          subscription_url?: string;
          tags_url?: string;
          teams_url?: string;
          trees_url?: string;
          url?: string;
        };
        head_sha?: string;
        html_url?: string;
        id?: number;
        jobs_url?: string;
        logs_url?: string;
        name?: OneOf<[string, null]>;
        node_id?: string;
        path?: string;
        previous_attempt_url?: OneOf<[string, null]>;
        pull_requests?: OneOf<[Record<string, never>, null]>[];
        referenced_workflows?: OneOf<
          [
            {
              path: string;
              ref?: string;
              sha: string;
            }[],
            null
          ]
        >;
        repository?: {
          archive_url?: string;
          assignees_url?: string;
          blobs_url?: string;
          branches_url?: string;
          collaborators_url?: string;
          comments_url?: string;
          commits_url?: string;
          compare_url?: string;
          contents_url?: string;
          contributors_url?: string;
          deployments_url?: string;
          description?: OneOf<[string, null]>;
          downloads_url?: string;
          events_url?: string;
          fork?: boolean;
          forks_url?: string;
          full_name?: string;
          git_commits_url?: string;
          git_refs_url?: string;
          git_tags_url?: string;
          hooks_url?: string;
          html_url?: string;
          id?: number;
          issue_comment_url?: string;
          issue_events_url?: string;
          issues_url?: string;
          keys_url?: string;
          labels_url?: string;
          languages_url?: string;
          merges_url?: string;
          milestones_url?: string;
          name?: string;
          node_id?: string;
          notifications_url?: string;
          owner?: {
            avatar_url?: string;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id?: number;
            login?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: string;
            url?: string;
          };
          private?: boolean;
          pulls_url?: string;
          releases_url?: string;
          stargazers_url?: string;
          statuses_url?: string;
          subscribers_url?: string;
          subscription_url?: string;
          tags_url?: string;
          teams_url?: string;
          trees_url?: string;
          url?: string;
        };
        rerun_url?: string;
        run_attempt?: number;
        run_number?: number;
        run_started_at?: string;
        status?: string;
        triggering_actor?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        updated_at?: string;
        url?: string;
        workflow_id?: number;
        workflow_url?: string;
      };
    };
    /** workflow_run requested event */
    "webhook-workflow-run-requested": {
      /** @enum {string} */
      action: "requested";
      enterprise?: components["schemas"]["enterprise"];
      installation?: components["schemas"]["simple-installation"];
      organization?: components["schemas"]["organization-simple"];
      repository: components["schemas"]["repository"];
      sender: components["schemas"]["simple-user"];
      /** Workflow */
      workflow: OneOf<
        [
          {
            /** Format: uri */
            badge_url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: uri */
            html_url: string;
            id: number;
            name: string;
            node_id: string;
            path: string;
            state: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
          },
          null
        ]
      >;
      /** Workflow Run */
      workflow_run: {
        /** User */
        actor: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** Format: uri */
        artifacts_url: string;
        /** Format: uri */
        cancel_url: string;
        check_suite_id: number;
        check_suite_node_id: string;
        /** Format: uri */
        check_suite_url: string;
        /** @enum {string|null} */
        conclusion:
          | "success"
          | "failure"
          | "neutral"
          | "cancelled"
          | "timed_out"
          | "action_required"
          | "stale"
          | ""
          | "skipped"
          | "startup_failure"
          | null;
        /** Format: date-time */
        created_at: string;
        event: string;
        head_branch: OneOf<[string, null]>;
        /** SimpleCommit */
        head_commit: {
          /**
           * Committer
           * @description Metaproperties for Git author/committer information.
           */
          author: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          };
          /**
           * Committer
           * @description Metaproperties for Git author/committer information.
           */
          committer: {
            /** Format: date-time */
            date?: string;
            /** Format: email */
            email: OneOf<[string, null]>;
            /** @description The git author's name. */
            name: string;
            username?: string;
          };
          id: string;
          message: string;
          timestamp: string;
          tree_id: string;
        };
        /** Repository Lite */
        head_repository: {
          /** Format: uri-template */
          archive_url: string;
          /** Format: uri-template */
          assignees_url: string;
          /** Format: uri-template */
          blobs_url: string;
          /** Format: uri-template */
          branches_url: string;
          /** Format: uri-template */
          collaborators_url: string;
          /** Format: uri-template */
          comments_url: string;
          /** Format: uri-template */
          commits_url: string;
          /** Format: uri-template */
          compare_url: string;
          /** Format: uri-template */
          contents_url: string;
          /** Format: uri */
          contributors_url: string;
          /** Format: uri */
          deployments_url: string;
          description: OneOf<[string, null]>;
          /** Format: uri */
          downloads_url: string;
          /** Format: uri */
          events_url: string;
          fork: boolean;
          /** Format: uri */
          forks_url: string;
          full_name: string;
          /** Format: uri-template */
          git_commits_url: string;
          /** Format: uri-template */
          git_refs_url: string;
          /** Format: uri-template */
          git_tags_url: string;
          /** Format: uri */
          hooks_url: string;
          /** Format: uri */
          html_url: string;
          /** @description Unique identifier of the repository */
          id: number;
          /** Format: uri-template */
          issue_comment_url: string;
          /** Format: uri-template */
          issue_events_url: string;
          /** Format: uri-template */
          issues_url: string;
          /** Format: uri-template */
          keys_url: string;
          /** Format: uri-template */
          labels_url: string;
          /** Format: uri */
          languages_url: string;
          /** Format: uri */
          merges_url: string;
          /** Format: uri-template */
          milestones_url: string;
          /** @description The name of the repository. */
          name: string;
          node_id: string;
          /** Format: uri-template */
          notifications_url: string;
          /** User */
          owner: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** @description Whether the repository is private or public. */
          private: boolean;
          /** Format: uri-template */
          pulls_url: string;
          /** Format: uri-template */
          releases_url: string;
          /** Format: uri */
          stargazers_url: string;
          /** Format: uri-template */
          statuses_url: string;
          /** Format: uri */
          subscribers_url: string;
          /** Format: uri */
          subscription_url: string;
          /** Format: uri */
          tags_url: string;
          /** Format: uri */
          teams_url: string;
          /** Format: uri-template */
          trees_url: string;
          /** Format: uri */
          url: string;
        };
        head_sha: string;
        /** Format: uri */
        html_url: string;
        id: number;
        /** Format: uri */
        jobs_url: string;
        /** Format: uri */
        logs_url: string;
        name: OneOf<[string, null]>;
        node_id: string;
        path: string;
        /** Format: uri */
        previous_attempt_url: OneOf<[string, null]>;
        pull_requests: {
          base: {
            ref: string;
            /** Repo Ref */
            repo: {
              id: number;
              name: string;
              /** Format: uri */
              url: string;
            };
            sha: string;
          };
          head: {
            ref: string;
            /** Repo Ref */
            repo: {
              id: number;
              name: string;
              /** Format: uri */
              url: string;
            };
            sha: string;
          };
          id: number;
          number: number;
          /** Format: uri */
          url: string;
        }[];
        referenced_workflows?: OneOf<
          [
            {
              path: string;
              ref?: string;
              sha: string;
            }[],
            null
          ]
        >;
        /** Repository Lite */
        repository: {
          /** Format: uri-template */
          archive_url: string;
          /** Format: uri-template */
          assignees_url: string;
          /** Format: uri-template */
          blobs_url: string;
          /** Format: uri-template */
          branches_url: string;
          /** Format: uri-template */
          collaborators_url: string;
          /** Format: uri-template */
          comments_url: string;
          /** Format: uri-template */
          commits_url: string;
          /** Format: uri-template */
          compare_url: string;
          /** Format: uri-template */
          contents_url: string;
          /** Format: uri */
          contributors_url: string;
          /** Format: uri */
          deployments_url: string;
          description: OneOf<[string, null]>;
          /** Format: uri */
          downloads_url: string;
          /** Format: uri */
          events_url: string;
          fork: boolean;
          /** Format: uri */
          forks_url: string;
          full_name: string;
          /** Format: uri-template */
          git_commits_url: string;
          /** Format: uri-template */
          git_refs_url: string;
          /** Format: uri-template */
          git_tags_url: string;
          /** Format: uri */
          hooks_url: string;
          /** Format: uri */
          html_url: string;
          /** @description Unique identifier of the repository */
          id: number;
          /** Format: uri-template */
          issue_comment_url: string;
          /** Format: uri-template */
          issue_events_url: string;
          /** Format: uri-template */
          issues_url: string;
          /** Format: uri-template */
          keys_url: string;
          /** Format: uri-template */
          labels_url: string;
          /** Format: uri */
          languages_url: string;
          /** Format: uri */
          merges_url: string;
          /** Format: uri-template */
          milestones_url: string;
          /** @description The name of the repository. */
          name: string;
          node_id: string;
          /** Format: uri-template */
          notifications_url: string;
          /** User */
          owner: OneOf<
            [
              {
                /** Format: uri */
                avatar_url?: string;
                deleted?: boolean;
                email?: OneOf<[string, null]>;
                /** Format: uri-template */
                events_url?: string;
                /** Format: uri */
                followers_url?: string;
                /** Format: uri-template */
                following_url?: string;
                /** Format: uri-template */
                gists_url?: string;
                gravatar_id?: string;
                /** Format: uri */
                html_url?: string;
                id: number;
                login: string;
                name?: string;
                node_id?: string;
                /** Format: uri */
                organizations_url?: string;
                /** Format: uri */
                received_events_url?: string;
                /** Format: uri */
                repos_url?: string;
                site_admin?: boolean;
                /** Format: uri-template */
                starred_url?: string;
                /** Format: uri */
                subscriptions_url?: string;
                /** @enum {string} */
                type?: "Bot" | "User" | "Organization";
                /** Format: uri */
                url?: string;
              },
              null
            ]
          >;
          /** @description Whether the repository is private or public. */
          private: boolean;
          /** Format: uri-template */
          pulls_url: string;
          /** Format: uri-template */
          releases_url: string;
          /** Format: uri */
          stargazers_url: string;
          /** Format: uri-template */
          statuses_url: string;
          /** Format: uri */
          subscribers_url: string;
          /** Format: uri */
          subscription_url: string;
          /** Format: uri */
          tags_url: string;
          /** Format: uri */
          teams_url: string;
          /** Format: uri-template */
          trees_url: string;
          /** Format: uri */
          url: string;
        };
        /** Format: uri */
        rerun_url: string;
        run_attempt: number;
        run_number: number;
        /** Format: date-time */
        run_started_at: string;
        /** @enum {string} */
        status:
          | "requested"
          | "in_progress"
          | "completed"
          | "queued"
          | "pending"
          | "waiting";
        /** User */
        triggering_actor: OneOf<
          [
            {
              /** Format: uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: OneOf<[string, null]>;
              /** Format: uri-template */
              events_url?: string;
              /** Format: uri */
              followers_url?: string;
              /** Format: uri-template */
              following_url?: string;
              /** Format: uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** Format: uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** Format: uri */
              organizations_url?: string;
              /** Format: uri */
              received_events_url?: string;
              /** Format: uri */
              repos_url?: string;
              site_admin?: boolean;
              /** Format: uri-template */
              starred_url?: string;
              /** Format: uri */
              subscriptions_url?: string;
              /** @enum {string} */
              type?: "Bot" | "User" | "Organization";
              /** Format: uri */
              url?: string;
            },
            null
          ]
        >;
        /** Format: date-time */
        updated_at: string;
        /** Format: uri */
        url: string;
        workflow_id: number;
        /** Format: uri */
        workflow_url: string;
        display_title: string;
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  /**
   * This event occurs when there is activity relating to branch protection rules. For more information, see "[About protected branches](https://docs.github.com/github-ae@latest/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches)." For information about the APIs to manage branch protection rules, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#branchprotectionrule) or "[Branch protection](https://docs.github.com/github-ae@latest/rest/branches/branch-protection)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission
   * @description A branch protection rule was created.
   */
  "branch-protection-rule/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-branch-protection-rule-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to branch protection rules. For more information, see "[About protected branches](https://docs.github.com/github-ae@latest/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches)." For information about the APIs to manage branch protection rules, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#branchprotectionrule) or "[Branch protection](https://docs.github.com/github-ae@latest/rest/branches/branch-protection)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.
   * @description A branch protection rule was deleted.
   */
  "branch-protection-rule/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-branch-protection-rule-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to branch protection rules. For more information, see "[About protected branches](https://docs.github.com/github-ae@latest/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches)." For information about the APIs to manage branch protection rules, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#branchprotectionrule) or "[Branch protection](https://docs.github.com/github-ae@latest/rest/branches/branch-protection)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.
   * @description A branch protection rule was edited.
   */
  "branch-protection-rule/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-branch-protection-rule-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a check run. For information about check runs, see "[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api)." For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checkrun) or "[Check Runs](https://docs.github.com/github-ae@latest/rest/checks/runs)" in the REST API documentation.
   *
   * For activity relating to check suites, use the `check-suite` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the `rerequested` and `requested_action` event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
   *
   * Repository and organization webhooks only receive payloads for the `created` and `completed` event types in repositories.
   *
   * **Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   * @description A check run was completed, and a conclusion is available.
   */
  "check-run/completed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-check-run-completed"];
        "application/x-www-form-urlencoded": components["schemas"]["webhook-check-run-completed-form-encoded"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a check run. For information about check runs, see "[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api)." For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checkrun) or "[Check Runs](https://docs.github.com/github-ae@latest/rest/checks/runs)" in the REST API documentation.
   *
   * For activity relating to check suites, use the `check-suite` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the `rerequested` and `requested_action` event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
   *
   * Repository and organization webhooks only receive payloads for the `created` and `completed` event types in repositories.
   *
   * **Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   * @description A new check run was created.
   */
  "check-run/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-check-run-created"];
        "application/x-www-form-urlencoded": components["schemas"]["webhook-check-run-created-form-encoded"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a check run. For information about check runs, see "[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api)." For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checkrun) or "[Check Runs](https://docs.github.com/github-ae@latest/rest/checks/runs)" in the REST API documentation.
   *
   * For activity relating to check suites, use the `check-suite` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the `rerequested` and `requested_action` event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
   *
   * Repository and organization webhooks only receive payloads for the `created` and `completed` event types in repositories.
   *
   * **Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   * @description A check run completed, and someone requested a followup action that your app provides. Only the GitHub App someone requests to perform an action will receive the `requested_action` payload. For more information, see "[Creating CI tests with the Checks API](https://docs.github.com/github-ae@latest/developers/apps/guides/creating-ci-tests-with-the-checks-api)."
   */
  "check-run/requested-action": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-check-run-requested-action"];
        "application/x-www-form-urlencoded": components["schemas"]["webhook-check-run-requested-action-form-encoded"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a check run. For information about check runs, see "[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api)." For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checkrun) or "[Check Runs](https://docs.github.com/github-ae@latest/rest/checks/runs)" in the REST API documentation.
   *
   * For activity relating to check suites, use the `check-suite` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the `rerequested` and `requested_action` event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
   *
   * Repository and organization webhooks only receive payloads for the `created` and `completed` event types in repositories.
   *
   * **Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   * @description Someone requested to re-run a check run. Only the GitHub App that someone requests to re-run the check will receive the `rerequested` payload.
   */
  "check-run/rerequested": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-check-run-rerequested"];
        "application/x-www-form-urlencoded": components["schemas"]["webhook-check-run-rerequested-form-encoded"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a check suite. For information about check suites, see "[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api)." For information about the APIs to manage check suites, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checksuite) or "[Check Suites](https://docs.github.com/github-ae@latest/rest/checks/suites)" in the REST API documentation.
   *
   * For activity relating to check runs, use the `check_run` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the `requested` and `rerequested` event types, the app must have at lease write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
   *
   * Repository and organization webhooks only receive payloads for the `completed` event types in repositories.
   *
   * **Note**: The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   * @description All check runs in a check suite have completed, and a conclusion is available.
   */
  "check-suite/completed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-check-suite-completed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a check suite. For information about check suites, see "[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api)." For information about the APIs to manage check suites, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checksuite) or "[Check Suites](https://docs.github.com/github-ae@latest/rest/checks/suites)" in the REST API documentation.
   *
   * For activity relating to check runs, use the `check_run` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the `requested` and `rerequested` event types, the app must have at lease write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
   *
   * Repository and organization webhooks only receive payloads for the `completed` event types in repositories.
   *
   * **Note**: The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   * @description Someone requested to run a check suite. By default, check suites are automatically created when you create a check run. For more information, see [the GraphQL API documentation for creating a check run](https://docs.github.com/github-ae@latest/graphql/reference/mutations#createcheckrun) or "[Create a check run](https://docs.github.com/github-ae@latest/rest/checks/runs#create-a-check-run)" in the REST API documentation.
   */
  "check-suite/requested": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-check-suite-requested"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a check suite. For information about check suites, see "[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api)." For information about the APIs to manage check suites, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checksuite) or "[Check Suites](https://docs.github.com/github-ae@latest/rest/checks/suites)" in the REST API documentation.
   *
   * For activity relating to check runs, use the `check_run` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the `requested` and `rerequested` event types, the app must have at lease write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
   *
   * Repository and organization webhooks only receive payloads for the `completed` event types in repositories.
   *
   * **Note**: The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   * @description Someone requested to re-run the check runs in a check suite. For more information, see [the GraphQL API documentation for creating a check suite](https://docs.github.com/github-ae@latest/graphql/reference/mutations#createchecksuite) or "[Create a check suite](https://docs.github.com/github-ae@latest/rest/checks/suites#create-a-check-suite)" in the REST API documentation.
   */
  "check-suite/rerequested": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-check-suite-rerequested"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)" and "[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)." For information about the API to manage code scanning, see "[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.
   * @description A previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.
   */
  "code-scanning-alert/appeared-in-branch": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-code-scanning-alert-appeared-in-branch"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)" and "[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)." For information about the API to manage code scanning, see "[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.
   * @description Someone closed a code scanning alert.
   */
  "code-scanning-alert/closed-by-user": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-code-scanning-alert-closed-by-user"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)" and "[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)." For information about the API to manage code scanning, see "[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.
   * @description A code scanning alert was created in a repository.
   */
  "code-scanning-alert/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-code-scanning-alert-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)" and "[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)." For information about the API to manage code scanning, see "[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.
   * @description A code scanning alert was fixed in a branch by a commit.
   */
  "code-scanning-alert/fixed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-code-scanning-alert-fixed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)" and "[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)." For information about the API to manage code scanning, see "[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.
   * @description A previously fixed code scanning alert reappeared in a branch.
   */
  "code-scanning-alert/reopened": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-code-scanning-alert-reopened"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)" and "[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)." For information about the API to manage code scanning, see "[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.
   * @description Someone reopened a code scanning alert.
   */
  "code-scanning-alert/reopened-by-user": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-code-scanning-alert-reopened-by-user"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to commit comments. For more information about commit comments, see "[Commenting on a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request)." For information about the APIs to manage commit comments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#commitcomment) or "[Commit comments](https://docs.github.com/github-ae@latest/rest/commits/comments)" in the REST API documentation.
   *
   * For activity relating to comments on pull request reviews, use the `pull_request_review_comment` event. For activity relating to issue comments, use the `issue_comment` event. For activity relating to discussion comments, use the `discussion_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
   * @description Someone commented on a commit.
   */
  "commit-comment/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-commit-comment-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when a Git branch or tag is created.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
   *
   * **Note**: This event will not occur when more than three tags are created at once.
   */
  create: {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-create"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when a Git branch or tag is deleted.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
   *
   * **Note**: This event will not occur when more than three tags are deleted at once.
   */
  delete: {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-delete"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to Dependabot alerts.
   *
   * For more information about Dependabot alerts, see "[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)." For information about the API to manage Dependabot alerts, see "[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
   *
   * **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
   * @description A manifest file change introduced a vulnerable dependency, or a GitHub Security Advisory was published and an existing dependency was found to be vulnerable.
   */
  "dependabot-alert/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-dependabot-alert-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to Dependabot alerts.
   *
   * For more information about Dependabot alerts, see "[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)." For information about the API to manage Dependabot alerts, see "[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
   *
   * **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
   * @description A Dependabot alert was manually closed.
   */
  "dependabot-alert/dismissed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-dependabot-alert-dismissed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to Dependabot alerts.
   *
   * For more information about Dependabot alerts, see "[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)." For information about the API to manage Dependabot alerts, see "[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
   *
   * **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
   * @description A manifest file change removed a vulnerability.
   */
  "dependabot-alert/fixed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-dependabot-alert-fixed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to Dependabot alerts.
   *
   * For more information about Dependabot alerts, see "[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)." For information about the API to manage Dependabot alerts, see "[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
   *
   * **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
   * @description A manifest file change introduced a vulnerable dependency that had previously been fixed.
   */
  "dependabot-alert/reintroduced": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-dependabot-alert-reintroduced"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to Dependabot alerts.
   *
   * For more information about Dependabot alerts, see "[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)." For information about the API to manage Dependabot alerts, see "[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
   *
   * **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
   * @description A Dependabot alert was manually reopened.
   */
  "dependabot-alert/reopened": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-dependabot-alert-reopened"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to deploy keys. For more information, see "[Managing deploy keys](https://docs.github.com/github-ae@latest/developers/overview/managing-deploy-keys)." For information about the APIs to manage deploy keys, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#deploykey) or "[Deploy keys](https://docs.github.com/github-ae@latest/rest/deploy-keys)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
   * @description A deploy key was created.
   */
  "deploy-key/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-deploy-key-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to deploy keys. For more information, see "[Managing deploy keys](https://docs.github.com/github-ae@latest/developers/overview/managing-deploy-keys)." For information about the APIs to manage deploy keys, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#deploykey) or "[Deploy keys](https://docs.github.com/github-ae@latest/rest/deploy-keys)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
   * @description A deploy key was deleted.
   */
  "deploy-key/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-deploy-key-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to deployments. For more information, see "[About deployments](https://docs.github.com/github-ae@latest/actions/deployment/about-deployments)." For information about the APIs to manage deployments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#deployment) or "[Deployments](https://docs.github.com/github-ae@latest/rest/deployments/deployments)" in the REST API documentation.
   *
   * For activity relating to deployment status, use the `deployment_status` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
   * @description A deployment was created.
   */
  "deployment/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-deployment-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to deployment statuses. For more information, see "[About deployments](https://docs.github.com/github-ae@latest/actions/deployment/about-deployments)." For information about the APIs to manage deployments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#deployment) or "[Deployments](https://docs.github.com/github-ae@latest/rest/deployments/deployments)" in the REST API documentation.
   *
   * For activity relating to deployment creation, use the `deployment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
   * @description A new deployment status was created.
   */
  "deployment-status/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-deployment-status-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a comment on a discussion, use the `discussion_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description A comment on the discussion was marked as the answer.
   */
  "discussion/answered": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-answered"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a comment on a discussion, use the `discussion_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description The category of a discussion was changed.
   */
  "discussion/category-changed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-category-changed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a discussion as opposed to comments on a discussion, use the `discussion` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description A comment on a discussion was created.
   */
  "discussion-comment/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-comment-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a discussion as opposed to comments on a discussion, use the `discussion` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description A comment on a discussion was deleted.
   */
  "discussion-comment/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-comment-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a discussion as opposed to comments on a discussion, use the `discussion` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description A comment on a discussion was edited.
   */
  "discussion-comment/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-comment-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a comment on a discussion, use the `discussion_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description A discussion was created.
   */
  "discussion/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a comment on a discussion, use the `discussion_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description A discussion was deleted.
   */
  "discussion/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a comment on a discussion, use the `discussion_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description The title or body on a discussion was edited, or the category of the discussion was changed.
   */
  "discussion/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a comment on a discussion, use the `discussion_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description A label was added to a discussion.
   */
  "discussion/labeled": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-labeled"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a comment on a discussion, use the `discussion_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description A discussion was locked.
   */
  "discussion/locked": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-locked"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a comment on a discussion, use the `discussion_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description A discussion was pinned.
   */
  "discussion/pinned": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-pinned"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a comment on a discussion, use the `discussion_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description A discussion was transferred to another repository.
   */
  "discussion/transferred": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-transferred"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a comment on a discussion, use the `discussion_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description A comment on the discussion was unmarked as the answer.
   */
  "discussion/unanswered": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-unanswered"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a comment on a discussion, use the `discussion_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description A label was removed from a discussion.
   */
  "discussion/unlabeled": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-unlabeled"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a comment on a discussion, use the `discussion_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description A discussion was unlocked.
   */
  "discussion/unlocked": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-unlocked"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a discussion. For more information about discussions, see "[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions)." For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).
   *
   * For activity relating to a comment on a discussion, use the `discussion_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
   *
   * **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
   * @description A discussion was unpinned.
   */
  "discussion/unpinned": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-discussion-unpinned"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when someone forks a repository. For more information, see "[Fork a repo](https://docs.github.com/github-ae@latest/get-started/quickstart/fork-a-repo)." For information about the API to manage forks, see "[Forks](https://docs.github.com/github-ae@latest/rest/repos/forks)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
   */
  fork: {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-fork"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when a user revokes their authorization of a GitHub App. For more information, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the API to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/apps)" in the REST API documentation.
   *
   * A GitHub App receives this webhook by default and cannot unsubscribe from this event.
   *
   * Anyone can revoke their authorization of a GitHub App from their [GitHub account settings page](https://github.com/settings/apps/authorizations). Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the `401 Bad Credentials` error. For details about user-to-server requests, which require GitHub App authorization, see "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/github-ae@latest/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)."
   * @description Someone revoked their authorization of a GitHub App.
   */
  "github-app-authorization/revoked": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-github-app-authorization-revoked"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when someone creates or updates a wiki page. For more information, see "[About wikis](https://docs.github.com/github-ae@latest/communities/documenting-your-project-with-wikis/about-wikis)."
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
   */
  gollum: {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-gollum"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
   *
   * For more information about GitHub Apps, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
   * @description Someone installed a GitHub App on a user or organization account.
   */
  "installation/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-installation-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
   *
   * For more information about GitHub Apps, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
   * @description Someone uninstalled a GitHub App from their user or organization account.
   */
  "installation/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-installation-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
   *
   * For more information about GitHub Apps, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
   * @description Someone granted new permissions to a GitHub App.
   */
  "installation/new-permissions-accepted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-installation-new-permissions-accepted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
   *
   * For more information about GitHub Apps, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
   * @description A GitHub App installation was granted access to one or more repositories.
   */
  "installation-repositories/added": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-installation-repositories-added"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
   *
   * For more information about GitHub Apps, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
   * @description Access to one or more repositories was revoked for a GitHub App installation.
   */
  "installation-repositories/removed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-installation-repositories-removed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
   *
   * For more information about GitHub Apps, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
   * @description Someone blocked access by a GitHub App to their user or organization account.
   */
  "installation/suspend": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-installation-suspend"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
   * @description Somebody renamed the user or organization account that a GitHub App is installed on.
   */
  "installation-target/renamed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-installation-target-renamed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
   *
   * For more information about GitHub Apps, see "[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps)." For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or "[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)" in the REST API documentation.
   * @description A GitHub App that was blocked from accessing a user or organization account was given access the account again.
   */
  "installation/unsuspend": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-installation-unsuspend"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)" and "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage issue comments, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issuecomment) or "[Issue comments](https://docs.github.com/github-ae@latest/rest/issues/comments)" in the REST API documentation.
   *
   * For activity relating to an issue as opposed to comments on an issue, use the `issue` event. For activity related to pull request reviews or pull request review comments, use the `pull_request_review` or `pull_request_review_comment` events. For more information about the different types of pull request comments, see "[Working with comments](https://docs.github.com/github-ae@latest/rest/guides/working-with-comments)."
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
   * @description A comment on an issue or pull request was created.
   */
  "issue-comment/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issue-comment-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)" and "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage issue comments, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issuecomment) or "[Issue comments](https://docs.github.com/github-ae@latest/rest/issues/comments)" in the REST API documentation.
   *
   * For activity relating to an issue as opposed to comments on an issue, use the `issue` event. For activity related to pull request reviews or pull request review comments, use the `pull_request_review` or `pull_request_review_comment` events. For more information about the different types of pull request comments, see "[Working with comments](https://docs.github.com/github-ae@latest/rest/guides/working-with-comments)."
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
   * @description A comment on an issue or pull request was deleted.
   */
  "issue-comment/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issue-comment-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)" and "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage issue comments, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issuecomment) or "[Issue comments](https://docs.github.com/github-ae@latest/rest/issues/comments)" in the REST API documentation.
   *
   * For activity relating to an issue as opposed to comments on an issue, use the `issue` event. For activity related to pull request reviews or pull request review comments, use the `pull_request_review` or `pull_request_review_comment` events. For more information about the different types of pull request comments, see "[Working with comments](https://docs.github.com/github-ae@latest/rest/guides/working-with-comments)."
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
   * @description A comment on an issue or pull request was edited.
   */
  "issue-comment/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issue-comment-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description An issue was assigned to a user.
   */
  "issues/assigned": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-assigned"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description An issue was closed.
   */
  "issues/closed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-closed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description An issue was deleted.
   */
  "issues/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description An issue was removed from a milestone.
   */
  "issues/demilestoned": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-demilestoned"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description The title or body on an issue was edited.
   */
  "issues/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description A label was added to an issue.
   */
  "issues/labeled": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-labeled"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description Conversation on an issue was locked. For more information, see "[Locking conversations](https://docs.github.com/github-ae@latest/communities/moderating-comments-and-conversations/locking-conversations)."
   */
  "issues/locked": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-locked"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description An issue was added to a milestone.
   */
  "issues/milestoned": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-milestoned"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description An issue was created. When a closed issue is reopened, the action will be `reopened` instead.
   */
  "issues/opened": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-opened"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description An issue was pinned to a repository. For more information, see "[Pinning an issue to your repository](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository)."
   */
  "issues/pinned": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-pinned"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description A closed issue was reopened.
   */
  "issues/reopened": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-reopened"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description An issue was transferred to another repository. For more information, see "[Transferring an issue to another repository](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/transferring-an-issue-to-another-repository)."
   */
  "issues/transferred": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-transferred"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description A user was unassigned from an issue.
   */
  "issues/unassigned": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-unassigned"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description A label was removed from an issue.
   */
  "issues/unlabeled": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-unlabeled"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description Conversation on an issue was locked. For more information, see "[Locking conversations](https://docs.github.com/github-ae@latest/communities/moderating-comments-and-conversations/locking-conversations)."
   */
  "issues/unlocked": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-unlocked"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an issue. For more information about issues, see "[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)." For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or "[Issues](https://docs.github.com/github-ae@latest/rest/issues)" in the REST API documentation.
   *
   * For activity relating to a comment on an issue, use the `issue_comment` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.
   * @description An issue was unpinned from a repository. For more information, see "[Pinning an issue to your repository](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository)."
   */
  "issues/unpinned": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-issues-unpinned"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to labels. For more information, see "[Managing labels](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/managing-labels)." For information about the APIs to manage labels, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#label) or "[Labels](https://docs.github.com/github-ae@latest/rest/issues/labels)" in the REST API documentation.
   *
   * If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the `labeled` or `unlabeled` action type for the `issues`, `pull_request`, or `discussion` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description A label was created.
   */
  "label/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-label-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to labels. For more information, see "[Managing labels](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/managing-labels)." For information about the APIs to manage labels, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#label) or "[Labels](https://docs.github.com/github-ae@latest/rest/issues/labels)" in the REST API documentation.
   *
   * If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the `labeled` or `unlabeled` action type for the `issues`, `pull_request`, or `discussion` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description A label was deleted.
   */
  "label/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-label-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to labels. For more information, see "[Managing labels](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/managing-labels)." For information about the APIs to manage labels, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#label) or "[Labels](https://docs.github.com/github-ae@latest/rest/issues/labels)" in the REST API documentation.
   *
   * If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the `labeled` or `unlabeled` action type for the `issues`, `pull_request`, or `discussion` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description A label's name, description, or color was changed.
   */
  "label/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-label-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to collaborators in a repository. For more information, see "[Adding outside collaborators to repositories in your organization](https://docs.github.com/github-ae@latest/organizations/managing-user-access-to-your-organizations-repositories/adding-outside-collaborators-to-repositories-in-your-organization)." For more information about the API to manage repository collaborators, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repositorycollaboratorconnection) or "[Collaborators](https://docs.github.com/github-ae@latest/rest/collaborators/collaborators)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   * @description A GitHub user accepted an invitation to a repository.
   */
  "member/added": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-member-added"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to collaborators in a repository. For more information, see "[Adding outside collaborators to repositories in your organization](https://docs.github.com/github-ae@latest/organizations/managing-user-access-to-your-organizations-repositories/adding-outside-collaborators-to-repositories-in-your-organization)." For more information about the API to manage repository collaborators, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repositorycollaboratorconnection) or "[Collaborators](https://docs.github.com/github-ae@latest/rest/collaborators/collaborators)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   * @description Permissions were changed for a collaborator on a repository.
   */
  "member/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-member-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to collaborators in a repository. For more information, see "[Adding outside collaborators to repositories in your organization](https://docs.github.com/github-ae@latest/organizations/managing-user-access-to-your-organizations-repositories/adding-outside-collaborators-to-repositories-in-your-organization)." For more information about the API to manage repository collaborators, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repositorycollaboratorconnection) or "[Collaborators](https://docs.github.com/github-ae@latest/rest/collaborators/collaborators)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   * @description A collaborator was removed from a repository.
   */
  "member/removed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-member-removed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to team membership. For more information, see "[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams)." For more information about the APIs to manage team memberships, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#team) or "[Team members](https://docs.github.com/github-ae@latest/rest/teams/members)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   * @description An organization member was added to a team.
   */
  "membership/added": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-membership-added"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to team membership. For more information, see "[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams)." For more information about the API to manage team memberships, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#team) or "[Team members](https://docs.github.com/github-ae@latest/rest/teams/members)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   * @description An organization member was removed from a team.
   */
  "membership/removed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-membership-removed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a merge group in a merge queue. For more information, see "[Managing a merge queue](https://docs.github.com/github-ae@latest/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue)."
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.
   *
   * **Note**: The pull request merge queue feature is currently in public beta and subject to change.
   * @description Status checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
   *
   * When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.
   */
  "merge-group/checks-requested": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-merge-group-checks-requested"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a webhook itself.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.
   * @description The webhook was deleted.
   */
  "meta/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-meta-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to milestones. For more information, see "[About milestones](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/about-milestones)." For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#milestone) or "[Milestones](https://docs.github.com/github-ae@latest/rest/issues/milestones)" in the REST API documentation.
   *
   * If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the `milestoned` or `demilestoned` action type for the `issues` or `pull_request` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
   * @description A milestone was closed.
   */
  "milestone/closed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-milestone-closed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to milestones. For more information, see "[About milestones](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/about-milestones)." For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#milestone) or "[Milestones](https://docs.github.com/github-ae@latest/rest/issues/milestones)" in the REST API documentation.
   *
   * If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the `milestoned` or `demilestoned` action type for the `issues` or `pull_request` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
   * @description A milestone was created.
   */
  "milestone/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-milestone-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to milestones. For more information, see "[About milestones](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/about-milestones)." For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#milestone) or "[Milestones](https://docs.github.com/github-ae@latest/rest/issues/milestones)" in the REST API documentation.
   *
   * If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the `milestoned` or `demilestoned` action type for the `issues` or `pull_request` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
   * @description A milestone was deleted.
   */
  "milestone/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-milestone-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to milestones. For more information, see "[About milestones](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/about-milestones)." For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#milestone) or "[Milestones](https://docs.github.com/github-ae@latest/rest/issues/milestones)" in the REST API documentation.
   *
   * If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the `milestoned` or `demilestoned` action type for the `issues` or `pull_request` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
   * @description A milestone was edited.
   */
  "milestone/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-milestone-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to milestones. For more information, see "[About milestones](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/about-milestones)." For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#milestone) or "[Milestones](https://docs.github.com/github-ae@latest/rest/issues/milestones)" in the REST API documentation.
   *
   * If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the `milestoned` or `demilestoned` action type for the `issues` or `pull_request` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.
   * @description A milestone was opened.
   */
  "milestone/opened": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-milestone-opened"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an organization and its members. For more information, see "[About organizations](https://docs.github.com/github-ae@latest/organizations/collaborating-with-groups-in-organizations/about-organizations)." For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#organization) or "[Organizations](https://docs.github.com/github-ae@latest/rest/orgs)" in the REST API documentation.
   *
   * If you want to receive an event when a non-member is blocked or unblocked from an organization, use the `org_block` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   * @description An organization was deleted.
   */
  "organization/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-organization-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an organization and its members. For more information, see "[About organizations](https://docs.github.com/github-ae@latest/organizations/collaborating-with-groups-in-organizations/about-organizations)." For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#organization) or "[Organizations](https://docs.github.com/github-ae@latest/rest/orgs)" in the REST API documentation.
   *
   * If you want to receive an event when a non-member is blocked or unblocked from an organization, use the `org_block` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   * @description A member accepted an invitation to join an organization.
   */
  "organization/member-added": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-organization-member-added"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an organization and its members. For more information, see "[About organizations](https://docs.github.com/github-ae@latest/organizations/collaborating-with-groups-in-organizations/about-organizations)." For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#organization) or "[Organizations](https://docs.github.com/github-ae@latest/rest/orgs)" in the REST API documentation.
   *
   * If you want to receive an event when a non-member is blocked or unblocked from an organization, use the `org_block` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   * @description A member was invited to join the organization.
   */
  "organization/member-invited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-organization-member-invited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an organization and its members. For more information, see "[About organizations](https://docs.github.com/github-ae@latest/organizations/collaborating-with-groups-in-organizations/about-organizations)." For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#organization) or "[Organizations](https://docs.github.com/github-ae@latest/rest/orgs)" in the REST API documentation.
   *
   * If you want to receive an event when a non-member is blocked or unblocked from an organization, use the `org_block` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   * @description A member was removed from the organization.
   */
  "organization/member-removed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-organization-member-removed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an organization and its members. For more information, see "[About organizations](https://docs.github.com/github-ae@latest/organizations/collaborating-with-groups-in-organizations/about-organizations)." For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#organization) or "[Organizations](https://docs.github.com/github-ae@latest/rest/orgs)" in the REST API documentation.
   *
   * If you want to receive an event when a non-member is blocked or unblocked from an organization, use the `org_block` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   * @description The name of an organization was changed.
   */
  "organization/renamed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-organization-renamed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to GitHub Packages. For more information, see "[Introduction to GitHub Packages](https://docs.github.com/github-ae@latest/packages/learn-github-packages/introduction-to-github-packages)." For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#package) or "[Packages](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
   *
   * To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
   * @description A package was published to a registry.
   */
  "package/published": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-package-published"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to GitHub Packages. For more information, see "[Introduction to GitHub Packages](https://docs.github.com/github-ae@latest/packages/learn-github-packages/introduction-to-github-packages)." For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#package) or "[Packages](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
   *
   * To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
   * @description A previously published package was updated.
   */
  "package/updated": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-package-updated"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "[Configuring a publishing source for your GitHub Pages site](https://docs.github.com/github-ae@latest/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site)." For information about the API to manage GitHub Pages, see "[Pages](https://docs.github.com/github-ae@latest/rest/pages)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.
   */
  "page-build": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-page-build"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /** This event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly. */
  ping: {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-ping"];
        "application/x-www-form-urlencoded": components["schemas"]["webhook-ping-form-encoded"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a card on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
   *
   * For activity relating to a project or a column on a project, use the `project` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
   * @description A note in a classic project was converted to an issue.
   */
  "project-card/converted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-project-card-converted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a card on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
   *
   * For activity relating to a project or a column on a project, use the `project` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
   * @description A card was added to a classic project.
   */
  "project-card/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-project-card-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a card on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
   *
   * For activity relating to a project or a column on a project, use the `project` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
   * @description A card on a classic project was deleted.
   */
  "project-card/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-project-card-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a card on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
   *
   * For activity relating to a project or a column on a project, use the `project` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
   * @description A note on a classic project was edited.
   */
  "project-card/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-project-card-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a card on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
   *
   * For activity relating to a project or a column on a project, use the `project` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
   * @description A card on a classic project was moved to another column or to another position in its column.
   */
  "project-card/moved": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-project-card-moved"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
   *
   * For activity relating to a card or column on a project, use the `project_card` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
   * @description A classic project was closed.
   */
  "project/closed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-project-closed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a column on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
   *
   * For activity relating to a project or a card on a project, use the `project` and `project_card` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
   * @description A column was added to a classic project.
   */
  "project-column/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-project-column-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a column on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
   *
   * For activity relating to a project or a card on a project, use the `project` and `project_card` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
   * @description A column was deleted from a classic project.
   */
  "project-column/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-project-column-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a column on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
   *
   * For activity relating to a project or a card on a project, use the `project` and `project_card` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
   * @description The name of a column on a classic project was changed.
   */
  "project-column/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-project-column-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a column on a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
   *
   * For activity relating to a project or a card on a project, use the `project` and `project_card` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
   * @description A column was moved to a new position on a classic project.
   */
  "project-column/moved": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-project-column-moved"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
   *
   * For activity relating to a card or column on a project, use the `project_card` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
   * @description A classic project was created.
   */
  "project/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-project-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
   *
   * For activity relating to a card or column on a project, use the `project_card` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
   * @description A classic project was deleted.
   */
  "project/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-project-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
   *
   * For activity relating to a card or column on a project, use the `project_card` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
   * @description The name or description of a classic project was changed.
   */
  "project/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-project-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a classic project. For more information, see "[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)." For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or "[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)" in the REST API documentation.
   *
   * For activity relating to a card or column on a project, use the `project_card` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.
   * @description A classic project was closed.
   */
  "project/reopened": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-project-reopened"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an organization-level project. For more information, see "[About Projects](https://docs.github.com/github-ae@latest/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)." For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#projectv2).
   *
   * For activity relating to a item on a project, use the `projects_v2_item` event. For activity relating to Projects (classic), use the `project`, project_card`, and `project_column` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
   *
   * **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
   * @description A project in the organization was closed.
   */
  "projects-v2/closed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example project-v2 */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-projects-v2-project-closed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an organization-level project. For more information, see "[About Projects](https://docs.github.com/github-ae@latest/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)." For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#projectv2).
   *
   * For activity relating to a item on a project, use the `projects_v2_item` event. For activity relating to Projects (classic), use the `project`, project_card`, and `project_column` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
   *
   * **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
   * @description A project in the organization was created.
   */
  "projects-v2/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example project-v2 */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-projects-v2-project-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an organization-level project. For more information, see "[About Projects](https://docs.github.com/github-ae@latest/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)." For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#projectv2).
   *
   * For activity relating to a item on a project, use the `projects_v2_item` event. For activity relating to Projects (classic), use the `project`, project_card`, and `project_column` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
   *
   * **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
   * @description A project in the organization was deleted.
   */
  "projects-v2/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example project-v2 */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-projects-v2-project-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an organization-level project. For more information, see "[About Projects](https://docs.github.com/github-ae@latest/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)." For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#projectv2).
   *
   * For activity relating to a item on a project, use the `projects_v2_item` event. For activity relating to Projects (classic), use the `project`, project_card`, and `project_column` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
   *
   * **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
   * @description The title, description, or README of a project in the organization was changed.
   */
  "projects-v2/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example project-v2 */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-projects-v2-project-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to an organization-level project. For more information, see "[About Projects](https://docs.github.com/github-ae@latest/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)." For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#projectv2).
   *
   * For activity relating to a item on a project, use the `projects_v2_item` event. For activity relating to Projects (classic), use the `project`, project_card`, and `project_column` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
   *
   * **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
   * @description A project in the organization was reopened.
   */
  "projects-v2/reopened": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example project-v2 */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-projects-v2-project-reopened"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when repository visibility changes from private to public. For more information, see "[Setting repository visibility](https://docs.github.com/github-ae@latest/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/setting-repository-visibility)."
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   */
  public: {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-public"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A pull request was assigned to a user.
   */
  "pull-request/assigned": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-assigned"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description Auto merge was disabled for a pull request. For more information, see "[Automatically merging a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request)."
   */
  "pull-request/auto-merge-disabled": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-auto-merge-disabled"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description Auto merge was enabled for a pull request. For more information, see "[Automatically merging a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request)."
   */
  "pull-request/auto-merge-enabled": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-auto-merge-enabled"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A pull request was closed. If `merged` is false in the webhook payload, the pull request was closed with unmerged commits. If `merged` is true in the webhook payload, the pull request was merged.
   */
  "pull-request/closed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-closed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A pull request was converted to a draft. For more information, see "[Changing the stage of a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request)."
   */
  "pull-request/converted-to-draft": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-converted-to-draft"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A pull request was removed from a milestone.
   */
  "pull-request/demilestoned": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-demilestoned"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description The title or body of a pull request was edited.
   */
  "pull-request/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A label was added to a pull request.
   */
  "pull-request/labeled": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-labeled"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description Conversation on a pull request was locked. For more information, see "[Locking conversations](https://docs.github.com/github-ae@latest/communities/moderating-comments-and-conversations/locking-conversations)."
   */
  "pull-request/locked": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-locked"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A pull request was added to a milestone.
   */
  "pull-request/milestoned": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-milestoned"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A pull request was created
   */
  "pull-request/opened": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-opened"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A draft pull request was marked as ready for review. For more information, see "[Changing the stage of a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request)."
   */
  "pull-request/ready-for-review": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-ready-for-review"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments,or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A previously closed pull request was reopened.
   */
  "pull-request/reopened": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-reopened"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "[Commenting on a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)." For information about the APIs to manage pull request review comments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreviewcomment) or "[Pull request review comments](https://docs.github.com/github-ae@latest/rest/pulls/comments)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request comments, or pull request review threads, use the `pull_request_review`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A comment on a pull request diff was created.
   */
  "pull-request-review-comment/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-review-comment-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "[Commenting on a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)." For information about the APIs to manage pull request review comments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreviewcomment) or "[Pull request review comments](https://docs.github.com/github-ae@latest/rest/pulls/comments)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request comments, or pull request review threads, use the `pull_request_review`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A comment on a pull request diff was deleted.
   */
  "pull-request-review-comment/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-review-comment-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "[Commenting on a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)." For information about the APIs to manage pull request review comments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreviewcomment) or "[Pull request review comments](https://docs.github.com/github-ae@latest/rest/pulls/comments)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request comments, or pull request review threads, use the `pull_request_review`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description The content of a comment on a pull request diff was changed.
   */
  "pull-request-review-comment/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-review-comment-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "[About pull request reviews](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)." For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreview) or "[Pull request reviews](https://docs.github.com/github-ae@latest/rest/pulls/reviews)" in the REST API documentation.
   *
   * For activity related to pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A review on a pull request was dismissed.
   */
  "pull-request-review/dismissed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-review-dismissed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "[About pull request reviews](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)." For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreview) or "[Pull request reviews](https://docs.github.com/github-ae@latest/rest/pulls/reviews)" in the REST API documentation.
   *
   * For activity related to pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description The body comment on a pull request review was edited.
   */
  "pull-request-review/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-review-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A request for review by a person or team was removed from a pull request.
   */
  "pull-request/review-request-removed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-review-request-removed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description Review by a person or team was requested for a pull request. For more information, see "[Requesting a pull request review](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/requesting-a-pull-request-review)."
   */
  "pull-request/review-requested": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-review-requested"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "[About pull request reviews](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)." For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreview) or "[Pull request reviews](https://docs.github.com/github-ae@latest/rest/pulls/reviews)" in the REST API documentation.
   *
   * For activity related to pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A review on a pull request was submitted.
   */
  "pull-request-review/submitted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-review-submitted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a comment thread on a pull request. For more information, see "[About pull request reviews](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)." For information about the APIs to manage pull request review comment threads, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreviewthread) or "[Pull request reviews](https://docs.github.com/github-ae@latest/rest/pulls/reviews)" in the REST API documentation.
   *
   * For activity related to pull request review comments, pull request comments, or pull request reviews, use the `pull_request_review_comment`, `issue_comment`, or `pull_request_review` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A comment thread on a pull request was marked as resolved.
   */
  "pull-request-review-thread/resolved": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-review-thread-resolved"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a comment thread on a pull request. For more information, see "[About pull request reviews](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)." For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreviewthread) or "[Pull request review comments](https://docs.github.com/github-ae@latest/rest/pulls/comments)" in the REST API documentation.
   *
   * For activity related to pull request review comments, pull request comments, or pull request reviews, use the `pull_request_review_comment`, `issue_comment`, or `pull_request_review` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A previously resolved comment thread on a pull request was marked as unresolved.
   */
  "pull-request-review-thread/unresolved": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-review-thread-unresolved"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A pull request's head branch was updated. For example, the head branch was updated from the base branch or new commits were pushed to the head branch.
   */
  "pull-request/synchronize": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-synchronize"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A user was unassigned from a pull request.
   */
  "pull-request/unassigned": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-unassigned"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description A label was removed from a pull request.
   */
  "pull-request/unlabeled": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-unlabeled"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity on a pull request. For more information, see "[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)." For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or "[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)" in the REST API documentation.
   *
   * For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.
   * @description Conversation on a pull request was unlocked. For more information, see "[Locking conversations](https://docs.github.com/github-ae@latest/communities/moderating-comments-and-conversations/locking-conversations)."
   */
  "pull-request/unlocked": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-pull-request-unlocked"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when a commit or tag is pushed.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
   *
   * **Note**: An event will not be created when more than three tags are pushed at once.
   */
  push: {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-push"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to GitHub Packages. For more information, see "[Introduction to GitHub Packages](https://docs.github.com/github-ae@latest/packages/learn-github-packages/introduction-to-github-packages)." For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#package) or "[Packages](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
   *
   * To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
   *
   * **Note**: GitHub recommends that you use the newer `package` event instead.
   * @description A package was published to a registry.
   */
  "registry-package/published": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-registry-package-published"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to GitHub Packages. For more information, see "[Introduction to GitHub Packages](https://docs.github.com/github-ae@latest/packages/learn-github-packages/introduction-to-github-packages)." For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#package) or "[Packages](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
   *
   * To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
   *
   * **Note**: GitHub recommends that you use the newer `package` event instead
   * @description A package that was previously published to a registry was updated.
   */
  "registry-package/updated": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-registry-package-updated"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to releases. For more information, see "[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases)." For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or "[Releases](https://docs.github.com/github-ae@latest/rest/releases)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
   * @description A draft was saved, or a release or pre-release was published without previously being saved as a draft.
   */
  "release/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-release-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to releases. For more information, see "[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases)." For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or "[Releases](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
   * @description A release, pre-release, or draft release was deleted.
   */
  "release/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-release-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to releases. For more information, see "[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases)." For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or "[Releases](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
   * @description The details of a release, pre-release, or draft release were edited. For more information, see "[Managing releases in a repository](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/managing-releases-in-a-repository#editing-a-release)."
   */
  "release/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-release-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to releases. For more information, see "[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases)." For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or "[Releases](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
   * @description A release was created and identified as a pre-release. A pre-release is a release that is not ready for production and may be unstable.
   */
  "release/prereleased": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-release-prereleased"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to releases. For more information, see "[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases)." For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or "[Releases](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
   * @description A release, pre-release, or draft of a release was published.
   */
  "release/published": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-release-published"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to releases. For more information, see "[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases)." For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or "[Releases](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
   * @description A release was published, or a pre-release was changed to a release.
   */
  "release/released": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-release-released"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to releases. For more information, see "[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases)." For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or "[Releases](https://docs.github.com/github-ae@latest/rest/packages)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
   * @description A release or pre-release was unpublished.
   */
  "release/unpublished": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-release-unpublished"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description Someone disabled anonymous Git read access to the repository. For more information, see "[Enabling anonymous Git read access for a repository](/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/enabling-anonymous-git-read-access-for-a-repository)."
   */
  "repository/anonymous-access-disabled": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-repository-anonymous-access-disabled"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description Someone enabled anonymous Git read access to the repository. For more information, see "[Enabling anonymous Git read access for a repository](/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/enabling-anonymous-git-read-access-for-a-repository)."
   */
  "repository/anonymous-access-enabled": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-repository-anonymous-access-enabled"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description A repository was archived.
   */
  "repository/archived": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-repository-archived"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description A repository was created.
   */
  "repository/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-repository-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description A repository was deleted. GitHub Apps and repository webhooks will not receive this event.
   */
  "repository/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-repository-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when a GitHub App sends a `POST` request to `/repos/{owner}/{repo}/dispatches`. For more information, see [the REST API documentation for creating a repository dispatch event](https://docs.github.com/github-ae@latest/rest/repos/repos#create-a-repository-dispatch-event).
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
   * @description The `event_type` that was specified in the `POST /repos/{owner}/{repo}/dispatches` request body.
   */
  "repository-dispatch/sample.collected": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-repository-dispatch-sample"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description The topics, default branch, description, or homepage of a repository was changed.
   */
  "repository/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-repository-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description The visibility of a repository was changed to `private`.
   */
  "repository/privatized": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-repository-privatized"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description The visibility of a repository was changed to `public`.
   */
  "repository/publicized": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-repository-publicized"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description The name of a repository was changed.
   */
  "repository/renamed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-repository-renamed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description Ownership of the repository was transferred to a user or organization account. This event is only sent to the account where the ownership is transferred. To receive the `repository.transferred` event, the new owner account must have the GitHub App installed, and the App must be subscribed to "Repository" events.
   */
  "repository/transferred": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-repository-transferred"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to repositories. For more information, see "[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories)." For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or "[Repositories](https://docs.github.com/github-ae@latest/rest/repos)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description A previously archived repository was unarchived.
   */
  "repository/unarchived": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-repository-unarchived"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "[About secret scanning](https://docs.github.com/github-ae@latest/code-security/secret-scanning/about-secret-scanning)." For information about the API to manage secret scanning alerts, see "[Secret scanning](https://docs.github.com/github-ae@latest/rest/secret-scanning)" in the REST API documentation.
   *
   * For activity relating to secret scanning alert locations, use the `secret_scanning_alert_location` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.
   * @description A secret scanning alert was created.
   */
  "secret-scanning-alert/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-secret-scanning-alert-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
   *
   * For more information about secret scanning, see "[About secret scanning](https://docs.github.com/github-ae@latest/code-security/secret-scanning/about-secret-scanning)." For information about the API to manage secret scanning alerts, see "[Secret scanning](https://docs.github.com/github-ae@latest/rest/secret-scanning)" in the REST API documentation.
   *
   * For activity relating to secret scanning alerts, use the `secret_scanning_alert` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.
   * @description A new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.
   */
  "secret-scanning-alert-location/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-secret-scanning-alert-location-created"];
        "application/x-www-form-urlencoded": components["schemas"]["webhook-secret-scanning-alert-location-created-form-encoded"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "[About secret scanning](https://docs.github.com/github-ae@latest/code-security/secret-scanning/about-secret-scanning)." For information about the API to manage secret scanning alerts, see "[Secret scanning](https://docs.github.com/github-ae@latest/rest/secret-scanning)" in the REST API documentation.
   *
   * For activity relating to secret scanning alert locations, use the `secret_scanning_alert_location` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.
   * @description A previously closed secret scanning alert was reopened.
   */
  "secret-scanning-alert/reopened": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-secret-scanning-alert-reopened"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "[About secret scanning](https://docs.github.com/github-ae@latest/code-security/secret-scanning/about-secret-scanning)." For information about the API to manage secret scanning alerts, see "[Secret scanning](https://docs.github.com/github-ae@latest/rest/secret-scanning)" in the REST API documentation.
   *
   * For activity relating to secret scanning alert locations, use the `secret_scanning_alert_location` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.
   * @description A secret scanning alert was closed.
   */
  "secret-scanning-alert/resolved": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-secret-scanning-alert-resolved"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "[About secret scanning](https://docs.github.com/github-ae@latest/code-security/secret-scanning/about-secret-scanning)." For information about the API to manage secret scanning alerts, see "[Secret scanning](https://docs.github.com/github-ae@latest/rest/secret-scanning)" in the REST API documentation.
   *
   * For activity relating to secret scanning alert locations, use the `secret_scanning_alert_location` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.
   * @description A secret scanning alert was marked as revoked.
   */
  "secret-scanning-alert/revoked": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-secret-scanning-alert-revoked"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "[GitHub security features](https://docs.github.com/github-ae@latest/code-security/getting-started/github-security-features)."
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.
   */
  "security-and-analysis": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-security-and-analysis"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a sponsorship listing. For more information, see "[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors)." For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).
   *
   * You can only create a sponsorship webhook on GitHub.com. For more information, see "[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
   * @description A sponsorship was cancelled and the last billing cycle has ended.
   *
   * This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.
   */
  "sponsorship/cancelled": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-sponsorship-cancelled"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a sponsorship listing. For more information, see "[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors)." For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).
   *
   * You can only create a sponsorship webhook on GitHub.com. For more information, see "[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
   * @description A sponsor created a sponsorship for a sponsored account. This event occurs once the payment is successfully processed.
   */
  "sponsorship/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-sponsorship-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a sponsorship listing. For more information, see "[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors)." For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).
   *
   * You can only create a sponsorship webhook on GitHub.com. For more information, see "[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
   * @description A monthly sponsor changed who can see their sponsorship. If you recognize your sponsors publicly, you may want to update your sponsor recognition to reflect the change when this event occurs.
   */
  "sponsorship/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-sponsorship-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a sponsorship listing. For more information, see "[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors)." For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).
   *
   * You can only create a sponsorship webhook on GitHub.com. For more information, see "[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
   * @description A sponsor scheduled a cancellation for their sponsorship. The cancellation will become effective on their next billing date.
   *
   * This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.
   */
  "sponsorship/pending-cancellation": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-sponsorship-pending-cancellation"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a sponsorship listing. For more information, see "[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors)." For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).
   *
   * You can only create a sponsorship webhook on GitHub.com. For more information, see "[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
   * @description A sponsor scheduled a downgrade to a lower sponsorship tier. The new tier will become effective on their next billing date.
   */
  "sponsorship/pending-tier-change": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-sponsorship-pending-tier-change"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a sponsorship listing. For more information, see "[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors)." For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).
   *
   * You can only create a sponsorship webhook on GitHub.com. For more information, see "[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
   * @description A sponsor changed the tier of their sponsorship and the change has taken effect. If a sponsor upgraded their tier, the change took effect immediately. If a sponsor downgraded their tier, the change took effect at the beginning of the sponsor's next billing cycle.
   */
  "sponsorship/tier-changed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-sponsorship-tier-changed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to repository stars. For more information about stars, see "[Saving repositories with stars](https://docs.github.com/github-ae@latest/get-started/exploring-projects-on-github/saving-repositories-with-stars)." For information about the APIs to manage stars, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#starredrepositoryconnection) or "[Starring](https://docs.github.com/github-ae@latest/rest/activity/starring)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description Someone starred a repository.
   */
  "star/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-star-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to repository stars. For more information about stars, see "[Saving repositories with stars](https://docs.github.com/github-ae@latest/get-started/exploring-projects-on-github/saving-repositories-with-stars)." For information about the APIs to manage stars, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#starredrepositoryconnection) or "[Starring](https://docs.github.com/github-ae@latest/rest/activity/starring)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description Someone unstarred the repository.
   */
  "star/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-star-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when the status of a Git commit changes. For example, commits can be marked as `error`, `failure`, `pending`, or `success`. For more information, see "[About status checks](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks)." For information about the APIs to manage commit statuses, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#status) or "[Statuses](https://docs.github.com/github-ae@latest/rest/reference/commits#commit-statuses)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.
   */
  status: {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-status"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when a team is added to a repository.
   * For more information, see "[Managing teams and people with access to your repository](https://docs.github.com/github-ae@latest/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-teams-and-people-with-access-to-your-repository)."
   *
   * For activity relating to teams, see the `teams` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   */
  "team-add": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-team-add"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to teams in an organization.
   * For more information, see "[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams)."
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   * @description A team was granted access to a repository.
   */
  "team/added-to-repository": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-team-added-to-repository"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to teams in an organization.
   * For more information, see "[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams)."
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   * @description A team was created.
   */
  "team/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-team-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to teams in an organization.
   * For more information, see "[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams)."
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   * @description A team was deleted.
   */
  "team/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-team-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to teams in an organization.
   * For more information, see "[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams)."
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   * @description The name, description, or visibility of a team was changed.
   */
  "team/edited": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-team-edited"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to teams in an organization.
   * For more information, see "[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams)."
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.
   * @description A team's access to a repository was removed.
   */
  "team/removed-from-repository": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-team-removed-from-repository"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to user accounts in an enterprise.
   * @description A user account was added to the enterprise.
   */
  "user/created": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-user-created"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to user accounts in an enterprise.
   * @description A user account was removed from the enterprise.
   */
  "user/deleted": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-user-deleted"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "[Managing your subscriptions](https://docs.github.com/github-ae@latest/account-and-profile/managing-subscriptions-and-notifications-on-github/managing-subscriptions-for-activity-on-github/managing-your-subscriptions)." For information about the APIs to manage watching, see "[Watching](https://docs.github.com/github-ae@latest/rest/activity/watching)" in the REST API documentation.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.
   * @description Someone started watching the repository.
   */
  "watch/started": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-watch-started"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when a GitHub Actions workflow is manually triggered. For more information, see "[Manually running a workflow](https://docs.github.com/github-ae@latest/actions/managing-workflow-runs/manually-running-a-workflow)."
   *
   * For activity relating to workflow runs, use the `workflow_run` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
   */
  "workflow-dispatch": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-workflow-dispatch"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "[Using jobs in a workflow](https://docs.github.com/github-ae@latest/actions/using-jobs/using-jobs-in-a-workflow)." For information about the API to manage workflow jobs, see "[Workflow jobs](https://docs.github.com/github-ae@latest/rest/actions/workflow-jobs)" in the REST API documentation.
   *
   * For activity relating to a workflow run instead of a job in a workflow run, use the `workflow_run` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.
   * @description A job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.
   */
  "workflow-job/completed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-workflow-job-completed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "[Using jobs in a workflow](https://docs.github.com/github-ae@latest/actions/using-jobs/using-jobs-in-a-workflow)." For information about the API to manage workflow jobs, see "[Workflow jobs](https://docs.github.com/github-ae@latest/rest/actions/workflow-jobs)" in the REST API documentation.
   *
   * For activity relating to a workflow run instead of a job in a workflow run, use the `workflow_run` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.
   * @description A job in a workflow run started processing on a runner.
   */
  "workflow-job/in-progress": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-workflow-job-in-progress"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "[Using jobs in a workflow](https://docs.github.com/github-ae@latest/actions/using-jobs/using-jobs-in-a-workflow)." For information about the API to manage workflow jobs, see "[Workflow jobs](https://docs.github.com/github-ae@latest/rest/actions/workflow-jobs)" in the REST API documentation.
   *
   * For activity relating to a workflow run instead of a job in a workflow run, use the `workflow_run` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.
   * @description A job in a workflow run was created.
   */
  "workflow-job/queued": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-workflow-job-queued"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "[About workflows](https://docs.github.com/github-ae@latest/actions/using-workflows/about-workflows)." For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#workflowrun) or "[Workflow runs](https://docs.github.com/github-ae@latest/rest/actions/workflow-runs)" in the REST API documentation.
   *
   * For activity relating to a job in a workflow run, use the `workflow_job` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.
   * @description A workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.
   */
  "workflow-run/completed": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-workflow-run-completed"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "[About workflows](https://docs.github.com/github-ae@latest/actions/using-workflows/about-workflows)." For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#workflowrun) or "[Workflow runs](https://docs.github.com/github-ae@latest/rest/actions/workflow-runs)" in the REST API documentation.
   *
   * For activity relating to a job in a workflow run, use the `workflow_job` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.
   * @description A workflow run started processing on a runner.
   */
  "workflow-run/in-progress": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-workflow-run-in-progress"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
  /**
   * This event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "[About workflows](https://docs.github.com/github-ae@latest/actions/using-workflows/about-workflows)." For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#workflowrun) or "[Workflow runs](https://docs.github.com/github-ae@latest/rest/actions/workflow-runs)" in the REST API documentation.
   *
   * For activity relating to a job in a workflow run, use the `workflow_job` event.
   *
   * To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.
   * @description A workflow run was triggered.
   */
  "workflow-run/requested": {
    parameters: {
      header: {
        /** @example GitHub-Hookshot/123abc */
        "User-Agent"?: string;
        /** @example 12312312 */
        "X-Github-Hook-Id"?: string;
        /** @example issues */
        "X-Github-Event"?: string;
        /** @example 123123 */
        "X-Github-Hook-Installation-Target-Id"?: string;
        /** @example repository */
        "X-Github-Hook-Installation-Target-Type"?: string;
        /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
        "X-GitHub-Delivery"?: string;
        /** @example sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e */
        "X-Hub-Signature-256"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["webhook-workflow-run-requested"];
      };
    };
    responses: {
      /** @description Return a 200 status to indicate that the data was received successfully */
      200: never;
    };
  };
}
